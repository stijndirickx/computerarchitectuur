
gamecontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000010e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004a  00802000  000010e0  00001174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006d  0080204a  0080204a  000011be  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000011be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000121c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  0000125c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017c5  00000000  00000000  00001404  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007e0  00000000  00000000  00002bc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a88  00000000  00000000  000033a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003f8  00000000  00000000  00004e34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00011f62  00000000  00000000  0000522c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000684  00000000  00000000  0001718e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00017812  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000058d5  00000000  00000000  0001792a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__ctors_end>
       4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
       8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
       c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      10:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      14:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      18:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      1c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      20:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      24:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      28:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      2c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      30:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      34:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      38:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      3c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      40:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      44:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      48:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      4c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      50:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      54:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      58:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      5c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      60:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      64:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      68:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      6c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      70:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      74:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      78:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      7c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      80:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      84:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      88:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      8c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      90:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      94:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      98:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      9c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      a0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      a4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      a8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      ac:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      b0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      b4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      b8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      bc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      c0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      c4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      c8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      cc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      d0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      d4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      d8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      dc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      e0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      e4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      e8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      ec:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      f0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      f4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      f8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      fc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     100:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     104:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     108:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     10c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     110:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     114:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     118:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     11c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     120:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     124:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     128:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     12c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     130:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     134:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     138:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     13c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     140:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     144:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     148:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     14c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     150:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     154:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     158:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     15c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     160:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     164:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     168:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>

0000016c <__ctors_end>:
     16c:	11 24       	eor	r1, r1
     16e:	1f be       	out	0x3f, r1	; 63
     170:	cf ef       	ldi	r28, 0xFF	; 255
     172:	cd bf       	out	0x3d, r28	; 61
     174:	d7 e2       	ldi	r29, 0x27	; 39
     176:	de bf       	out	0x3e, r29	; 62

00000178 <__do_copy_data>:
     178:	10 e2       	ldi	r17, 0x20	; 32
     17a:	a0 e0       	ldi	r26, 0x00	; 0
     17c:	b0 e2       	ldi	r27, 0x20	; 32
     17e:	e0 ee       	ldi	r30, 0xE0	; 224
     180:	f0 e1       	ldi	r31, 0x10	; 16
     182:	02 c0       	rjmp	.+4      	; 0x188 <__do_copy_data+0x10>
     184:	05 90       	lpm	r0, Z+
     186:	0d 92       	st	X+, r0
     188:	aa 34       	cpi	r26, 0x4A	; 74
     18a:	b1 07       	cpc	r27, r17
     18c:	d9 f7       	brne	.-10     	; 0x184 <__do_copy_data+0xc>

0000018e <__do_clear_bss>:
     18e:	20 e2       	ldi	r18, 0x20	; 32
     190:	aa e4       	ldi	r26, 0x4A	; 74
     192:	b0 e2       	ldi	r27, 0x20	; 32
     194:	01 c0       	rjmp	.+2      	; 0x198 <.do_clear_bss_start>

00000196 <.do_clear_bss_loop>:
     196:	1d 92       	st	X+, r1

00000198 <.do_clear_bss_start>:
     198:	a7 3b       	cpi	r26, 0xB7	; 183
     19a:	b2 07       	cpc	r27, r18
     19c:	e1 f7       	brne	.-8      	; 0x196 <.do_clear_bss_loop>
     19e:	0e 94 bd 01 	call	0x37a	; 0x37a <main>
     1a2:	0c 94 6e 08 	jmp	0x10dc	; 0x10dc <_exit>

000001a6 <__bad_interrupt>:
     1a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001aa <AccInit>:
#include "acc.h"



void AccInit(void)
{
     1aa:	cf 93       	push	r28
     1ac:	df 93       	push	r29
     1ae:	cd b7       	in	r28, 0x3d	; 61
     1b0:	de b7       	in	r29, 0x3e	; 62
	//De accelerometer dient geïnitialiseerd te worden.
	//Dit houdt in dat de accelerometer uit slaaptoestand moet gehaald worden. 

	//accelerometer uit slaaptoestand
	// PC6 = ACC_SLEEP
	PORTC.DIRSET = 0b01000000;
     1b2:	80 e4       	ldi	r24, 0x40	; 64
     1b4:	96 e0       	ldi	r25, 0x06	; 6
     1b6:	20 e4       	ldi	r18, 0x40	; 64
     1b8:	fc 01       	movw	r30, r24
     1ba:	21 83       	std	Z+1, r18	; 0x01
	PORTC.PIN6CTRL = 0b00010001; // 0 reserved - 0 inverted IO enable - 010 Pull-down (on input) - 001 Sense rising edge
     1bc:	80 e4       	ldi	r24, 0x40	; 64
     1be:	96 e0       	ldi	r25, 0x06	; 6
     1c0:	21 e1       	ldi	r18, 0x11	; 17
     1c2:	fc 01       	movw	r30, r24
     1c4:	26 8b       	std	Z+22, r18	; 0x16

	//accelerometer actief zetten
	PORTC.OUTSET = 0b01000000; //driven high
     1c6:	80 e4       	ldi	r24, 0x40	; 64
     1c8:	96 e0       	ldi	r25, 0x06	; 6
     1ca:	20 e4       	ldi	r18, 0x40	; 64
     1cc:	fc 01       	movw	r30, r24
     1ce:	25 83       	std	Z+5, r18	; 0x05
	
}
     1d0:	00 00       	nop
     1d2:	df 91       	pop	r29
     1d4:	cf 91       	pop	r28
     1d6:	08 95       	ret

000001d8 <AccGetXAxisRaw>:
unsigned int AccGetXAxisRaw(void)
{
     1d8:	cf 93       	push	r28
     1da:	df 93       	push	r29
     1dc:	cd b7       	in	r28, 0x3d	; 61
     1de:	de b7       	in	r29, 0x3e	; 62
	return AnalogGetCh(0, 4); //X op PA0 & PinNeg op PA4 = GND
     1e0:	64 e0       	ldi	r22, 0x04	; 4
     1e2:	70 e0       	ldi	r23, 0x00	; 0
     1e4:	80 e0       	ldi	r24, 0x00	; 0
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	0e 94 54 01 	call	0x2a8	; 0x2a8 <AnalogGetCh>
}
     1ec:	df 91       	pop	r29
     1ee:	cf 91       	pop	r28
     1f0:	08 95       	ret

000001f2 <AccGetYAxisRaw>:
unsigned int AccGetYAxisRaw(void)
{
     1f2:	cf 93       	push	r28
     1f4:	df 93       	push	r29
     1f6:	cd b7       	in	r28, 0x3d	; 61
     1f8:	de b7       	in	r29, 0x3e	; 62
	return AnalogGetCh(1, 4); //Y op PA1 & PinNeg op PA4 = GND
     1fa:	64 e0       	ldi	r22, 0x04	; 4
     1fc:	70 e0       	ldi	r23, 0x00	; 0
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	0e 94 54 01 	call	0x2a8	; 0x2a8 <AnalogGetCh>
}
     206:	df 91       	pop	r29
     208:	cf 91       	pop	r28
     20a:	08 95       	ret

0000020c <AccGetZAxisRaw>:
unsigned int AccGetZAxisRaw(void)
{
     20c:	cf 93       	push	r28
     20e:	df 93       	push	r29
     210:	cd b7       	in	r28, 0x3d	; 61
     212:	de b7       	in	r29, 0x3e	; 62
	return AnalogGetCh(2, 4); //Z op PA2 & PinNeg op PA4 = GND
     214:	64 e0       	ldi	r22, 0x04	; 4
     216:	70 e0       	ldi	r23, 0x00	; 0
     218:	82 e0       	ldi	r24, 0x02	; 2
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	0e 94 54 01 	call	0x2a8	; 0x2a8 <AnalogGetCh>
}
     220:	df 91       	pop	r29
     222:	cf 91       	pop	r28
     224:	08 95       	ret

00000226 <AccGetXAxis>:

int AccGetXAxis(unsigned int AccRaw)
{
     226:	cf 93       	push	r28
     228:	df 93       	push	r29
     22a:	00 d0       	rcall	.+0      	; 0x22c <AccGetXAxis+0x6>
     22c:	cd b7       	in	r28, 0x3d	; 61
     22e:	de b7       	in	r29, 0x3e	; 62
     230:	89 83       	std	Y+1, r24	; 0x01
     232:	9a 83       	std	Y+2, r25	; 0x02
	return 0;
     234:	80 e0       	ldi	r24, 0x00	; 0
     236:	90 e0       	ldi	r25, 0x00	; 0
}
     238:	0f 90       	pop	r0
     23a:	0f 90       	pop	r0
     23c:	df 91       	pop	r29
     23e:	cf 91       	pop	r28
     240:	08 95       	ret

00000242 <AccGetYAxis>:

int AccGetYAxis(unsigned int AccRaw)
{
     242:	cf 93       	push	r28
     244:	df 93       	push	r29
     246:	00 d0       	rcall	.+0      	; 0x248 <AccGetYAxis+0x6>
     248:	cd b7       	in	r28, 0x3d	; 61
     24a:	de b7       	in	r29, 0x3e	; 62
     24c:	89 83       	std	Y+1, r24	; 0x01
     24e:	9a 83       	std	Y+2, r25	; 0x02
	return 0;
     250:	80 e0       	ldi	r24, 0x00	; 0
     252:	90 e0       	ldi	r25, 0x00	; 0
}
     254:	0f 90       	pop	r0
     256:	0f 90       	pop	r0
     258:	df 91       	pop	r29
     25a:	cf 91       	pop	r28
     25c:	08 95       	ret

0000025e <AccGetZAxis>:

int AccGetZAxis(unsigned int AccRaw)
{
     25e:	cf 93       	push	r28
     260:	df 93       	push	r29
     262:	00 d0       	rcall	.+0      	; 0x264 <AccGetZAxis+0x6>
     264:	cd b7       	in	r28, 0x3d	; 61
     266:	de b7       	in	r29, 0x3e	; 62
     268:	89 83       	std	Y+1, r24	; 0x01
     26a:	9a 83       	std	Y+2, r25	; 0x02
	return 0;
     26c:	80 e0       	ldi	r24, 0x00	; 0
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	0f 90       	pop	r0
     272:	0f 90       	pop	r0
     274:	df 91       	pop	r29
     276:	cf 91       	pop	r28
     278:	08 95       	ret

0000027a <AnalogInit>:
#include "Analog.h"
#include <avr/io.h>

void AnalogInit(void)
{
     27a:	cf 93       	push	r28
     27c:	df 93       	push	r29
     27e:	cd b7       	in	r28, 0x3d	; 61
     280:	de b7       	in	r29, 0x3e	; 62
	ADCA.REFCTRL = 0b0000010; // 0 - 000 (INT1V: referentie 1V) - 0 - 1 bandgap enable: 'verboden zone' - 0 (temp sensor uit)
     282:	80 e0       	ldi	r24, 0x00	; 0
     284:	92 e0       	ldi	r25, 0x02	; 2
     286:	22 e0       	ldi	r18, 0x02	; 2
     288:	fc 01       	movw	r30, r24
     28a:	22 83       	std	Z+2, r18	; 0x02
	ADCA.PRESCALER = 0b00000010; // 010 = DIV16 = divide by 16 --> 16 MHz (clock) / 16 = 1 MHz, ADC max 1.4 mHz
     28c:	80 e0       	ldi	r24, 0x00	; 0
     28e:	92 e0       	ldi	r25, 0x02	; 2
     290:	22 e0       	ldi	r18, 0x02	; 2
     292:	fc 01       	movw	r30, r24
     294:	24 83       	std	Z+4, r18	; 0x04
	ADCA.CTRLB = 0b00010000; // 0 momenteel unused - 00 current limiet uit - 1 Conversion Mode: configured for signed mode - 0 geen freerunning - 00 conversion op 12-bit, right adjusted - 0 
     296:	80 e0       	ldi	r24, 0x00	; 0
     298:	92 e0       	ldi	r25, 0x02	; 2
     29a:	20 e1       	ldi	r18, 0x10	; 16
     29c:	fc 01       	movw	r30, r24
     29e:	21 83       	std	Z+1, r18	; 0x01

}
     2a0:	00 00       	nop
     2a2:	df 91       	pop	r29
     2a4:	cf 91       	pop	r28
     2a6:	08 95       	ret

000002a8 <AnalogGetCh>:
int AnalogGetCh(int PinPos,int PinNeg)
{
     2a8:	cf 93       	push	r28
     2aa:	df 93       	push	r29
     2ac:	00 d0       	rcall	.+0      	; 0x2ae <AnalogGetCh+0x6>
     2ae:	00 d0       	rcall	.+0      	; 0x2b0 <AnalogGetCh+0x8>
     2b0:	cd b7       	in	r28, 0x3d	; 61
     2b2:	de b7       	in	r29, 0x3e	; 62
     2b4:	89 83       	std	Y+1, r24	; 0x01
     2b6:	9a 83       	std	Y+2, r25	; 0x02
     2b8:	6b 83       	std	Y+3, r22	; 0x03
     2ba:	7c 83       	std	Y+4, r23	; 0x04
	//Get analog channel value
	ADCA.CH0.MUXCTRL = ((PinPos & 0b00000111) << 3) | (PinNeg & 0b00000111); // 1e bit reserved - 4 bits MUXPOS[3:0] niet boven 15 - 3 bits MUXNEG[2:0] niet boven 7
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	92 e0       	ldi	r25, 0x02	; 2
     2c0:	29 81       	ldd	r18, Y+1	; 0x01
     2c2:	3a 81       	ldd	r19, Y+2	; 0x02
     2c4:	27 70       	andi	r18, 0x07	; 7
     2c6:	33 27       	eor	r19, r19
     2c8:	22 0f       	add	r18, r18
     2ca:	33 1f       	adc	r19, r19
     2cc:	22 0f       	add	r18, r18
     2ce:	33 1f       	adc	r19, r19
     2d0:	22 0f       	add	r18, r18
     2d2:	33 1f       	adc	r19, r19
     2d4:	32 2f       	mov	r19, r18
     2d6:	2b 81       	ldd	r18, Y+3	; 0x03
     2d8:	27 70       	andi	r18, 0x07	; 7
     2da:	23 2b       	or	r18, r19
     2dc:	fc 01       	movw	r30, r24
     2de:	21 a3       	std	Z+33, r18	; 0x21

	if(PinNeg == -1){
     2e0:	8b 81       	ldd	r24, Y+3	; 0x03
     2e2:	9c 81       	ldd	r25, Y+4	; 0x04
     2e4:	01 96       	adiw	r24, 0x01	; 1
     2e6:	31 f4       	brne	.+12     	; 0x2f4 <AnalogGetCh+0x4c>
		//Single ended mode: input pin (0 to 15)
		ADCA.CH0.CTRL = 0b10000001; // 1 Start - 00 reserved - 00 gain - 10 inputmode single ended
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	92 e0       	ldi	r25, 0x02	; 2
     2ec:	21 e8       	ldi	r18, 0x81	; 129
     2ee:	fc 01       	movw	r30, r24
     2f0:	20 a3       	std	Z+32, r18	; 0x20
     2f2:	0f c0       	rjmp	.+30     	; 0x312 <AnalogGetCh+0x6a>
	} else if(PinNeg > 3) {
     2f4:	8b 81       	ldd	r24, Y+3	; 0x03
     2f6:	9c 81       	ldd	r25, Y+4	; 0x04
     2f8:	04 97       	sbiw	r24, 0x04	; 4
     2fa:	34 f0       	brlt	.+12     	; 0x308 <AnalogGetCh+0x60>
		//Differential mode: GAIN
		ADCA.CH0.CTRL = 0b10000011; // 1 Start - 00 reserved - 00 gain - 10 inputmode differential
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	92 e0       	ldi	r25, 0x02	; 2
     300:	23 e8       	ldi	r18, 0x83	; 131
     302:	fc 01       	movw	r30, r24
     304:	20 a3       	std	Z+32, r18	; 0x20
     306:	05 c0       	rjmp	.+10     	; 0x312 <AnalogGetCh+0x6a>
	} else {
		//Differential mode: no Gain
		ADCA.CH0.CTRL = 0b10000010; // 1 Start - 00 reserved - 00 gain - 10 inputmode differential 
     308:	80 e0       	ldi	r24, 0x00	; 0
     30a:	92 e0       	ldi	r25, 0x02	; 2
     30c:	22 e8       	ldi	r18, 0x82	; 130
     30e:	fc 01       	movw	r30, r24
     310:	20 a3       	std	Z+32, r18	; 0x20
	}

	ADCA.INTFLAGS = 0b00000001;	//Reset interrupt flag
     312:	80 e0       	ldi	r24, 0x00	; 0
     314:	92 e0       	ldi	r25, 0x02	; 2
     316:	21 e0       	ldi	r18, 0x01	; 1
     318:	fc 01       	movw	r30, r24
     31a:	26 83       	std	Z+6, r18	; 0x06
	ADCA.CTRLA = 0b00000101; // 00000 = reserved - 1 CH0(ADC) start - 0 pipeline flush - 1 enable ADC
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	92 e0       	ldi	r25, 0x02	; 2
     320:	25 e0       	ldi	r18, 0x05	; 5
     322:	fc 01       	movw	r30, r24
     324:	20 83       	st	Z, r18
	while(ADCA.INTFLAGS == (0x00)); // wait until last bit is set = ADC conversion complete
     326:	00 00       	nop
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	92 e0       	ldi	r25, 0x02	; 2
     32c:	fc 01       	movw	r30, r24
     32e:	86 81       	ldd	r24, Z+6	; 0x06
     330:	88 23       	and	r24, r24
     332:	d1 f3       	breq	.-12     	; 0x328 <AnalogGetCh+0x80>

	return ADCA.CH0.RES; // return Channel 0 Result register
     334:	80 e0       	ldi	r24, 0x00	; 0
     336:	92 e0       	ldi	r25, 0x02	; 2
     338:	fc 01       	movw	r30, r24
     33a:	84 a1       	ldd	r24, Z+36	; 0x24
     33c:	95 a1       	ldd	r25, Z+37	; 0x25
     33e:	24 96       	adiw	r28, 0x04	; 4
     340:	cd bf       	out	0x3d, r28	; 61
     342:	de bf       	out	0x3e, r29	; 62
     344:	df 91       	pop	r29
     346:	cf 91       	pop	r28
     348:	08 95       	ret

0000034a <ClockInit>:
#pragma GCC push_options
#pragma GCC optimize ("O2") //This function must be optimized to avoid too long time interval betwee CCP write and CLK.CTRL write (4 CLK CYC max)

void ClockInit(void)
{
	OSC.XOSCCTRL=0b11001011; //Clock<=16MHz	
     34a:	8b ec       	ldi	r24, 0xCB	; 203
     34c:	80 93 52 00 	sts	0x0052, r24	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
	OSC.CTRL=0b01000; //Enable oscillator	
     350:	88 e0       	ldi	r24, 0x08	; 8
     352:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
	while (!(OSC.STATUS&0b1000)); //Wait until XTAL osc is ready
     356:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
     35a:	83 ff       	sbrs	r24, 3
     35c:	fc cf       	rjmp	.-8      	; 0x356 <ClockInit+0xc>
	
	//Select XTAL osc as system CLK source
	CCP=0xd8;
     35e:	88 ed       	ldi	r24, 0xD8	; 216
     360:	84 bf       	out	0x34, r24	; 52
    CLK.CTRL=0b0011;
     362:	83 e0       	ldi	r24, 0x03	; 3
     364:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
     368:	08 95       	ret

0000036a <EncoderInit>:
#include <util/delay.h>
#include <stdio.h>
#include "encoder.h"

void EncoderInit(void)
{
     36a:	cf 93       	push	r28
     36c:	df 93       	push	r29
     36e:	cd b7       	in	r28, 0x3d	; 61
     370:	de b7       	in	r29, 0x3e	; 62

}
     372:	00 00       	nop
     374:	df 91       	pop	r29
     376:	cf 91       	pop	r28
     378:	08 95       	ret

0000037a <main>:
	{
		//The variable text had the same address throughout the execution of the program.
		sprintf(text[a],"Counter:%d\r",a);
		puts(text[a]);
	}
}
     37a:	cf 93       	push	r28
     37c:	df 93       	push	r29
     37e:	cd b7       	in	r28, 0x3d	; 61
     380:	de b7       	in	r29, 0x3e	; 62
     382:	6c 97       	sbiw	r28, 0x1c	; 28
     384:	cd bf       	out	0x3d, r28	; 61
     386:	de bf       	out	0x3e, r29	; 62
     388:	0e 94 a5 01 	call	0x34a	; 0x34a <ClockInit>
     38c:	0e 94 06 04 	call	0x80c	; 0x80c <USARTInit>
     390:	0e 94 3d 01 	call	0x27a	; 0x27a <AnalogInit>
     394:	0e 94 d5 00 	call	0x1aa	; 0x1aa <AccInit>
     398:	0e 94 70 03 	call	0x6e0	; 0x6e0 <LEDInit>
     39c:	0e 94 bd 03 	call	0x77a	; 0x77a <SwitchInit>
     3a0:	0e 94 b5 01 	call	0x36a	; 0x36a <EncoderInit>
     3a4:	0e 94 b5 03 	call	0x76a	; 0x76a <SpeakerInit>
     3a8:	80 ea       	ldi	r24, 0xA0	; 160
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	20 ea       	ldi	r18, 0xA0	; 160
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	f9 01       	movw	r30, r18
     3b2:	22 81       	ldd	r18, Z+2	; 0x02
     3b4:	27 60       	ori	r18, 0x07	; 7
     3b6:	fc 01       	movw	r30, r24
     3b8:	22 83       	std	Z+2, r18	; 0x02
     3ba:	8f e3       	ldi	r24, 0x3F	; 63
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	2f e3       	ldi	r18, 0x3F	; 63
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	f9 01       	movw	r30, r18
     3c4:	20 81       	ld	r18, Z
     3c6:	20 68       	ori	r18, 0x80	; 128
     3c8:	fc 01       	movw	r30, r24
     3ca:	20 83       	st	Z, r18
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	aa ef       	ldi	r26, 0xFA	; 250
     3d2:	b3 e4       	ldi	r27, 0x43	; 67
     3d4:	8d 83       	std	Y+5, r24	; 0x05
     3d6:	9e 83       	std	Y+6, r25	; 0x06
     3d8:	af 83       	std	Y+7, r26	; 0x07
     3da:	b8 87       	std	Y+8, r27	; 0x08
     3dc:	20 e0       	ldi	r18, 0x00	; 0
     3de:	30 e0       	ldi	r19, 0x00	; 0
     3e0:	4a e7       	ldi	r20, 0x7A	; 122
     3e2:	55 e4       	ldi	r21, 0x45	; 69
     3e4:	6d 81       	ldd	r22, Y+5	; 0x05
     3e6:	7e 81       	ldd	r23, Y+6	; 0x06
     3e8:	8f 81       	ldd	r24, Y+7	; 0x07
     3ea:	98 85       	ldd	r25, Y+8	; 0x08
     3ec:	0e 94 01 05 	call	0xa02	; 0xa02 <__mulsf3>
     3f0:	dc 01       	movw	r26, r24
     3f2:	cb 01       	movw	r24, r22
     3f4:	89 87       	std	Y+9, r24	; 0x09
     3f6:	9a 87       	std	Y+10, r25	; 0x0a
     3f8:	ab 87       	std	Y+11, r26	; 0x0b
     3fa:	bc 87       	std	Y+12, r27	; 0x0c
     3fc:	20 e0       	ldi	r18, 0x00	; 0
     3fe:	30 e0       	ldi	r19, 0x00	; 0
     400:	40 e8       	ldi	r20, 0x80	; 128
     402:	5f e3       	ldi	r21, 0x3F	; 63
     404:	69 85       	ldd	r22, Y+9	; 0x09
     406:	7a 85       	ldd	r23, Y+10	; 0x0a
     408:	8b 85       	ldd	r24, Y+11	; 0x0b
     40a:	9c 85       	ldd	r25, Y+12	; 0x0c
     40c:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__cmpsf2>
     410:	88 23       	and	r24, r24
     412:	2c f4       	brge	.+10     	; 0x41e <__FUSE_REGION_LENGTH__+0x1e>
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	8d 87       	std	Y+13, r24	; 0x0d
     41a:	9e 87       	std	Y+14, r25	; 0x0e
     41c:	3f c0       	rjmp	.+126    	; 0x49c <__FUSE_REGION_LENGTH__+0x9c>
     41e:	20 e0       	ldi	r18, 0x00	; 0
     420:	3f ef       	ldi	r19, 0xFF	; 255
     422:	4f e7       	ldi	r20, 0x7F	; 127
     424:	57 e4       	ldi	r21, 0x47	; 71
     426:	69 85       	ldd	r22, Y+9	; 0x09
     428:	7a 85       	ldd	r23, Y+10	; 0x0a
     42a:	8b 85       	ldd	r24, Y+11	; 0x0b
     42c:	9c 85       	ldd	r25, Y+12	; 0x0c
     42e:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__gesf2>
     432:	18 16       	cp	r1, r24
     434:	4c f5       	brge	.+82     	; 0x488 <__FUSE_REGION_LENGTH__+0x88>
     436:	20 e0       	ldi	r18, 0x00	; 0
     438:	30 e0       	ldi	r19, 0x00	; 0
     43a:	40 e2       	ldi	r20, 0x20	; 32
     43c:	51 e4       	ldi	r21, 0x41	; 65
     43e:	6d 81       	ldd	r22, Y+5	; 0x05
     440:	7e 81       	ldd	r23, Y+6	; 0x06
     442:	8f 81       	ldd	r24, Y+7	; 0x07
     444:	98 85       	ldd	r25, Y+8	; 0x08
     446:	0e 94 01 05 	call	0xa02	; 0xa02 <__mulsf3>
     44a:	dc 01       	movw	r26, r24
     44c:	cb 01       	movw	r24, r22
     44e:	bc 01       	movw	r22, r24
     450:	cd 01       	movw	r24, r26
     452:	0e 94 80 04 	call	0x900	; 0x900 <__fixunssfsi>
     456:	dc 01       	movw	r26, r24
     458:	cb 01       	movw	r24, r22
     45a:	8d 87       	std	Y+13, r24	; 0x0d
     45c:	9e 87       	std	Y+14, r25	; 0x0e
     45e:	0f c0       	rjmp	.+30     	; 0x47e <__FUSE_REGION_LENGTH__+0x7e>
     460:	80 e9       	ldi	r24, 0x90	; 144
     462:	91 e0       	ldi	r25, 0x01	; 1
     464:	8f 87       	std	Y+15, r24	; 0x0f
     466:	98 8b       	std	Y+16, r25	; 0x10
     468:	8f 85       	ldd	r24, Y+15	; 0x0f
     46a:	98 89       	ldd	r25, Y+16	; 0x10
     46c:	01 97       	sbiw	r24, 0x01	; 1
     46e:	f1 f7       	brne	.-4      	; 0x46c <__FUSE_REGION_LENGTH__+0x6c>
     470:	8f 87       	std	Y+15, r24	; 0x0f
     472:	98 8b       	std	Y+16, r25	; 0x10
     474:	8d 85       	ldd	r24, Y+13	; 0x0d
     476:	9e 85       	ldd	r25, Y+14	; 0x0e
     478:	01 97       	sbiw	r24, 0x01	; 1
     47a:	8d 87       	std	Y+13, r24	; 0x0d
     47c:	9e 87       	std	Y+14, r25	; 0x0e
     47e:	8d 85       	ldd	r24, Y+13	; 0x0d
     480:	9e 85       	ldd	r25, Y+14	; 0x0e
     482:	89 2b       	or	r24, r25
     484:	69 f7       	brne	.-38     	; 0x460 <__FUSE_REGION_LENGTH__+0x60>
     486:	14 c0       	rjmp	.+40     	; 0x4b0 <__FUSE_REGION_LENGTH__+0xb0>
     488:	69 85       	ldd	r22, Y+9	; 0x09
     48a:	7a 85       	ldd	r23, Y+10	; 0x0a
     48c:	8b 85       	ldd	r24, Y+11	; 0x0b
     48e:	9c 85       	ldd	r25, Y+12	; 0x0c
     490:	0e 94 80 04 	call	0x900	; 0x900 <__fixunssfsi>
     494:	dc 01       	movw	r26, r24
     496:	cb 01       	movw	r24, r22
     498:	8d 87       	std	Y+13, r24	; 0x0d
     49a:	9e 87       	std	Y+14, r25	; 0x0e
     49c:	8d 85       	ldd	r24, Y+13	; 0x0d
     49e:	9e 85       	ldd	r25, Y+14	; 0x0e
     4a0:	89 8b       	std	Y+17, r24	; 0x11
     4a2:	9a 8b       	std	Y+18, r25	; 0x12
     4a4:	89 89       	ldd	r24, Y+17	; 0x11
     4a6:	9a 89       	ldd	r25, Y+18	; 0x12
     4a8:	01 97       	sbiw	r24, 0x01	; 1
     4aa:	f1 f7       	brne	.-4      	; 0x4a8 <__FUSE_REGION_LENGTH__+0xa8>
     4ac:	89 8b       	std	Y+17, r24	; 0x11
     4ae:	9a 8b       	std	Y+18, r25	; 0x12
     4b0:	81 e0       	ldi	r24, 0x01	; 1
     4b2:	80 93 ae 20 	sts	0x20AE, r24	; 0x8020ae <bitmask>
     4b6:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <LightLoop>
     4ba:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SwitchPrint>
     4be:	0e 94 0d 03 	call	0x61a	; 0x61a <AccPrint>
     4c2:	80 e0       	ldi	r24, 0x00	; 0
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	aa ef       	ldi	r26, 0xFA	; 250
     4c8:	b3 e4       	ldi	r27, 0x43	; 67
     4ca:	89 83       	std	Y+1, r24	; 0x01
     4cc:	9a 83       	std	Y+2, r25	; 0x02
     4ce:	ab 83       	std	Y+3, r26	; 0x03
     4d0:	bc 83       	std	Y+4, r27	; 0x04
     4d2:	20 e0       	ldi	r18, 0x00	; 0
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	4a e7       	ldi	r20, 0x7A	; 122
     4d8:	55 e4       	ldi	r21, 0x45	; 69
     4da:	69 81       	ldd	r22, Y+1	; 0x01
     4dc:	7a 81       	ldd	r23, Y+2	; 0x02
     4de:	8b 81       	ldd	r24, Y+3	; 0x03
     4e0:	9c 81       	ldd	r25, Y+4	; 0x04
     4e2:	0e 94 01 05 	call	0xa02	; 0xa02 <__mulsf3>
     4e6:	dc 01       	movw	r26, r24
     4e8:	cb 01       	movw	r24, r22
     4ea:	8b 8b       	std	Y+19, r24	; 0x13
     4ec:	9c 8b       	std	Y+20, r25	; 0x14
     4ee:	ad 8b       	std	Y+21, r26	; 0x15
     4f0:	be 8b       	std	Y+22, r27	; 0x16
     4f2:	20 e0       	ldi	r18, 0x00	; 0
     4f4:	30 e0       	ldi	r19, 0x00	; 0
     4f6:	40 e8       	ldi	r20, 0x80	; 128
     4f8:	5f e3       	ldi	r21, 0x3F	; 63
     4fa:	6b 89       	ldd	r22, Y+19	; 0x13
     4fc:	7c 89       	ldd	r23, Y+20	; 0x14
     4fe:	8d 89       	ldd	r24, Y+21	; 0x15
     500:	9e 89       	ldd	r25, Y+22	; 0x16
     502:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__cmpsf2>
     506:	88 23       	and	r24, r24
     508:	2c f4       	brge	.+10     	; 0x514 <__FUSE_REGION_LENGTH__+0x114>
     50a:	81 e0       	ldi	r24, 0x01	; 1
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	8f 8b       	std	Y+23, r24	; 0x17
     510:	98 8f       	std	Y+24, r25	; 0x18
     512:	3f c0       	rjmp	.+126    	; 0x592 <__FUSE_REGION_LENGTH__+0x192>
     514:	20 e0       	ldi	r18, 0x00	; 0
     516:	3f ef       	ldi	r19, 0xFF	; 255
     518:	4f e7       	ldi	r20, 0x7F	; 127
     51a:	57 e4       	ldi	r21, 0x47	; 71
     51c:	6b 89       	ldd	r22, Y+19	; 0x13
     51e:	7c 89       	ldd	r23, Y+20	; 0x14
     520:	8d 89       	ldd	r24, Y+21	; 0x15
     522:	9e 89       	ldd	r25, Y+22	; 0x16
     524:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__gesf2>
     528:	18 16       	cp	r1, r24
     52a:	4c f5       	brge	.+82     	; 0x57e <__FUSE_REGION_LENGTH__+0x17e>
     52c:	20 e0       	ldi	r18, 0x00	; 0
     52e:	30 e0       	ldi	r19, 0x00	; 0
     530:	40 e2       	ldi	r20, 0x20	; 32
     532:	51 e4       	ldi	r21, 0x41	; 65
     534:	69 81       	ldd	r22, Y+1	; 0x01
     536:	7a 81       	ldd	r23, Y+2	; 0x02
     538:	8b 81       	ldd	r24, Y+3	; 0x03
     53a:	9c 81       	ldd	r25, Y+4	; 0x04
     53c:	0e 94 01 05 	call	0xa02	; 0xa02 <__mulsf3>
     540:	dc 01       	movw	r26, r24
     542:	cb 01       	movw	r24, r22
     544:	bc 01       	movw	r22, r24
     546:	cd 01       	movw	r24, r26
     548:	0e 94 80 04 	call	0x900	; 0x900 <__fixunssfsi>
     54c:	dc 01       	movw	r26, r24
     54e:	cb 01       	movw	r24, r22
     550:	8f 8b       	std	Y+23, r24	; 0x17
     552:	98 8f       	std	Y+24, r25	; 0x18
     554:	0f c0       	rjmp	.+30     	; 0x574 <__FUSE_REGION_LENGTH__+0x174>
     556:	80 e9       	ldi	r24, 0x90	; 144
     558:	91 e0       	ldi	r25, 0x01	; 1
     55a:	89 8f       	std	Y+25, r24	; 0x19
     55c:	9a 8f       	std	Y+26, r25	; 0x1a
     55e:	89 8d       	ldd	r24, Y+25	; 0x19
     560:	9a 8d       	ldd	r25, Y+26	; 0x1a
     562:	01 97       	sbiw	r24, 0x01	; 1
     564:	f1 f7       	brne	.-4      	; 0x562 <__FUSE_REGION_LENGTH__+0x162>
     566:	89 8f       	std	Y+25, r24	; 0x19
     568:	9a 8f       	std	Y+26, r25	; 0x1a
     56a:	8f 89       	ldd	r24, Y+23	; 0x17
     56c:	98 8d       	ldd	r25, Y+24	; 0x18
     56e:	01 97       	sbiw	r24, 0x01	; 1
     570:	8f 8b       	std	Y+23, r24	; 0x17
     572:	98 8f       	std	Y+24, r25	; 0x18
     574:	8f 89       	ldd	r24, Y+23	; 0x17
     576:	98 8d       	ldd	r25, Y+24	; 0x18
     578:	89 2b       	or	r24, r25
     57a:	69 f7       	brne	.-38     	; 0x556 <__FUSE_REGION_LENGTH__+0x156>
     57c:	14 c0       	rjmp	.+40     	; 0x5a6 <__FUSE_REGION_LENGTH__+0x1a6>
     57e:	6b 89       	ldd	r22, Y+19	; 0x13
     580:	7c 89       	ldd	r23, Y+20	; 0x14
     582:	8d 89       	ldd	r24, Y+21	; 0x15
     584:	9e 89       	ldd	r25, Y+22	; 0x16
     586:	0e 94 80 04 	call	0x900	; 0x900 <__fixunssfsi>
     58a:	dc 01       	movw	r26, r24
     58c:	cb 01       	movw	r24, r22
     58e:	8f 8b       	std	Y+23, r24	; 0x17
     590:	98 8f       	std	Y+24, r25	; 0x18
     592:	8f 89       	ldd	r24, Y+23	; 0x17
     594:	98 8d       	ldd	r25, Y+24	; 0x18
     596:	8b 8f       	std	Y+27, r24	; 0x1b
     598:	9c 8f       	std	Y+28, r25	; 0x1c
     59a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     59c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     59e:	01 97       	sbiw	r24, 0x01	; 1
     5a0:	f1 f7       	brne	.-4      	; 0x59e <__FUSE_REGION_LENGTH__+0x19e>
     5a2:	8b 8f       	std	Y+27, r24	; 0x1b
     5a4:	9c 8f       	std	Y+28, r25	; 0x1c
     5a6:	87 cf       	rjmp	.-242    	; 0x4b6 <__FUSE_REGION_LENGTH__+0xb6>

000005a8 <LightLoop>:

void LightLoop(void)
{
     5a8:	cf 93       	push	r28
     5aa:	df 93       	push	r29
     5ac:	cd b7       	in	r28, 0x3d	; 61
     5ae:	de b7       	in	r29, 0x3e	; 62
	LEDSet(bitmask);
     5b0:	80 91 ae 20 	lds	r24, 0x20AE	; 0x8020ae <bitmask>
     5b4:	0e 94 95 03 	call	0x72a	; 0x72a <LEDSet>
	if(bitmask == 0b00001000){
     5b8:	80 91 ae 20 	lds	r24, 0x20AE	; 0x8020ae <bitmask>
     5bc:	88 30       	cpi	r24, 0x08	; 8
     5be:	41 f4       	brne	.+16     	; 0x5d0 <LightLoop+0x28>
		bitmask >>= 3; //first led
     5c0:	80 91 ae 20 	lds	r24, 0x20AE	; 0x8020ae <bitmask>
     5c4:	86 95       	lsr	r24
     5c6:	86 95       	lsr	r24
     5c8:	86 95       	lsr	r24
     5ca:	80 93 ae 20 	sts	0x20AE, r24	; 0x8020ae <bitmask>
	} else {
		bitmask <<= 1; //bitshift to next led
	}
}
     5ce:	05 c0       	rjmp	.+10     	; 0x5da <LightLoop+0x32>
{
	LEDSet(bitmask);
	if(bitmask == 0b00001000){
		bitmask >>= 3; //first led
	} else {
		bitmask <<= 1; //bitshift to next led
     5d0:	80 91 ae 20 	lds	r24, 0x20AE	; 0x8020ae <bitmask>
     5d4:	88 0f       	add	r24, r24
     5d6:	80 93 ae 20 	sts	0x20AE, r24	; 0x8020ae <bitmask>
	}
}
     5da:	00 00       	nop
     5dc:	df 91       	pop	r29
     5de:	cf 91       	pop	r28
     5e0:	08 95       	ret

000005e2 <SwitchPrint>:

void SwitchPrint(void)
{
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
     5e6:	cd b7       	in	r28, 0x3d	; 61
     5e8:	de b7       	in	r29, 0x3e	; 62
	printf("$SWITCH %d\r\n", SwitchGet());
     5ea:	0e 94 e7 03 	call	0x7ce	; 0x7ce <SwitchGet>
     5ee:	88 2f       	mov	r24, r24
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	29 2f       	mov	r18, r25
     5f4:	2f 93       	push	r18
     5f6:	8f 93       	push	r24
     5f8:	8a e1       	ldi	r24, 0x1A	; 26
     5fa:	90 e2       	ldi	r25, 0x20	; 32
     5fc:	89 2f       	mov	r24, r25
     5fe:	8f 93       	push	r24
     600:	8a e1       	ldi	r24, 0x1A	; 26
     602:	90 e2       	ldi	r25, 0x20	; 32
     604:	8f 93       	push	r24
     606:	0e 94 96 05 	call	0xb2c	; 0xb2c <printf>
     60a:	0f 90       	pop	r0
     60c:	0f 90       	pop	r0
     60e:	0f 90       	pop	r0
     610:	0f 90       	pop	r0
}
     612:	00 00       	nop
     614:	df 91       	pop	r29
     616:	cf 91       	pop	r28
     618:	08 95       	ret

0000061a <AccPrint>:

void AccPrint(void)
{
     61a:	ef 92       	push	r14
     61c:	ff 92       	push	r15
     61e:	0f 93       	push	r16
     620:	1f 93       	push	r17
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
     626:	cd b7       	in	r28, 0x3d	; 61
     628:	de b7       	in	r29, 0x3e	; 62
     62a:	26 97       	sbiw	r28, 0x06	; 6
     62c:	cd bf       	out	0x3d, r28	; 61
     62e:	de bf       	out	0x3e, r29	; 62
	int accXRaw = AccGetXAxisRaw();
     630:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <AccGetXAxisRaw>
     634:	89 83       	std	Y+1, r24	; 0x01
     636:	9a 83       	std	Y+2, r25	; 0x02
	int accYRaw = AccGetYAxisRaw();
     638:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <AccGetYAxisRaw>
     63c:	8b 83       	std	Y+3, r24	; 0x03
     63e:	9c 83       	std	Y+4, r25	; 0x04
	int accZRaw = AccGetZAxisRaw();
     640:	0e 94 06 01 	call	0x20c	; 0x20c <AccGetZAxisRaw>
     644:	8d 83       	std	Y+5, r24	; 0x05
     646:	9e 83       	std	Y+6, r25	; 0x06
	printf("$ACCRAW %d %d %d\r\n", accXRaw, accYRaw, accZRaw); // print uncalibrated X Y Z of ACC
     648:	8e 81       	ldd	r24, Y+6	; 0x06
     64a:	8f 93       	push	r24
     64c:	8d 81       	ldd	r24, Y+5	; 0x05
     64e:	8f 93       	push	r24
     650:	8c 81       	ldd	r24, Y+4	; 0x04
     652:	8f 93       	push	r24
     654:	8b 81       	ldd	r24, Y+3	; 0x03
     656:	8f 93       	push	r24
     658:	8a 81       	ldd	r24, Y+2	; 0x02
     65a:	8f 93       	push	r24
     65c:	89 81       	ldd	r24, Y+1	; 0x01
     65e:	8f 93       	push	r24
     660:	87 e2       	ldi	r24, 0x27	; 39
     662:	90 e2       	ldi	r25, 0x20	; 32
     664:	89 2f       	mov	r24, r25
     666:	8f 93       	push	r24
     668:	87 e2       	ldi	r24, 0x27	; 39
     66a:	90 e2       	ldi	r25, 0x20	; 32
     66c:	8f 93       	push	r24
     66e:	0e 94 96 05 	call	0xb2c	; 0xb2c <printf>
     672:	8d b7       	in	r24, 0x3d	; 61
     674:	9e b7       	in	r25, 0x3e	; 62
     676:	08 96       	adiw	r24, 0x08	; 8
     678:	cd bf       	out	0x3d, r28	; 61
     67a:	de bf       	out	0x3e, r29	; 62
	printf("$ACC %d %d %d\r\n", AccGetXAxis(accXRaw), AccGetYAxis(accYRaw), AccGetZAxis(accZRaw));
     67c:	8d 81       	ldd	r24, Y+5	; 0x05
     67e:	9e 81       	ldd	r25, Y+6	; 0x06
     680:	0e 94 2f 01 	call	0x25e	; 0x25e <AccGetZAxis>
     684:	7c 01       	movw	r14, r24
     686:	8b 81       	ldd	r24, Y+3	; 0x03
     688:	9c 81       	ldd	r25, Y+4	; 0x04
     68a:	0e 94 21 01 	call	0x242	; 0x242 <AccGetYAxis>
     68e:	8c 01       	movw	r16, r24
     690:	89 81       	ldd	r24, Y+1	; 0x01
     692:	9a 81       	ldd	r25, Y+2	; 0x02
     694:	0e 94 13 01 	call	0x226	; 0x226 <AccGetXAxis>
     698:	2f 2d       	mov	r18, r15
     69a:	2f 93       	push	r18
     69c:	2e 2d       	mov	r18, r14
     69e:	2f 93       	push	r18
     6a0:	21 2f       	mov	r18, r17
     6a2:	2f 93       	push	r18
     6a4:	20 2f       	mov	r18, r16
     6a6:	2f 93       	push	r18
     6a8:	29 2f       	mov	r18, r25
     6aa:	2f 93       	push	r18
     6ac:	8f 93       	push	r24
     6ae:	8a e3       	ldi	r24, 0x3A	; 58
     6b0:	90 e2       	ldi	r25, 0x20	; 32
     6b2:	89 2f       	mov	r24, r25
     6b4:	8f 93       	push	r24
     6b6:	8a e3       	ldi	r24, 0x3A	; 58
     6b8:	90 e2       	ldi	r25, 0x20	; 32
     6ba:	8f 93       	push	r24
     6bc:	0e 94 96 05 	call	0xb2c	; 0xb2c <printf>
     6c0:	8d b7       	in	r24, 0x3d	; 61
     6c2:	9e b7       	in	r25, 0x3e	; 62
     6c4:	08 96       	adiw	r24, 0x08	; 8
     6c6:	cd bf       	out	0x3d, r28	; 61
     6c8:	de bf       	out	0x3e, r29	; 62
     6ca:	00 00       	nop
     6cc:	26 96       	adiw	r28, 0x06	; 6
     6ce:	cd bf       	out	0x3d, r28	; 61
     6d0:	de bf       	out	0x3e, r29	; 62
     6d2:	df 91       	pop	r29
     6d4:	cf 91       	pop	r28
     6d6:	1f 91       	pop	r17
     6d8:	0f 91       	pop	r16
     6da:	ff 90       	pop	r15
     6dc:	ef 90       	pop	r14
     6de:	08 95       	ret

000006e0 <LEDInit>:
#include "LED.h"
#include <avr/io.h>

void LEDInit(void)
{
     6e0:	cf 93       	push	r28
     6e2:	df 93       	push	r29
     6e4:	cd b7       	in	r28, 0x3d	; 61
     6e6:	de b7       	in	r29, 0x3e	; 62
	PORTE.DIRSET |= 0b00001111; //dir = 1 --> output
     6e8:	80 e8       	ldi	r24, 0x80	; 128
     6ea:	96 e0       	ldi	r25, 0x06	; 6
     6ec:	20 e8       	ldi	r18, 0x80	; 128
     6ee:	36 e0       	ldi	r19, 0x06	; 6
     6f0:	f9 01       	movw	r30, r18
     6f2:	21 81       	ldd	r18, Z+1	; 0x01
     6f4:	2f 60       	ori	r18, 0x0F	; 15
     6f6:	fc 01       	movw	r30, r24
     6f8:	21 83       	std	Z+1, r18	; 0x01
	PORTE.PIN0CTRL=PORT_OPC_PULLUP_gc; //enkel belangrijk on input
     6fa:	80 e8       	ldi	r24, 0x80	; 128
     6fc:	96 e0       	ldi	r25, 0x06	; 6
     6fe:	28 e1       	ldi	r18, 0x18	; 24
     700:	fc 01       	movw	r30, r24
     702:	20 8b       	std	Z+16, r18	; 0x10
	PORTE.PIN1CTRL=PORT_OPC_PULLUP_gc;
     704:	80 e8       	ldi	r24, 0x80	; 128
     706:	96 e0       	ldi	r25, 0x06	; 6
     708:	28 e1       	ldi	r18, 0x18	; 24
     70a:	fc 01       	movw	r30, r24
     70c:	21 8b       	std	Z+17, r18	; 0x11
	PORTE.PIN2CTRL=PORT_OPC_PULLUP_gc;
     70e:	80 e8       	ldi	r24, 0x80	; 128
     710:	96 e0       	ldi	r25, 0x06	; 6
     712:	28 e1       	ldi	r18, 0x18	; 24
     714:	fc 01       	movw	r30, r24
     716:	22 8b       	std	Z+18, r18	; 0x12
	PORTE.PIN3CTRL=PORT_OPC_PULLUP_gc;
     718:	80 e8       	ldi	r24, 0x80	; 128
     71a:	96 e0       	ldi	r25, 0x06	; 6
     71c:	28 e1       	ldi	r18, 0x18	; 24
     71e:	fc 01       	movw	r30, r24
     720:	23 8b       	std	Z+19, r18	; 0x13
}
     722:	00 00       	nop
     724:	df 91       	pop	r29
     726:	cf 91       	pop	r28
     728:	08 95       	ret

0000072a <LEDSet>:

void LEDSet(char bitmask)
{
     72a:	cf 93       	push	r28
     72c:	df 93       	push	r29
     72e:	1f 92       	push	r1
     730:	cd b7       	in	r28, 0x3d	; 61
     732:	de b7       	in	r29, 0x3e	; 62
     734:	89 83       	std	Y+1, r24	; 0x01
	PORTE.OUT &= 0b11110000; //4 ledbits op 0, rest blijft ongewijzigd
     736:	80 e8       	ldi	r24, 0x80	; 128
     738:	96 e0       	ldi	r25, 0x06	; 6
     73a:	20 e8       	ldi	r18, 0x80	; 128
     73c:	36 e0       	ldi	r19, 0x06	; 6
     73e:	f9 01       	movw	r30, r18
     740:	24 81       	ldd	r18, Z+4	; 0x04
     742:	20 7f       	andi	r18, 0xF0	; 240
     744:	fc 01       	movw	r30, r24
     746:	24 83       	std	Z+4, r18	; 0x04
	PORTE.OUT |= ~bitmask; //juiste ledbit wordt op 1 gezet
     748:	80 e8       	ldi	r24, 0x80	; 128
     74a:	96 e0       	ldi	r25, 0x06	; 6
     74c:	20 e8       	ldi	r18, 0x80	; 128
     74e:	36 e0       	ldi	r19, 0x06	; 6
     750:	f9 01       	movw	r30, r18
     752:	24 81       	ldd	r18, Z+4	; 0x04
     754:	32 2f       	mov	r19, r18
     756:	29 81       	ldd	r18, Y+1	; 0x01
     758:	20 95       	com	r18
     75a:	23 2b       	or	r18, r19
     75c:	fc 01       	movw	r30, r24
     75e:	24 83       	std	Z+4, r18	; 0x04
     760:	00 00       	nop
     762:	0f 90       	pop	r0
     764:	df 91       	pop	r29
     766:	cf 91       	pop	r28
     768:	08 95       	ret

0000076a <SpeakerInit>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "speaker.h"

void SpeakerInit(void)
{
     76a:	cf 93       	push	r28
     76c:	df 93       	push	r29
     76e:	cd b7       	in	r28, 0x3d	; 61
     770:	de b7       	in	r29, 0x3e	; 62
		//TCC1.CTRLB=
		//TCC1.CTRLC=
		//TCC1.CTRLD=
		//TCC1.CTRLE=
		
}
     772:	00 00       	nop
     774:	df 91       	pop	r29
     776:	cf 91       	pop	r28
     778:	08 95       	ret

0000077a <SwitchInit>:
#include "switch.h"
#include <avr/io.h>

void SwitchInit(void)
{
     77a:	cf 93       	push	r28
     77c:	df 93       	push	r29
     77e:	cd b7       	in	r28, 0x3d	; 61
     780:	de b7       	in	r29, 0x3e	; 62
	
	//This register sets the data direction for the individual pins of the port. If DIRn is written to one,
	//pin n is configured as an output pin. If DIRn is written to zero, pin n is configured as an input pin
	//PORTD.DIR &= 0b00001110; 
	PORTD.DIRSET |= 0b00001110; 
     782:	80 e6       	ldi	r24, 0x60	; 96
     784:	96 e0       	ldi	r25, 0x06	; 6
     786:	20 e6       	ldi	r18, 0x60	; 96
     788:	36 e0       	ldi	r19, 0x06	; 6
     78a:	f9 01       	movw	r30, r18
     78c:	21 81       	ldd	r18, Z+1	; 0x01
     78e:	2e 60       	ori	r18, 0x0E	; 14
     790:	fc 01       	movw	r30, r24
     792:	21 83       	std	Z+1, r18	; 0x01

	//11.13.15 p124
	PORTD.PIN0CTRL= 0b01011001;		//Center
     794:	80 e6       	ldi	r24, 0x60	; 96
     796:	96 e0       	ldi	r25, 0x06	; 6
     798:	29 e5       	ldi	r18, 0x59	; 89
     79a:	fc 01       	movw	r30, r24
     79c:	20 8b       	std	Z+16, r18	; 0x10
	PORTD.PIN4CTRL= 0b01011001;		//Right
     79e:	80 e6       	ldi	r24, 0x60	; 96
     7a0:	96 e0       	ldi	r25, 0x06	; 6
     7a2:	29 e5       	ldi	r18, 0x59	; 89
     7a4:	fc 01       	movw	r30, r24
     7a6:	24 8b       	std	Z+20, r18	; 0x14
	PORTD.PIN5CTRL= 0b01011001;		//Down
     7a8:	80 e6       	ldi	r24, 0x60	; 96
     7aa:	96 e0       	ldi	r25, 0x06	; 6
     7ac:	29 e5       	ldi	r18, 0x59	; 89
     7ae:	fc 01       	movw	r30, r24
     7b0:	25 8b       	std	Z+21, r18	; 0x15
	PORTD.PIN6CTRL= 0b01011001;		//Left
     7b2:	80 e6       	ldi	r24, 0x60	; 96
     7b4:	96 e0       	ldi	r25, 0x06	; 6
     7b6:	29 e5       	ldi	r18, 0x59	; 89
     7b8:	fc 01       	movw	r30, r24
     7ba:	26 8b       	std	Z+22, r18	; 0x16
	PORTD.PIN7CTRL= 0b01011001;		//Up
     7bc:	80 e6       	ldi	r24, 0x60	; 96
     7be:	96 e0       	ldi	r25, 0x06	; 6
     7c0:	29 e5       	ldi	r18, 0x59	; 89
     7c2:	fc 01       	movw	r30, r24
     7c4:	27 8b       	std	Z+23, r18	; 0x17
}
     7c6:	00 00       	nop
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	08 95       	ret

000007ce <SwitchGet>:


char SwitchGet(void)
{
     7ce:	cf 93       	push	r28
     7d0:	df 93       	push	r29
     7d2:	1f 92       	push	r1
     7d4:	cd b7       	in	r28, 0x3d	; 61
     7d6:	de b7       	in	r29, 0x3e	; 62
	char input = PORTD.IN; 
     7d8:	80 e6       	ldi	r24, 0x60	; 96
     7da:	96 e0       	ldi	r25, 0x06	; 6
     7dc:	fc 01       	movw	r30, r24
     7de:	80 85       	ldd	r24, Z+8	; 0x08
     7e0:	89 83       	std	Y+1, r24	; 0x01
	//PORTDIN looks like 11110001 'if everything would be pressed', the wanted format for ex.: xxx11111
	//To achieve this bitshift first 4 bits , 3 to the right and the bit on the right stays at the same place
	input = ((input & 0b11110000) >> 3) | (input & 0b00000001);
     7e2:	89 81       	ldd	r24, Y+1	; 0x01
     7e4:	88 2f       	mov	r24, r24
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	80 7f       	andi	r24, 0xF0	; 240
     7ea:	99 27       	eor	r25, r25
     7ec:	95 95       	asr	r25
     7ee:	87 95       	ror	r24
     7f0:	95 95       	asr	r25
     7f2:	87 95       	ror	r24
     7f4:	95 95       	asr	r25
     7f6:	87 95       	ror	r24
     7f8:	98 2f       	mov	r25, r24
     7fa:	89 81       	ldd	r24, Y+1	; 0x01
     7fc:	81 70       	andi	r24, 0x01	; 1
     7fe:	89 2b       	or	r24, r25
     800:	89 83       	std	Y+1, r24	; 0x01
	return input;
     802:	89 81       	ldd	r24, Y+1	; 0x01
}
     804:	0f 90       	pop	r0
     806:	df 91       	pop	r29
     808:	cf 91       	pop	r28
     80a:	08 95       	ret

0000080c <USARTInit>:
static int stdio_putchar(char c, FILE * stream);
static int stdio_getchar(FILE *stream);
static FILE UsartStdio = FDEV_SETUP_STREAM(stdio_putchar, stdio_getchar,_FDEV_SETUP_WRITE);

void USARTInit(void)
{
     80c:	cf 93       	push	r28
     80e:	df 93       	push	r29
     810:	cd b7       	in	r28, 0x3d	; 61
     812:	de b7       	in	r29, 0x3e	; 62
	USART_PORT.DIRSET=0b00001000;	//transmitlijn als output, receive lijn als input
     814:	80 e6       	ldi	r24, 0x60	; 96
     816:	96 e0       	ldi	r25, 0x06	; 6
     818:	28 e0       	ldi	r18, 0x08	; 8
     81a:	fc 01       	movw	r30, r24
     81c:	21 83       	std	Z+1, r18	; 0x01
	USART_PORT.DIRCLR=0b00000100;
     81e:	80 e6       	ldi	r24, 0x60	; 96
     820:	96 e0       	ldi	r25, 0x06	; 6
     822:	24 e0       	ldi	r18, 0x04	; 4
     824:	fc 01       	movw	r30, r24
     826:	22 83       	std	Z+2, r18	; 0x02
	
	USART.CTRLA=0b00000000; //polled mode = interrupts uitgeschakeld
     828:	80 ea       	ldi	r24, 0xA0	; 160
     82a:	99 e0       	ldi	r25, 0x09	; 9
     82c:	fc 01       	movw	r30, r24
     82e:	13 82       	std	Z+3, r1	; 0x03
	USART.CTRLB=0b00011000; //transmitter en reveicer aan, double speed comm uit
     830:	80 ea       	ldi	r24, 0xA0	; 160
     832:	99 e0       	ldi	r25, 0x09	; 9
     834:	28 e1       	ldi	r18, 0x18	; 24
     836:	fc 01       	movw	r30, r24
     838:	24 83       	std	Z+4, r18	; 0x04
	USART.CTRLC=0b00000011; // USART in async mode
     83a:	80 ea       	ldi	r24, 0xA0	; 160
     83c:	99 e0       	ldi	r25, 0x09	; 9
     83e:	23 e0       	ldi	r18, 0x03	; 3
     840:	fc 01       	movw	r30, r24
     842:	25 83       	std	Z+5, r18	; 0x05
	
	//USART.BAUDCTRLA=0xE5; //BSEL=3301, BSCALE=-5 9600 baud
	//USART.BAUDCTRLB=0xBC; 

	//BSEL=983=0011 1101 0111, BSCALE=-7=1001 --> 115200 baud [afwijking: 115211 baud]
	USART.BAUDCTRLA=0xD7; //1101 0111
     844:	80 ea       	ldi	r24, 0xA0	; 160
     846:	99 e0       	ldi	r25, 0x09	; 9
     848:	27 ed       	ldi	r18, 0xD7	; 215
     84a:	fc 01       	movw	r30, r24
     84c:	26 83       	std	Z+6, r18	; 0x06
	USART.BAUDCTRLB=0x93; //1001 0011
     84e:	80 ea       	ldi	r24, 0xA0	; 160
     850:	99 e0       	ldi	r25, 0x09	; 9
     852:	23 e9       	ldi	r18, 0x93	; 147
     854:	fc 01       	movw	r30, r24
     856:	27 83       	std	Z+7, r18	; 0x07
	
	stdout=&UsartStdio; // koppeling tussen drivercode en stdio lib
     858:	80 e0       	ldi	r24, 0x00	; 0
     85a:	90 e2       	ldi	r25, 0x20	; 32
     85c:	80 93 b3 20 	sts	0x20B3, r24	; 0x8020b3 <__iob+0x2>
     860:	90 93 b4 20 	sts	0x20B4, r25	; 0x8020b4 <__iob+0x3>
	stdin=&UsartStdio;
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	90 e2       	ldi	r25, 0x20	; 32
     868:	80 93 b1 20 	sts	0x20B1, r24	; 0x8020b1 <__iob>
     86c:	90 93 b2 20 	sts	0x20B2, r25	; 0x8020b2 <__iob+0x1>
}
     870:	00 00       	nop
     872:	df 91       	pop	r29
     874:	cf 91       	pop	r28
     876:	08 95       	ret

00000878 <stdio_putchar>:

//vormt onderste laag van stdio lib
static int stdio_putchar(char c, FILE * stream) //1 byte over USART
{
     878:	cf 93       	push	r28
     87a:	df 93       	push	r29
     87c:	00 d0       	rcall	.+0      	; 0x87e <stdio_putchar+0x6>
     87e:	1f 92       	push	r1
     880:	cd b7       	in	r28, 0x3d	; 61
     882:	de b7       	in	r29, 0x3e	; 62
     884:	89 83       	std	Y+1, r24	; 0x01
     886:	6a 83       	std	Y+2, r22	; 0x02
     888:	7b 83       	std	Y+3, r23	; 0x03
	USART.DATA = c;
     88a:	80 ea       	ldi	r24, 0xA0	; 160
     88c:	99 e0       	ldi	r25, 0x09	; 9
     88e:	29 81       	ldd	r18, Y+1	; 0x01
     890:	fc 01       	movw	r30, r24
     892:	20 83       	st	Z, r18
	while (!(USART.STATUS & 0b01000000)); //wachten op TXCIF (Transmit Complete interrupt flag) = byte verzonden
     894:	00 00       	nop
     896:	80 ea       	ldi	r24, 0xA0	; 160
     898:	99 e0       	ldi	r25, 0x09	; 9
     89a:	fc 01       	movw	r30, r24
     89c:	81 81       	ldd	r24, Z+1	; 0x01
     89e:	88 2f       	mov	r24, r24
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	80 74       	andi	r24, 0x40	; 64
     8a4:	99 27       	eor	r25, r25
     8a6:	89 2b       	or	r24, r25
     8a8:	b1 f3       	breq	.-20     	; 0x896 <stdio_putchar+0x1e>
	USART.STATUS=0b01000000; //vlag op 0 voor volgende datatransfer
     8aa:	80 ea       	ldi	r24, 0xA0	; 160
     8ac:	99 e0       	ldi	r25, 0x09	; 9
     8ae:	20 e4       	ldi	r18, 0x40	; 64
     8b0:	fc 01       	movw	r30, r24
     8b2:	21 83       	std	Z+1, r18	; 0x01
	return 0;
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	90 e0       	ldi	r25, 0x00	; 0
}
     8b8:	23 96       	adiw	r28, 0x03	; 3
     8ba:	cd bf       	out	0x3d, r28	; 61
     8bc:	de bf       	out	0x3e, r29	; 62
     8be:	df 91       	pop	r29
     8c0:	cf 91       	pop	r28
     8c2:	08 95       	ret

000008c4 <stdio_getchar>:
	
static int stdio_getchar(FILE *stream)
{
     8c4:	cf 93       	push	r28
     8c6:	df 93       	push	r29
     8c8:	00 d0       	rcall	.+0      	; 0x8ca <stdio_getchar+0x6>
     8ca:	cd b7       	in	r28, 0x3d	; 61
     8cc:	de b7       	in	r29, 0x3e	; 62
     8ce:	89 83       	std	Y+1, r24	; 0x01
     8d0:	9a 83       	std	Y+2, r25	; 0x02
	while (!(USART.STATUS & 0b10000000)); //wacht tot er een byte in de receive buffer zit
     8d2:	00 00       	nop
     8d4:	80 ea       	ldi	r24, 0xA0	; 160
     8d6:	99 e0       	ldi	r25, 0x09	; 9
     8d8:	fc 01       	movw	r30, r24
     8da:	81 81       	ldd	r24, Z+1	; 0x01
     8dc:	88 23       	and	r24, r24
     8de:	d4 f7       	brge	.-12     	; 0x8d4 <stdio_getchar+0x10>
	return USART.DATA;
     8e0:	80 ea       	ldi	r24, 0xA0	; 160
     8e2:	99 e0       	ldi	r25, 0x09	; 9
     8e4:	fc 01       	movw	r30, r24
     8e6:	80 81       	ld	r24, Z
     8e8:	88 2f       	mov	r24, r24
     8ea:	90 e0       	ldi	r25, 0x00	; 0
}
     8ec:	0f 90       	pop	r0
     8ee:	0f 90       	pop	r0
     8f0:	df 91       	pop	r29
     8f2:	cf 91       	pop	r28
     8f4:	08 95       	ret

000008f6 <__cmpsf2>:
     8f6:	0e 94 af 04 	call	0x95e	; 0x95e <__fp_cmp>
     8fa:	08 f4       	brcc	.+2      	; 0x8fe <__cmpsf2+0x8>
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	08 95       	ret

00000900 <__fixunssfsi>:
     900:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__fp_splitA>
     904:	88 f0       	brcs	.+34     	; 0x928 <__fixunssfsi+0x28>
     906:	9f 57       	subi	r25, 0x7F	; 127
     908:	98 f0       	brcs	.+38     	; 0x930 <__fixunssfsi+0x30>
     90a:	b9 2f       	mov	r27, r25
     90c:	99 27       	eor	r25, r25
     90e:	b7 51       	subi	r27, 0x17	; 23
     910:	b0 f0       	brcs	.+44     	; 0x93e <__fixunssfsi+0x3e>
     912:	e1 f0       	breq	.+56     	; 0x94c <__fixunssfsi+0x4c>
     914:	66 0f       	add	r22, r22
     916:	77 1f       	adc	r23, r23
     918:	88 1f       	adc	r24, r24
     91a:	99 1f       	adc	r25, r25
     91c:	1a f0       	brmi	.+6      	; 0x924 <__fixunssfsi+0x24>
     91e:	ba 95       	dec	r27
     920:	c9 f7       	brne	.-14     	; 0x914 <__fixunssfsi+0x14>
     922:	14 c0       	rjmp	.+40     	; 0x94c <__fixunssfsi+0x4c>
     924:	b1 30       	cpi	r27, 0x01	; 1
     926:	91 f0       	breq	.+36     	; 0x94c <__fixunssfsi+0x4c>
     928:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__fp_zero>
     92c:	b1 e0       	ldi	r27, 0x01	; 1
     92e:	08 95       	ret
     930:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <__fp_zero>
     934:	67 2f       	mov	r22, r23
     936:	78 2f       	mov	r23, r24
     938:	88 27       	eor	r24, r24
     93a:	b8 5f       	subi	r27, 0xF8	; 248
     93c:	39 f0       	breq	.+14     	; 0x94c <__fixunssfsi+0x4c>
     93e:	b9 3f       	cpi	r27, 0xF9	; 249
     940:	cc f3       	brlt	.-14     	; 0x934 <__fixunssfsi+0x34>
     942:	86 95       	lsr	r24
     944:	77 95       	ror	r23
     946:	67 95       	ror	r22
     948:	b3 95       	inc	r27
     94a:	d9 f7       	brne	.-10     	; 0x942 <__fixunssfsi+0x42>
     94c:	3e f4       	brtc	.+14     	; 0x95c <__fixunssfsi+0x5c>
     94e:	90 95       	com	r25
     950:	80 95       	com	r24
     952:	70 95       	com	r23
     954:	61 95       	neg	r22
     956:	7f 4f       	sbci	r23, 0xFF	; 255
     958:	8f 4f       	sbci	r24, 0xFF	; 255
     95a:	9f 4f       	sbci	r25, 0xFF	; 255
     95c:	08 95       	ret

0000095e <__fp_cmp>:
     95e:	99 0f       	add	r25, r25
     960:	00 08       	sbc	r0, r0
     962:	55 0f       	add	r21, r21
     964:	aa 0b       	sbc	r26, r26
     966:	e0 e8       	ldi	r30, 0x80	; 128
     968:	fe ef       	ldi	r31, 0xFE	; 254
     96a:	16 16       	cp	r1, r22
     96c:	17 06       	cpc	r1, r23
     96e:	e8 07       	cpc	r30, r24
     970:	f9 07       	cpc	r31, r25
     972:	c0 f0       	brcs	.+48     	; 0x9a4 <__fp_cmp+0x46>
     974:	12 16       	cp	r1, r18
     976:	13 06       	cpc	r1, r19
     978:	e4 07       	cpc	r30, r20
     97a:	f5 07       	cpc	r31, r21
     97c:	98 f0       	brcs	.+38     	; 0x9a4 <__fp_cmp+0x46>
     97e:	62 1b       	sub	r22, r18
     980:	73 0b       	sbc	r23, r19
     982:	84 0b       	sbc	r24, r20
     984:	95 0b       	sbc	r25, r21
     986:	39 f4       	brne	.+14     	; 0x996 <__fp_cmp+0x38>
     988:	0a 26       	eor	r0, r26
     98a:	61 f0       	breq	.+24     	; 0x9a4 <__fp_cmp+0x46>
     98c:	23 2b       	or	r18, r19
     98e:	24 2b       	or	r18, r20
     990:	25 2b       	or	r18, r21
     992:	21 f4       	brne	.+8      	; 0x99c <__fp_cmp+0x3e>
     994:	08 95       	ret
     996:	0a 26       	eor	r0, r26
     998:	09 f4       	brne	.+2      	; 0x99c <__fp_cmp+0x3e>
     99a:	a1 40       	sbci	r26, 0x01	; 1
     99c:	a6 95       	lsr	r26
     99e:	8f ef       	ldi	r24, 0xFF	; 255
     9a0:	81 1d       	adc	r24, r1
     9a2:	81 1d       	adc	r24, r1
     9a4:	08 95       	ret

000009a6 <__fp_split3>:
     9a6:	57 fd       	sbrc	r21, 7
     9a8:	90 58       	subi	r25, 0x80	; 128
     9aa:	44 0f       	add	r20, r20
     9ac:	55 1f       	adc	r21, r21
     9ae:	59 f0       	breq	.+22     	; 0x9c6 <__fp_splitA+0x10>
     9b0:	5f 3f       	cpi	r21, 0xFF	; 255
     9b2:	71 f0       	breq	.+28     	; 0x9d0 <__fp_splitA+0x1a>
     9b4:	47 95       	ror	r20

000009b6 <__fp_splitA>:
     9b6:	88 0f       	add	r24, r24
     9b8:	97 fb       	bst	r25, 7
     9ba:	99 1f       	adc	r25, r25
     9bc:	61 f0       	breq	.+24     	; 0x9d6 <__fp_splitA+0x20>
     9be:	9f 3f       	cpi	r25, 0xFF	; 255
     9c0:	79 f0       	breq	.+30     	; 0x9e0 <__fp_splitA+0x2a>
     9c2:	87 95       	ror	r24
     9c4:	08 95       	ret
     9c6:	12 16       	cp	r1, r18
     9c8:	13 06       	cpc	r1, r19
     9ca:	14 06       	cpc	r1, r20
     9cc:	55 1f       	adc	r21, r21
     9ce:	f2 cf       	rjmp	.-28     	; 0x9b4 <__fp_split3+0xe>
     9d0:	46 95       	lsr	r20
     9d2:	f1 df       	rcall	.-30     	; 0x9b6 <__fp_splitA>
     9d4:	08 c0       	rjmp	.+16     	; 0x9e6 <__fp_splitA+0x30>
     9d6:	16 16       	cp	r1, r22
     9d8:	17 06       	cpc	r1, r23
     9da:	18 06       	cpc	r1, r24
     9dc:	99 1f       	adc	r25, r25
     9de:	f1 cf       	rjmp	.-30     	; 0x9c2 <__fp_splitA+0xc>
     9e0:	86 95       	lsr	r24
     9e2:	71 05       	cpc	r23, r1
     9e4:	61 05       	cpc	r22, r1
     9e6:	08 94       	sec
     9e8:	08 95       	ret

000009ea <__fp_zero>:
     9ea:	e8 94       	clt

000009ec <__fp_szero>:
     9ec:	bb 27       	eor	r27, r27
     9ee:	66 27       	eor	r22, r22
     9f0:	77 27       	eor	r23, r23
     9f2:	cb 01       	movw	r24, r22
     9f4:	97 f9       	bld	r25, 7
     9f6:	08 95       	ret

000009f8 <__gesf2>:
     9f8:	0e 94 af 04 	call	0x95e	; 0x95e <__fp_cmp>
     9fc:	08 f4       	brcc	.+2      	; 0xa00 <__gesf2+0x8>
     9fe:	8f ef       	ldi	r24, 0xFF	; 255
     a00:	08 95       	ret

00000a02 <__mulsf3>:
     a02:	0e 94 14 05 	call	0xa28	; 0xa28 <__mulsf3x>
     a06:	0c 94 85 05 	jmp	0xb0a	; 0xb0a <__fp_round>
     a0a:	0e 94 77 05 	call	0xaee	; 0xaee <__fp_pscA>
     a0e:	38 f0       	brcs	.+14     	; 0xa1e <__mulsf3+0x1c>
     a10:	0e 94 7e 05 	call	0xafc	; 0xafc <__fp_pscB>
     a14:	20 f0       	brcs	.+8      	; 0xa1e <__mulsf3+0x1c>
     a16:	95 23       	and	r25, r21
     a18:	11 f0       	breq	.+4      	; 0xa1e <__mulsf3+0x1c>
     a1a:	0c 94 6e 05 	jmp	0xadc	; 0xadc <__fp_inf>
     a1e:	0c 94 74 05 	jmp	0xae8	; 0xae8 <__fp_nan>
     a22:	11 24       	eor	r1, r1
     a24:	0c 94 f6 04 	jmp	0x9ec	; 0x9ec <__fp_szero>

00000a28 <__mulsf3x>:
     a28:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <__fp_split3>
     a2c:	70 f3       	brcs	.-36     	; 0xa0a <__mulsf3+0x8>

00000a2e <__mulsf3_pse>:
     a2e:	95 9f       	mul	r25, r21
     a30:	c1 f3       	breq	.-16     	; 0xa22 <__mulsf3+0x20>
     a32:	95 0f       	add	r25, r21
     a34:	50 e0       	ldi	r21, 0x00	; 0
     a36:	55 1f       	adc	r21, r21
     a38:	62 9f       	mul	r22, r18
     a3a:	f0 01       	movw	r30, r0
     a3c:	72 9f       	mul	r23, r18
     a3e:	bb 27       	eor	r27, r27
     a40:	f0 0d       	add	r31, r0
     a42:	b1 1d       	adc	r27, r1
     a44:	63 9f       	mul	r22, r19
     a46:	aa 27       	eor	r26, r26
     a48:	f0 0d       	add	r31, r0
     a4a:	b1 1d       	adc	r27, r1
     a4c:	aa 1f       	adc	r26, r26
     a4e:	64 9f       	mul	r22, r20
     a50:	66 27       	eor	r22, r22
     a52:	b0 0d       	add	r27, r0
     a54:	a1 1d       	adc	r26, r1
     a56:	66 1f       	adc	r22, r22
     a58:	82 9f       	mul	r24, r18
     a5a:	22 27       	eor	r18, r18
     a5c:	b0 0d       	add	r27, r0
     a5e:	a1 1d       	adc	r26, r1
     a60:	62 1f       	adc	r22, r18
     a62:	73 9f       	mul	r23, r19
     a64:	b0 0d       	add	r27, r0
     a66:	a1 1d       	adc	r26, r1
     a68:	62 1f       	adc	r22, r18
     a6a:	83 9f       	mul	r24, r19
     a6c:	a0 0d       	add	r26, r0
     a6e:	61 1d       	adc	r22, r1
     a70:	22 1f       	adc	r18, r18
     a72:	74 9f       	mul	r23, r20
     a74:	33 27       	eor	r19, r19
     a76:	a0 0d       	add	r26, r0
     a78:	61 1d       	adc	r22, r1
     a7a:	23 1f       	adc	r18, r19
     a7c:	84 9f       	mul	r24, r20
     a7e:	60 0d       	add	r22, r0
     a80:	21 1d       	adc	r18, r1
     a82:	82 2f       	mov	r24, r18
     a84:	76 2f       	mov	r23, r22
     a86:	6a 2f       	mov	r22, r26
     a88:	11 24       	eor	r1, r1
     a8a:	9f 57       	subi	r25, 0x7F	; 127
     a8c:	50 40       	sbci	r21, 0x00	; 0
     a8e:	9a f0       	brmi	.+38     	; 0xab6 <__mulsf3_pse+0x88>
     a90:	f1 f0       	breq	.+60     	; 0xace <__mulsf3_pse+0xa0>
     a92:	88 23       	and	r24, r24
     a94:	4a f0       	brmi	.+18     	; 0xaa8 <__mulsf3_pse+0x7a>
     a96:	ee 0f       	add	r30, r30
     a98:	ff 1f       	adc	r31, r31
     a9a:	bb 1f       	adc	r27, r27
     a9c:	66 1f       	adc	r22, r22
     a9e:	77 1f       	adc	r23, r23
     aa0:	88 1f       	adc	r24, r24
     aa2:	91 50       	subi	r25, 0x01	; 1
     aa4:	50 40       	sbci	r21, 0x00	; 0
     aa6:	a9 f7       	brne	.-22     	; 0xa92 <__mulsf3_pse+0x64>
     aa8:	9e 3f       	cpi	r25, 0xFE	; 254
     aaa:	51 05       	cpc	r21, r1
     aac:	80 f0       	brcs	.+32     	; 0xace <__mulsf3_pse+0xa0>
     aae:	0c 94 6e 05 	jmp	0xadc	; 0xadc <__fp_inf>
     ab2:	0c 94 f6 04 	jmp	0x9ec	; 0x9ec <__fp_szero>
     ab6:	5f 3f       	cpi	r21, 0xFF	; 255
     ab8:	e4 f3       	brlt	.-8      	; 0xab2 <__mulsf3_pse+0x84>
     aba:	98 3e       	cpi	r25, 0xE8	; 232
     abc:	d4 f3       	brlt	.-12     	; 0xab2 <__mulsf3_pse+0x84>
     abe:	86 95       	lsr	r24
     ac0:	77 95       	ror	r23
     ac2:	67 95       	ror	r22
     ac4:	b7 95       	ror	r27
     ac6:	f7 95       	ror	r31
     ac8:	e7 95       	ror	r30
     aca:	9f 5f       	subi	r25, 0xFF	; 255
     acc:	c1 f7       	brne	.-16     	; 0xabe <__mulsf3_pse+0x90>
     ace:	fe 2b       	or	r31, r30
     ad0:	88 0f       	add	r24, r24
     ad2:	91 1d       	adc	r25, r1
     ad4:	96 95       	lsr	r25
     ad6:	87 95       	ror	r24
     ad8:	97 f9       	bld	r25, 7
     ada:	08 95       	ret

00000adc <__fp_inf>:
     adc:	97 f9       	bld	r25, 7
     ade:	9f 67       	ori	r25, 0x7F	; 127
     ae0:	80 e8       	ldi	r24, 0x80	; 128
     ae2:	70 e0       	ldi	r23, 0x00	; 0
     ae4:	60 e0       	ldi	r22, 0x00	; 0
     ae6:	08 95       	ret

00000ae8 <__fp_nan>:
     ae8:	9f ef       	ldi	r25, 0xFF	; 255
     aea:	80 ec       	ldi	r24, 0xC0	; 192
     aec:	08 95       	ret

00000aee <__fp_pscA>:
     aee:	00 24       	eor	r0, r0
     af0:	0a 94       	dec	r0
     af2:	16 16       	cp	r1, r22
     af4:	17 06       	cpc	r1, r23
     af6:	18 06       	cpc	r1, r24
     af8:	09 06       	cpc	r0, r25
     afa:	08 95       	ret

00000afc <__fp_pscB>:
     afc:	00 24       	eor	r0, r0
     afe:	0a 94       	dec	r0
     b00:	12 16       	cp	r1, r18
     b02:	13 06       	cpc	r1, r19
     b04:	14 06       	cpc	r1, r20
     b06:	05 06       	cpc	r0, r21
     b08:	08 95       	ret

00000b0a <__fp_round>:
     b0a:	09 2e       	mov	r0, r25
     b0c:	03 94       	inc	r0
     b0e:	00 0c       	add	r0, r0
     b10:	11 f4       	brne	.+4      	; 0xb16 <__fp_round+0xc>
     b12:	88 23       	and	r24, r24
     b14:	52 f0       	brmi	.+20     	; 0xb2a <__fp_round+0x20>
     b16:	bb 0f       	add	r27, r27
     b18:	40 f4       	brcc	.+16     	; 0xb2a <__fp_round+0x20>
     b1a:	bf 2b       	or	r27, r31
     b1c:	11 f4       	brne	.+4      	; 0xb22 <__fp_round+0x18>
     b1e:	60 ff       	sbrs	r22, 0
     b20:	04 c0       	rjmp	.+8      	; 0xb2a <__fp_round+0x20>
     b22:	6f 5f       	subi	r22, 0xFF	; 255
     b24:	7f 4f       	sbci	r23, 0xFF	; 255
     b26:	8f 4f       	sbci	r24, 0xFF	; 255
     b28:	9f 4f       	sbci	r25, 0xFF	; 255
     b2a:	08 95       	ret

00000b2c <printf>:
     b2c:	a0 e0       	ldi	r26, 0x00	; 0
     b2e:	b0 e0       	ldi	r27, 0x00	; 0
     b30:	ec e9       	ldi	r30, 0x9C	; 156
     b32:	f5 e0       	ldi	r31, 0x05	; 5
     b34:	0c 94 4d 08 	jmp	0x109a	; 0x109a <__prologue_saves__+0x20>
     b38:	ae 01       	movw	r20, r28
     b3a:	4b 5f       	subi	r20, 0xFB	; 251
     b3c:	5f 4f       	sbci	r21, 0xFF	; 255
     b3e:	fa 01       	movw	r30, r20
     b40:	61 91       	ld	r22, Z+
     b42:	71 91       	ld	r23, Z+
     b44:	af 01       	movw	r20, r30
     b46:	80 91 b3 20 	lds	r24, 0x20B3	; 0x8020b3 <__iob+0x2>
     b4a:	90 91 b4 20 	lds	r25, 0x20B4	; 0x8020b4 <__iob+0x3>
     b4e:	0e 94 ac 05 	call	0xb58	; 0xb58 <vfprintf>
     b52:	e2 e0       	ldi	r30, 0x02	; 2
     b54:	0c 94 66 08 	jmp	0x10cc	; 0x10cc <__epilogue_restores__+0x20>

00000b58 <vfprintf>:
     b58:	ab e0       	ldi	r26, 0x0B	; 11
     b5a:	b0 e0       	ldi	r27, 0x00	; 0
     b5c:	e2 eb       	ldi	r30, 0xB2	; 178
     b5e:	f5 e0       	ldi	r31, 0x05	; 5
     b60:	0c 94 3d 08 	jmp	0x107a	; 0x107a <__prologue_saves__>
     b64:	6c 01       	movw	r12, r24
     b66:	7b 01       	movw	r14, r22
     b68:	8a 01       	movw	r16, r20
     b6a:	fc 01       	movw	r30, r24
     b6c:	16 82       	std	Z+6, r1	; 0x06
     b6e:	17 82       	std	Z+7, r1	; 0x07
     b70:	83 81       	ldd	r24, Z+3	; 0x03
     b72:	81 ff       	sbrs	r24, 1
     b74:	cc c1       	rjmp	.+920    	; 0xf0e <vfprintf+0x3b6>
     b76:	ce 01       	movw	r24, r28
     b78:	01 96       	adiw	r24, 0x01	; 1
     b7a:	3c 01       	movw	r6, r24
     b7c:	f6 01       	movw	r30, r12
     b7e:	93 81       	ldd	r25, Z+3	; 0x03
     b80:	f7 01       	movw	r30, r14
     b82:	93 fd       	sbrc	r25, 3
     b84:	85 91       	lpm	r24, Z+
     b86:	93 ff       	sbrs	r25, 3
     b88:	81 91       	ld	r24, Z+
     b8a:	7f 01       	movw	r14, r30
     b8c:	88 23       	and	r24, r24
     b8e:	09 f4       	brne	.+2      	; 0xb92 <vfprintf+0x3a>
     b90:	ba c1       	rjmp	.+884    	; 0xf06 <vfprintf+0x3ae>
     b92:	85 32       	cpi	r24, 0x25	; 37
     b94:	39 f4       	brne	.+14     	; 0xba4 <vfprintf+0x4c>
     b96:	93 fd       	sbrc	r25, 3
     b98:	85 91       	lpm	r24, Z+
     b9a:	93 ff       	sbrs	r25, 3
     b9c:	81 91       	ld	r24, Z+
     b9e:	7f 01       	movw	r14, r30
     ba0:	85 32       	cpi	r24, 0x25	; 37
     ba2:	29 f4       	brne	.+10     	; 0xbae <vfprintf+0x56>
     ba4:	b6 01       	movw	r22, r12
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	0e 94 a3 07 	call	0xf46	; 0xf46 <fputc>
     bac:	e7 cf       	rjmp	.-50     	; 0xb7c <vfprintf+0x24>
     bae:	91 2c       	mov	r9, r1
     bb0:	21 2c       	mov	r2, r1
     bb2:	31 2c       	mov	r3, r1
     bb4:	ff e1       	ldi	r31, 0x1F	; 31
     bb6:	f3 15       	cp	r31, r3
     bb8:	d8 f0       	brcs	.+54     	; 0xbf0 <vfprintf+0x98>
     bba:	8b 32       	cpi	r24, 0x2B	; 43
     bbc:	79 f0       	breq	.+30     	; 0xbdc <vfprintf+0x84>
     bbe:	38 f4       	brcc	.+14     	; 0xbce <vfprintf+0x76>
     bc0:	80 32       	cpi	r24, 0x20	; 32
     bc2:	79 f0       	breq	.+30     	; 0xbe2 <vfprintf+0x8a>
     bc4:	83 32       	cpi	r24, 0x23	; 35
     bc6:	a1 f4       	brne	.+40     	; 0xbf0 <vfprintf+0x98>
     bc8:	23 2d       	mov	r18, r3
     bca:	20 61       	ori	r18, 0x10	; 16
     bcc:	1d c0       	rjmp	.+58     	; 0xc08 <vfprintf+0xb0>
     bce:	8d 32       	cpi	r24, 0x2D	; 45
     bd0:	61 f0       	breq	.+24     	; 0xbea <vfprintf+0x92>
     bd2:	80 33       	cpi	r24, 0x30	; 48
     bd4:	69 f4       	brne	.+26     	; 0xbf0 <vfprintf+0x98>
     bd6:	23 2d       	mov	r18, r3
     bd8:	21 60       	ori	r18, 0x01	; 1
     bda:	16 c0       	rjmp	.+44     	; 0xc08 <vfprintf+0xb0>
     bdc:	83 2d       	mov	r24, r3
     bde:	82 60       	ori	r24, 0x02	; 2
     be0:	38 2e       	mov	r3, r24
     be2:	e3 2d       	mov	r30, r3
     be4:	e4 60       	ori	r30, 0x04	; 4
     be6:	3e 2e       	mov	r3, r30
     be8:	2a c0       	rjmp	.+84     	; 0xc3e <vfprintf+0xe6>
     bea:	f3 2d       	mov	r31, r3
     bec:	f8 60       	ori	r31, 0x08	; 8
     bee:	1d c0       	rjmp	.+58     	; 0xc2a <vfprintf+0xd2>
     bf0:	37 fc       	sbrc	r3, 7
     bf2:	2d c0       	rjmp	.+90     	; 0xc4e <vfprintf+0xf6>
     bf4:	20 ed       	ldi	r18, 0xD0	; 208
     bf6:	28 0f       	add	r18, r24
     bf8:	2a 30       	cpi	r18, 0x0A	; 10
     bfa:	40 f0       	brcs	.+16     	; 0xc0c <vfprintf+0xb4>
     bfc:	8e 32       	cpi	r24, 0x2E	; 46
     bfe:	b9 f4       	brne	.+46     	; 0xc2e <vfprintf+0xd6>
     c00:	36 fc       	sbrc	r3, 6
     c02:	81 c1       	rjmp	.+770    	; 0xf06 <vfprintf+0x3ae>
     c04:	23 2d       	mov	r18, r3
     c06:	20 64       	ori	r18, 0x40	; 64
     c08:	32 2e       	mov	r3, r18
     c0a:	19 c0       	rjmp	.+50     	; 0xc3e <vfprintf+0xe6>
     c0c:	36 fe       	sbrs	r3, 6
     c0e:	06 c0       	rjmp	.+12     	; 0xc1c <vfprintf+0xc4>
     c10:	8a e0       	ldi	r24, 0x0A	; 10
     c12:	98 9e       	mul	r9, r24
     c14:	20 0d       	add	r18, r0
     c16:	11 24       	eor	r1, r1
     c18:	92 2e       	mov	r9, r18
     c1a:	11 c0       	rjmp	.+34     	; 0xc3e <vfprintf+0xe6>
     c1c:	ea e0       	ldi	r30, 0x0A	; 10
     c1e:	2e 9e       	mul	r2, r30
     c20:	20 0d       	add	r18, r0
     c22:	11 24       	eor	r1, r1
     c24:	22 2e       	mov	r2, r18
     c26:	f3 2d       	mov	r31, r3
     c28:	f0 62       	ori	r31, 0x20	; 32
     c2a:	3f 2e       	mov	r3, r31
     c2c:	08 c0       	rjmp	.+16     	; 0xc3e <vfprintf+0xe6>
     c2e:	8c 36       	cpi	r24, 0x6C	; 108
     c30:	21 f4       	brne	.+8      	; 0xc3a <vfprintf+0xe2>
     c32:	83 2d       	mov	r24, r3
     c34:	80 68       	ori	r24, 0x80	; 128
     c36:	38 2e       	mov	r3, r24
     c38:	02 c0       	rjmp	.+4      	; 0xc3e <vfprintf+0xe6>
     c3a:	88 36       	cpi	r24, 0x68	; 104
     c3c:	41 f4       	brne	.+16     	; 0xc4e <vfprintf+0xf6>
     c3e:	f7 01       	movw	r30, r14
     c40:	93 fd       	sbrc	r25, 3
     c42:	85 91       	lpm	r24, Z+
     c44:	93 ff       	sbrs	r25, 3
     c46:	81 91       	ld	r24, Z+
     c48:	7f 01       	movw	r14, r30
     c4a:	81 11       	cpse	r24, r1
     c4c:	b3 cf       	rjmp	.-154    	; 0xbb4 <vfprintf+0x5c>
     c4e:	98 2f       	mov	r25, r24
     c50:	9f 7d       	andi	r25, 0xDF	; 223
     c52:	95 54       	subi	r25, 0x45	; 69
     c54:	93 30       	cpi	r25, 0x03	; 3
     c56:	28 f4       	brcc	.+10     	; 0xc62 <vfprintf+0x10a>
     c58:	0c 5f       	subi	r16, 0xFC	; 252
     c5a:	1f 4f       	sbci	r17, 0xFF	; 255
     c5c:	9f e3       	ldi	r25, 0x3F	; 63
     c5e:	99 83       	std	Y+1, r25	; 0x01
     c60:	0d c0       	rjmp	.+26     	; 0xc7c <vfprintf+0x124>
     c62:	83 36       	cpi	r24, 0x63	; 99
     c64:	31 f0       	breq	.+12     	; 0xc72 <vfprintf+0x11a>
     c66:	83 37       	cpi	r24, 0x73	; 115
     c68:	71 f0       	breq	.+28     	; 0xc86 <vfprintf+0x12e>
     c6a:	83 35       	cpi	r24, 0x53	; 83
     c6c:	09 f0       	breq	.+2      	; 0xc70 <vfprintf+0x118>
     c6e:	59 c0       	rjmp	.+178    	; 0xd22 <vfprintf+0x1ca>
     c70:	21 c0       	rjmp	.+66     	; 0xcb4 <vfprintf+0x15c>
     c72:	f8 01       	movw	r30, r16
     c74:	80 81       	ld	r24, Z
     c76:	89 83       	std	Y+1, r24	; 0x01
     c78:	0e 5f       	subi	r16, 0xFE	; 254
     c7a:	1f 4f       	sbci	r17, 0xFF	; 255
     c7c:	88 24       	eor	r8, r8
     c7e:	83 94       	inc	r8
     c80:	91 2c       	mov	r9, r1
     c82:	53 01       	movw	r10, r6
     c84:	13 c0       	rjmp	.+38     	; 0xcac <vfprintf+0x154>
     c86:	28 01       	movw	r4, r16
     c88:	f2 e0       	ldi	r31, 0x02	; 2
     c8a:	4f 0e       	add	r4, r31
     c8c:	51 1c       	adc	r5, r1
     c8e:	f8 01       	movw	r30, r16
     c90:	a0 80       	ld	r10, Z
     c92:	b1 80       	ldd	r11, Z+1	; 0x01
     c94:	36 fe       	sbrs	r3, 6
     c96:	03 c0       	rjmp	.+6      	; 0xc9e <vfprintf+0x146>
     c98:	69 2d       	mov	r22, r9
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	02 c0       	rjmp	.+4      	; 0xca2 <vfprintf+0x14a>
     c9e:	6f ef       	ldi	r22, 0xFF	; 255
     ca0:	7f ef       	ldi	r23, 0xFF	; 255
     ca2:	c5 01       	movw	r24, r10
     ca4:	0e 94 98 07 	call	0xf30	; 0xf30 <strnlen>
     ca8:	4c 01       	movw	r8, r24
     caa:	82 01       	movw	r16, r4
     cac:	f3 2d       	mov	r31, r3
     cae:	ff 77       	andi	r31, 0x7F	; 127
     cb0:	3f 2e       	mov	r3, r31
     cb2:	16 c0       	rjmp	.+44     	; 0xce0 <vfprintf+0x188>
     cb4:	28 01       	movw	r4, r16
     cb6:	22 e0       	ldi	r18, 0x02	; 2
     cb8:	42 0e       	add	r4, r18
     cba:	51 1c       	adc	r5, r1
     cbc:	f8 01       	movw	r30, r16
     cbe:	a0 80       	ld	r10, Z
     cc0:	b1 80       	ldd	r11, Z+1	; 0x01
     cc2:	36 fe       	sbrs	r3, 6
     cc4:	03 c0       	rjmp	.+6      	; 0xccc <vfprintf+0x174>
     cc6:	69 2d       	mov	r22, r9
     cc8:	70 e0       	ldi	r23, 0x00	; 0
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <vfprintf+0x178>
     ccc:	6f ef       	ldi	r22, 0xFF	; 255
     cce:	7f ef       	ldi	r23, 0xFF	; 255
     cd0:	c5 01       	movw	r24, r10
     cd2:	0e 94 8d 07 	call	0xf1a	; 0xf1a <strnlen_P>
     cd6:	4c 01       	movw	r8, r24
     cd8:	f3 2d       	mov	r31, r3
     cda:	f0 68       	ori	r31, 0x80	; 128
     cdc:	3f 2e       	mov	r3, r31
     cde:	82 01       	movw	r16, r4
     ce0:	33 fc       	sbrc	r3, 3
     ce2:	1b c0       	rjmp	.+54     	; 0xd1a <vfprintf+0x1c2>
     ce4:	82 2d       	mov	r24, r2
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	88 16       	cp	r8, r24
     cea:	99 06       	cpc	r9, r25
     cec:	b0 f4       	brcc	.+44     	; 0xd1a <vfprintf+0x1c2>
     cee:	b6 01       	movw	r22, r12
     cf0:	80 e2       	ldi	r24, 0x20	; 32
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	0e 94 a3 07 	call	0xf46	; 0xf46 <fputc>
     cf8:	2a 94       	dec	r2
     cfa:	f4 cf       	rjmp	.-24     	; 0xce4 <vfprintf+0x18c>
     cfc:	f5 01       	movw	r30, r10
     cfe:	37 fc       	sbrc	r3, 7
     d00:	85 91       	lpm	r24, Z+
     d02:	37 fe       	sbrs	r3, 7
     d04:	81 91       	ld	r24, Z+
     d06:	5f 01       	movw	r10, r30
     d08:	b6 01       	movw	r22, r12
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	0e 94 a3 07 	call	0xf46	; 0xf46 <fputc>
     d10:	21 10       	cpse	r2, r1
     d12:	2a 94       	dec	r2
     d14:	21 e0       	ldi	r18, 0x01	; 1
     d16:	82 1a       	sub	r8, r18
     d18:	91 08       	sbc	r9, r1
     d1a:	81 14       	cp	r8, r1
     d1c:	91 04       	cpc	r9, r1
     d1e:	71 f7       	brne	.-36     	; 0xcfc <vfprintf+0x1a4>
     d20:	e8 c0       	rjmp	.+464    	; 0xef2 <vfprintf+0x39a>
     d22:	84 36       	cpi	r24, 0x64	; 100
     d24:	11 f0       	breq	.+4      	; 0xd2a <vfprintf+0x1d2>
     d26:	89 36       	cpi	r24, 0x69	; 105
     d28:	41 f5       	brne	.+80     	; 0xd7a <vfprintf+0x222>
     d2a:	f8 01       	movw	r30, r16
     d2c:	37 fe       	sbrs	r3, 7
     d2e:	07 c0       	rjmp	.+14     	; 0xd3e <vfprintf+0x1e6>
     d30:	60 81       	ld	r22, Z
     d32:	71 81       	ldd	r23, Z+1	; 0x01
     d34:	82 81       	ldd	r24, Z+2	; 0x02
     d36:	93 81       	ldd	r25, Z+3	; 0x03
     d38:	0c 5f       	subi	r16, 0xFC	; 252
     d3a:	1f 4f       	sbci	r17, 0xFF	; 255
     d3c:	08 c0       	rjmp	.+16     	; 0xd4e <vfprintf+0x1f6>
     d3e:	60 81       	ld	r22, Z
     d40:	71 81       	ldd	r23, Z+1	; 0x01
     d42:	07 2e       	mov	r0, r23
     d44:	00 0c       	add	r0, r0
     d46:	88 0b       	sbc	r24, r24
     d48:	99 0b       	sbc	r25, r25
     d4a:	0e 5f       	subi	r16, 0xFE	; 254
     d4c:	1f 4f       	sbci	r17, 0xFF	; 255
     d4e:	f3 2d       	mov	r31, r3
     d50:	ff 76       	andi	r31, 0x6F	; 111
     d52:	3f 2e       	mov	r3, r31
     d54:	97 ff       	sbrs	r25, 7
     d56:	09 c0       	rjmp	.+18     	; 0xd6a <vfprintf+0x212>
     d58:	90 95       	com	r25
     d5a:	80 95       	com	r24
     d5c:	70 95       	com	r23
     d5e:	61 95       	neg	r22
     d60:	7f 4f       	sbci	r23, 0xFF	; 255
     d62:	8f 4f       	sbci	r24, 0xFF	; 255
     d64:	9f 4f       	sbci	r25, 0xFF	; 255
     d66:	f0 68       	ori	r31, 0x80	; 128
     d68:	3f 2e       	mov	r3, r31
     d6a:	2a e0       	ldi	r18, 0x0A	; 10
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	a3 01       	movw	r20, r6
     d70:	0e 94 df 07 	call	0xfbe	; 0xfbe <__ultoa_invert>
     d74:	88 2e       	mov	r8, r24
     d76:	86 18       	sub	r8, r6
     d78:	45 c0       	rjmp	.+138    	; 0xe04 <vfprintf+0x2ac>
     d7a:	85 37       	cpi	r24, 0x75	; 117
     d7c:	31 f4       	brne	.+12     	; 0xd8a <vfprintf+0x232>
     d7e:	23 2d       	mov	r18, r3
     d80:	2f 7e       	andi	r18, 0xEF	; 239
     d82:	b2 2e       	mov	r11, r18
     d84:	2a e0       	ldi	r18, 0x0A	; 10
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	25 c0       	rjmp	.+74     	; 0xdd4 <vfprintf+0x27c>
     d8a:	93 2d       	mov	r25, r3
     d8c:	99 7f       	andi	r25, 0xF9	; 249
     d8e:	b9 2e       	mov	r11, r25
     d90:	8f 36       	cpi	r24, 0x6F	; 111
     d92:	c1 f0       	breq	.+48     	; 0xdc4 <vfprintf+0x26c>
     d94:	18 f4       	brcc	.+6      	; 0xd9c <vfprintf+0x244>
     d96:	88 35       	cpi	r24, 0x58	; 88
     d98:	79 f0       	breq	.+30     	; 0xdb8 <vfprintf+0x260>
     d9a:	b5 c0       	rjmp	.+362    	; 0xf06 <vfprintf+0x3ae>
     d9c:	80 37       	cpi	r24, 0x70	; 112
     d9e:	19 f0       	breq	.+6      	; 0xda6 <vfprintf+0x24e>
     da0:	88 37       	cpi	r24, 0x78	; 120
     da2:	21 f0       	breq	.+8      	; 0xdac <vfprintf+0x254>
     da4:	b0 c0       	rjmp	.+352    	; 0xf06 <vfprintf+0x3ae>
     da6:	e9 2f       	mov	r30, r25
     da8:	e0 61       	ori	r30, 0x10	; 16
     daa:	be 2e       	mov	r11, r30
     dac:	b4 fe       	sbrs	r11, 4
     dae:	0d c0       	rjmp	.+26     	; 0xdca <vfprintf+0x272>
     db0:	fb 2d       	mov	r31, r11
     db2:	f4 60       	ori	r31, 0x04	; 4
     db4:	bf 2e       	mov	r11, r31
     db6:	09 c0       	rjmp	.+18     	; 0xdca <vfprintf+0x272>
     db8:	34 fe       	sbrs	r3, 4
     dba:	0a c0       	rjmp	.+20     	; 0xdd0 <vfprintf+0x278>
     dbc:	29 2f       	mov	r18, r25
     dbe:	26 60       	ori	r18, 0x06	; 6
     dc0:	b2 2e       	mov	r11, r18
     dc2:	06 c0       	rjmp	.+12     	; 0xdd0 <vfprintf+0x278>
     dc4:	28 e0       	ldi	r18, 0x08	; 8
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	05 c0       	rjmp	.+10     	; 0xdd4 <vfprintf+0x27c>
     dca:	20 e1       	ldi	r18, 0x10	; 16
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	02 c0       	rjmp	.+4      	; 0xdd4 <vfprintf+0x27c>
     dd0:	20 e1       	ldi	r18, 0x10	; 16
     dd2:	32 e0       	ldi	r19, 0x02	; 2
     dd4:	f8 01       	movw	r30, r16
     dd6:	b7 fe       	sbrs	r11, 7
     dd8:	07 c0       	rjmp	.+14     	; 0xde8 <vfprintf+0x290>
     dda:	60 81       	ld	r22, Z
     ddc:	71 81       	ldd	r23, Z+1	; 0x01
     dde:	82 81       	ldd	r24, Z+2	; 0x02
     de0:	93 81       	ldd	r25, Z+3	; 0x03
     de2:	0c 5f       	subi	r16, 0xFC	; 252
     de4:	1f 4f       	sbci	r17, 0xFF	; 255
     de6:	06 c0       	rjmp	.+12     	; 0xdf4 <vfprintf+0x29c>
     de8:	60 81       	ld	r22, Z
     dea:	71 81       	ldd	r23, Z+1	; 0x01
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	0e 5f       	subi	r16, 0xFE	; 254
     df2:	1f 4f       	sbci	r17, 0xFF	; 255
     df4:	a3 01       	movw	r20, r6
     df6:	0e 94 df 07 	call	0xfbe	; 0xfbe <__ultoa_invert>
     dfa:	88 2e       	mov	r8, r24
     dfc:	86 18       	sub	r8, r6
     dfe:	fb 2d       	mov	r31, r11
     e00:	ff 77       	andi	r31, 0x7F	; 127
     e02:	3f 2e       	mov	r3, r31
     e04:	36 fe       	sbrs	r3, 6
     e06:	0d c0       	rjmp	.+26     	; 0xe22 <vfprintf+0x2ca>
     e08:	23 2d       	mov	r18, r3
     e0a:	2e 7f       	andi	r18, 0xFE	; 254
     e0c:	a2 2e       	mov	r10, r18
     e0e:	89 14       	cp	r8, r9
     e10:	58 f4       	brcc	.+22     	; 0xe28 <vfprintf+0x2d0>
     e12:	34 fe       	sbrs	r3, 4
     e14:	0b c0       	rjmp	.+22     	; 0xe2c <vfprintf+0x2d4>
     e16:	32 fc       	sbrc	r3, 2
     e18:	09 c0       	rjmp	.+18     	; 0xe2c <vfprintf+0x2d4>
     e1a:	83 2d       	mov	r24, r3
     e1c:	8e 7e       	andi	r24, 0xEE	; 238
     e1e:	a8 2e       	mov	r10, r24
     e20:	05 c0       	rjmp	.+10     	; 0xe2c <vfprintf+0x2d4>
     e22:	b8 2c       	mov	r11, r8
     e24:	a3 2c       	mov	r10, r3
     e26:	03 c0       	rjmp	.+6      	; 0xe2e <vfprintf+0x2d6>
     e28:	b8 2c       	mov	r11, r8
     e2a:	01 c0       	rjmp	.+2      	; 0xe2e <vfprintf+0x2d6>
     e2c:	b9 2c       	mov	r11, r9
     e2e:	a4 fe       	sbrs	r10, 4
     e30:	0f c0       	rjmp	.+30     	; 0xe50 <vfprintf+0x2f8>
     e32:	fe 01       	movw	r30, r28
     e34:	e8 0d       	add	r30, r8
     e36:	f1 1d       	adc	r31, r1
     e38:	80 81       	ld	r24, Z
     e3a:	80 33       	cpi	r24, 0x30	; 48
     e3c:	21 f4       	brne	.+8      	; 0xe46 <vfprintf+0x2ee>
     e3e:	9a 2d       	mov	r25, r10
     e40:	99 7e       	andi	r25, 0xE9	; 233
     e42:	a9 2e       	mov	r10, r25
     e44:	09 c0       	rjmp	.+18     	; 0xe58 <vfprintf+0x300>
     e46:	a2 fe       	sbrs	r10, 2
     e48:	06 c0       	rjmp	.+12     	; 0xe56 <vfprintf+0x2fe>
     e4a:	b3 94       	inc	r11
     e4c:	b3 94       	inc	r11
     e4e:	04 c0       	rjmp	.+8      	; 0xe58 <vfprintf+0x300>
     e50:	8a 2d       	mov	r24, r10
     e52:	86 78       	andi	r24, 0x86	; 134
     e54:	09 f0       	breq	.+2      	; 0xe58 <vfprintf+0x300>
     e56:	b3 94       	inc	r11
     e58:	a3 fc       	sbrc	r10, 3
     e5a:	11 c0       	rjmp	.+34     	; 0xe7e <vfprintf+0x326>
     e5c:	a0 fe       	sbrs	r10, 0
     e5e:	06 c0       	rjmp	.+12     	; 0xe6c <vfprintf+0x314>
     e60:	b2 14       	cp	r11, r2
     e62:	88 f4       	brcc	.+34     	; 0xe86 <vfprintf+0x32e>
     e64:	28 0c       	add	r2, r8
     e66:	92 2c       	mov	r9, r2
     e68:	9b 18       	sub	r9, r11
     e6a:	0e c0       	rjmp	.+28     	; 0xe88 <vfprintf+0x330>
     e6c:	b2 14       	cp	r11, r2
     e6e:	60 f4       	brcc	.+24     	; 0xe88 <vfprintf+0x330>
     e70:	b6 01       	movw	r22, r12
     e72:	80 e2       	ldi	r24, 0x20	; 32
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	0e 94 a3 07 	call	0xf46	; 0xf46 <fputc>
     e7a:	b3 94       	inc	r11
     e7c:	f7 cf       	rjmp	.-18     	; 0xe6c <vfprintf+0x314>
     e7e:	b2 14       	cp	r11, r2
     e80:	18 f4       	brcc	.+6      	; 0xe88 <vfprintf+0x330>
     e82:	2b 18       	sub	r2, r11
     e84:	02 c0       	rjmp	.+4      	; 0xe8a <vfprintf+0x332>
     e86:	98 2c       	mov	r9, r8
     e88:	21 2c       	mov	r2, r1
     e8a:	a4 fe       	sbrs	r10, 4
     e8c:	10 c0       	rjmp	.+32     	; 0xeae <vfprintf+0x356>
     e8e:	b6 01       	movw	r22, r12
     e90:	80 e3       	ldi	r24, 0x30	; 48
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	0e 94 a3 07 	call	0xf46	; 0xf46 <fputc>
     e98:	a2 fe       	sbrs	r10, 2
     e9a:	17 c0       	rjmp	.+46     	; 0xeca <vfprintf+0x372>
     e9c:	a1 fc       	sbrc	r10, 1
     e9e:	03 c0       	rjmp	.+6      	; 0xea6 <vfprintf+0x34e>
     ea0:	88 e7       	ldi	r24, 0x78	; 120
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <vfprintf+0x352>
     ea6:	88 e5       	ldi	r24, 0x58	; 88
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	b6 01       	movw	r22, r12
     eac:	0c c0       	rjmp	.+24     	; 0xec6 <vfprintf+0x36e>
     eae:	8a 2d       	mov	r24, r10
     eb0:	86 78       	andi	r24, 0x86	; 134
     eb2:	59 f0       	breq	.+22     	; 0xeca <vfprintf+0x372>
     eb4:	a1 fe       	sbrs	r10, 1
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <vfprintf+0x364>
     eb8:	8b e2       	ldi	r24, 0x2B	; 43
     eba:	01 c0       	rjmp	.+2      	; 0xebe <vfprintf+0x366>
     ebc:	80 e2       	ldi	r24, 0x20	; 32
     ebe:	a7 fc       	sbrc	r10, 7
     ec0:	8d e2       	ldi	r24, 0x2D	; 45
     ec2:	b6 01       	movw	r22, r12
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	0e 94 a3 07 	call	0xf46	; 0xf46 <fputc>
     eca:	89 14       	cp	r8, r9
     ecc:	38 f4       	brcc	.+14     	; 0xedc <vfprintf+0x384>
     ece:	b6 01       	movw	r22, r12
     ed0:	80 e3       	ldi	r24, 0x30	; 48
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	0e 94 a3 07 	call	0xf46	; 0xf46 <fputc>
     ed8:	9a 94       	dec	r9
     eda:	f7 cf       	rjmp	.-18     	; 0xeca <vfprintf+0x372>
     edc:	8a 94       	dec	r8
     ede:	f3 01       	movw	r30, r6
     ee0:	e8 0d       	add	r30, r8
     ee2:	f1 1d       	adc	r31, r1
     ee4:	80 81       	ld	r24, Z
     ee6:	b6 01       	movw	r22, r12
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	0e 94 a3 07 	call	0xf46	; 0xf46 <fputc>
     eee:	81 10       	cpse	r8, r1
     ef0:	f5 cf       	rjmp	.-22     	; 0xedc <vfprintf+0x384>
     ef2:	22 20       	and	r2, r2
     ef4:	09 f4       	brne	.+2      	; 0xef8 <vfprintf+0x3a0>
     ef6:	42 ce       	rjmp	.-892    	; 0xb7c <vfprintf+0x24>
     ef8:	b6 01       	movw	r22, r12
     efa:	80 e2       	ldi	r24, 0x20	; 32
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	0e 94 a3 07 	call	0xf46	; 0xf46 <fputc>
     f02:	2a 94       	dec	r2
     f04:	f6 cf       	rjmp	.-20     	; 0xef2 <vfprintf+0x39a>
     f06:	f6 01       	movw	r30, r12
     f08:	86 81       	ldd	r24, Z+6	; 0x06
     f0a:	97 81       	ldd	r25, Z+7	; 0x07
     f0c:	02 c0       	rjmp	.+4      	; 0xf12 <vfprintf+0x3ba>
     f0e:	8f ef       	ldi	r24, 0xFF	; 255
     f10:	9f ef       	ldi	r25, 0xFF	; 255
     f12:	2b 96       	adiw	r28, 0x0b	; 11
     f14:	e2 e1       	ldi	r30, 0x12	; 18
     f16:	0c 94 56 08 	jmp	0x10ac	; 0x10ac <__epilogue_restores__>

00000f1a <strnlen_P>:
     f1a:	fc 01       	movw	r30, r24
     f1c:	05 90       	lpm	r0, Z+
     f1e:	61 50       	subi	r22, 0x01	; 1
     f20:	70 40       	sbci	r23, 0x00	; 0
     f22:	01 10       	cpse	r0, r1
     f24:	d8 f7       	brcc	.-10     	; 0xf1c <strnlen_P+0x2>
     f26:	80 95       	com	r24
     f28:	90 95       	com	r25
     f2a:	8e 0f       	add	r24, r30
     f2c:	9f 1f       	adc	r25, r31
     f2e:	08 95       	ret

00000f30 <strnlen>:
     f30:	fc 01       	movw	r30, r24
     f32:	61 50       	subi	r22, 0x01	; 1
     f34:	70 40       	sbci	r23, 0x00	; 0
     f36:	01 90       	ld	r0, Z+
     f38:	01 10       	cpse	r0, r1
     f3a:	d8 f7       	brcc	.-10     	; 0xf32 <strnlen+0x2>
     f3c:	80 95       	com	r24
     f3e:	90 95       	com	r25
     f40:	8e 0f       	add	r24, r30
     f42:	9f 1f       	adc	r25, r31
     f44:	08 95       	ret

00000f46 <fputc>:
     f46:	0f 93       	push	r16
     f48:	1f 93       	push	r17
     f4a:	cf 93       	push	r28
     f4c:	df 93       	push	r29
     f4e:	fb 01       	movw	r30, r22
     f50:	23 81       	ldd	r18, Z+3	; 0x03
     f52:	21 fd       	sbrc	r18, 1
     f54:	03 c0       	rjmp	.+6      	; 0xf5c <fputc+0x16>
     f56:	8f ef       	ldi	r24, 0xFF	; 255
     f58:	9f ef       	ldi	r25, 0xFF	; 255
     f5a:	2c c0       	rjmp	.+88     	; 0xfb4 <fputc+0x6e>
     f5c:	22 ff       	sbrs	r18, 2
     f5e:	16 c0       	rjmp	.+44     	; 0xf8c <fputc+0x46>
     f60:	46 81       	ldd	r20, Z+6	; 0x06
     f62:	57 81       	ldd	r21, Z+7	; 0x07
     f64:	24 81       	ldd	r18, Z+4	; 0x04
     f66:	35 81       	ldd	r19, Z+5	; 0x05
     f68:	42 17       	cp	r20, r18
     f6a:	53 07       	cpc	r21, r19
     f6c:	44 f4       	brge	.+16     	; 0xf7e <fputc+0x38>
     f6e:	a0 81       	ld	r26, Z
     f70:	b1 81       	ldd	r27, Z+1	; 0x01
     f72:	9d 01       	movw	r18, r26
     f74:	2f 5f       	subi	r18, 0xFF	; 255
     f76:	3f 4f       	sbci	r19, 0xFF	; 255
     f78:	20 83       	st	Z, r18
     f7a:	31 83       	std	Z+1, r19	; 0x01
     f7c:	8c 93       	st	X, r24
     f7e:	26 81       	ldd	r18, Z+6	; 0x06
     f80:	37 81       	ldd	r19, Z+7	; 0x07
     f82:	2f 5f       	subi	r18, 0xFF	; 255
     f84:	3f 4f       	sbci	r19, 0xFF	; 255
     f86:	26 83       	std	Z+6, r18	; 0x06
     f88:	37 83       	std	Z+7, r19	; 0x07
     f8a:	14 c0       	rjmp	.+40     	; 0xfb4 <fputc+0x6e>
     f8c:	8b 01       	movw	r16, r22
     f8e:	ec 01       	movw	r28, r24
     f90:	fb 01       	movw	r30, r22
     f92:	00 84       	ldd	r0, Z+8	; 0x08
     f94:	f1 85       	ldd	r31, Z+9	; 0x09
     f96:	e0 2d       	mov	r30, r0
     f98:	09 95       	icall
     f9a:	89 2b       	or	r24, r25
     f9c:	e1 f6       	brne	.-72     	; 0xf56 <fputc+0x10>
     f9e:	d8 01       	movw	r26, r16
     fa0:	16 96       	adiw	r26, 0x06	; 6
     fa2:	8d 91       	ld	r24, X+
     fa4:	9c 91       	ld	r25, X
     fa6:	17 97       	sbiw	r26, 0x07	; 7
     fa8:	01 96       	adiw	r24, 0x01	; 1
     faa:	16 96       	adiw	r26, 0x06	; 6
     fac:	8d 93       	st	X+, r24
     fae:	9c 93       	st	X, r25
     fb0:	17 97       	sbiw	r26, 0x07	; 7
     fb2:	ce 01       	movw	r24, r28
     fb4:	df 91       	pop	r29
     fb6:	cf 91       	pop	r28
     fb8:	1f 91       	pop	r17
     fba:	0f 91       	pop	r16
     fbc:	08 95       	ret

00000fbe <__ultoa_invert>:
     fbe:	fa 01       	movw	r30, r20
     fc0:	aa 27       	eor	r26, r26
     fc2:	28 30       	cpi	r18, 0x08	; 8
     fc4:	51 f1       	breq	.+84     	; 0x101a <__ultoa_invert+0x5c>
     fc6:	20 31       	cpi	r18, 0x10	; 16
     fc8:	81 f1       	breq	.+96     	; 0x102a <__ultoa_invert+0x6c>
     fca:	e8 94       	clt
     fcc:	6f 93       	push	r22
     fce:	6e 7f       	andi	r22, 0xFE	; 254
     fd0:	6e 5f       	subi	r22, 0xFE	; 254
     fd2:	7f 4f       	sbci	r23, 0xFF	; 255
     fd4:	8f 4f       	sbci	r24, 0xFF	; 255
     fd6:	9f 4f       	sbci	r25, 0xFF	; 255
     fd8:	af 4f       	sbci	r26, 0xFF	; 255
     fda:	b1 e0       	ldi	r27, 0x01	; 1
     fdc:	3e d0       	rcall	.+124    	; 0x105a <__ultoa_invert+0x9c>
     fde:	b4 e0       	ldi	r27, 0x04	; 4
     fe0:	3c d0       	rcall	.+120    	; 0x105a <__ultoa_invert+0x9c>
     fe2:	67 0f       	add	r22, r23
     fe4:	78 1f       	adc	r23, r24
     fe6:	89 1f       	adc	r24, r25
     fe8:	9a 1f       	adc	r25, r26
     fea:	a1 1d       	adc	r26, r1
     fec:	68 0f       	add	r22, r24
     fee:	79 1f       	adc	r23, r25
     ff0:	8a 1f       	adc	r24, r26
     ff2:	91 1d       	adc	r25, r1
     ff4:	a1 1d       	adc	r26, r1
     ff6:	6a 0f       	add	r22, r26
     ff8:	71 1d       	adc	r23, r1
     ffa:	81 1d       	adc	r24, r1
     ffc:	91 1d       	adc	r25, r1
     ffe:	a1 1d       	adc	r26, r1
    1000:	20 d0       	rcall	.+64     	; 0x1042 <__ultoa_invert+0x84>
    1002:	09 f4       	brne	.+2      	; 0x1006 <__ultoa_invert+0x48>
    1004:	68 94       	set
    1006:	3f 91       	pop	r19
    1008:	2a e0       	ldi	r18, 0x0A	; 10
    100a:	26 9f       	mul	r18, r22
    100c:	11 24       	eor	r1, r1
    100e:	30 19       	sub	r19, r0
    1010:	30 5d       	subi	r19, 0xD0	; 208
    1012:	31 93       	st	Z+, r19
    1014:	de f6       	brtc	.-74     	; 0xfcc <__ultoa_invert+0xe>
    1016:	cf 01       	movw	r24, r30
    1018:	08 95       	ret
    101a:	46 2f       	mov	r20, r22
    101c:	47 70       	andi	r20, 0x07	; 7
    101e:	40 5d       	subi	r20, 0xD0	; 208
    1020:	41 93       	st	Z+, r20
    1022:	b3 e0       	ldi	r27, 0x03	; 3
    1024:	0f d0       	rcall	.+30     	; 0x1044 <__ultoa_invert+0x86>
    1026:	c9 f7       	brne	.-14     	; 0x101a <__ultoa_invert+0x5c>
    1028:	f6 cf       	rjmp	.-20     	; 0x1016 <__ultoa_invert+0x58>
    102a:	46 2f       	mov	r20, r22
    102c:	4f 70       	andi	r20, 0x0F	; 15
    102e:	40 5d       	subi	r20, 0xD0	; 208
    1030:	4a 33       	cpi	r20, 0x3A	; 58
    1032:	18 f0       	brcs	.+6      	; 0x103a <__ultoa_invert+0x7c>
    1034:	49 5d       	subi	r20, 0xD9	; 217
    1036:	31 fd       	sbrc	r19, 1
    1038:	40 52       	subi	r20, 0x20	; 32
    103a:	41 93       	st	Z+, r20
    103c:	02 d0       	rcall	.+4      	; 0x1042 <__ultoa_invert+0x84>
    103e:	a9 f7       	brne	.-22     	; 0x102a <__ultoa_invert+0x6c>
    1040:	ea cf       	rjmp	.-44     	; 0x1016 <__ultoa_invert+0x58>
    1042:	b4 e0       	ldi	r27, 0x04	; 4
    1044:	a6 95       	lsr	r26
    1046:	97 95       	ror	r25
    1048:	87 95       	ror	r24
    104a:	77 95       	ror	r23
    104c:	67 95       	ror	r22
    104e:	ba 95       	dec	r27
    1050:	c9 f7       	brne	.-14     	; 0x1044 <__ultoa_invert+0x86>
    1052:	00 97       	sbiw	r24, 0x00	; 0
    1054:	61 05       	cpc	r22, r1
    1056:	71 05       	cpc	r23, r1
    1058:	08 95       	ret
    105a:	9b 01       	movw	r18, r22
    105c:	ac 01       	movw	r20, r24
    105e:	0a 2e       	mov	r0, r26
    1060:	06 94       	lsr	r0
    1062:	57 95       	ror	r21
    1064:	47 95       	ror	r20
    1066:	37 95       	ror	r19
    1068:	27 95       	ror	r18
    106a:	ba 95       	dec	r27
    106c:	c9 f7       	brne	.-14     	; 0x1060 <__ultoa_invert+0xa2>
    106e:	62 0f       	add	r22, r18
    1070:	73 1f       	adc	r23, r19
    1072:	84 1f       	adc	r24, r20
    1074:	95 1f       	adc	r25, r21
    1076:	a0 1d       	adc	r26, r0
    1078:	08 95       	ret

0000107a <__prologue_saves__>:
    107a:	2f 92       	push	r2
    107c:	3f 92       	push	r3
    107e:	4f 92       	push	r4
    1080:	5f 92       	push	r5
    1082:	6f 92       	push	r6
    1084:	7f 92       	push	r7
    1086:	8f 92       	push	r8
    1088:	9f 92       	push	r9
    108a:	af 92       	push	r10
    108c:	bf 92       	push	r11
    108e:	cf 92       	push	r12
    1090:	df 92       	push	r13
    1092:	ef 92       	push	r14
    1094:	ff 92       	push	r15
    1096:	0f 93       	push	r16
    1098:	1f 93       	push	r17
    109a:	cf 93       	push	r28
    109c:	df 93       	push	r29
    109e:	cd b7       	in	r28, 0x3d	; 61
    10a0:	de b7       	in	r29, 0x3e	; 62
    10a2:	ca 1b       	sub	r28, r26
    10a4:	db 0b       	sbc	r29, r27
    10a6:	cd bf       	out	0x3d, r28	; 61
    10a8:	de bf       	out	0x3e, r29	; 62
    10aa:	09 94       	ijmp

000010ac <__epilogue_restores__>:
    10ac:	2a 88       	ldd	r2, Y+18	; 0x12
    10ae:	39 88       	ldd	r3, Y+17	; 0x11
    10b0:	48 88       	ldd	r4, Y+16	; 0x10
    10b2:	5f 84       	ldd	r5, Y+15	; 0x0f
    10b4:	6e 84       	ldd	r6, Y+14	; 0x0e
    10b6:	7d 84       	ldd	r7, Y+13	; 0x0d
    10b8:	8c 84       	ldd	r8, Y+12	; 0x0c
    10ba:	9b 84       	ldd	r9, Y+11	; 0x0b
    10bc:	aa 84       	ldd	r10, Y+10	; 0x0a
    10be:	b9 84       	ldd	r11, Y+9	; 0x09
    10c0:	c8 84       	ldd	r12, Y+8	; 0x08
    10c2:	df 80       	ldd	r13, Y+7	; 0x07
    10c4:	ee 80       	ldd	r14, Y+6	; 0x06
    10c6:	fd 80       	ldd	r15, Y+5	; 0x05
    10c8:	0c 81       	ldd	r16, Y+4	; 0x04
    10ca:	1b 81       	ldd	r17, Y+3	; 0x03
    10cc:	aa 81       	ldd	r26, Y+2	; 0x02
    10ce:	b9 81       	ldd	r27, Y+1	; 0x01
    10d0:	ce 0f       	add	r28, r30
    10d2:	d1 1d       	adc	r29, r1
    10d4:	cd bf       	out	0x3d, r28	; 61
    10d6:	de bf       	out	0x3e, r29	; 62
    10d8:	ed 01       	movw	r28, r26
    10da:	08 95       	ret

000010dc <_exit>:
    10dc:	f8 94       	cli

000010de <__stop_program>:
    10de:	ff cf       	rjmp	.-2      	; 0x10de <__stop_program>
