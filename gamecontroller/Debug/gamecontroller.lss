
gamecontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000fca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00802000  00000fca  0000105e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006c  00802028  00802028  00001086  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001086  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00001124  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001157  00000000  00000000  000012bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006d0  00000000  00000000  00002413  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019b3  00000000  00000000  00002ae3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a4  00000000  00000000  00004498  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00011dfb  00000000  00000000  0000483c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005da  00000000  00000000  00016637  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00016c11  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000058d5  00000000  00000000  00016d19  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__ctors_end>
   4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
   8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
   c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  10:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  14:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  18:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  1c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  20:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  24:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  28:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  2c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  30:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  34:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  38:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  3c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  40:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  44:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  48:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  4c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  50:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  54:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  58:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  5c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  60:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  64:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  68:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  6c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  70:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  74:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  78:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  7c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  80:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  84:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  88:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  8c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  90:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  94:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  98:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  9c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  a0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  a4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  a8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  ac:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  b0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  b4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  b8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  bc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  c0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  c4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  c8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  cc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  d0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  d4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  d8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  dc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  e0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  e4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  e8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  ec:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  f0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  f4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  f8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  fc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 100:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 104:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 108:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 10c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 110:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 114:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 118:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 11c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 120:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 124:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 128:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 12c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 130:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 134:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 138:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 13c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 140:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 144:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 148:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 14c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 150:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 154:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 158:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 15c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 160:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 164:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
 168:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>

0000016c <__ctors_end>:
 16c:	11 24       	eor	r1, r1
 16e:	1f be       	out	0x3f, r1	; 63
 170:	cf ef       	ldi	r28, 0xFF	; 255
 172:	cd bf       	out	0x3d, r28	; 61
 174:	d7 e2       	ldi	r29, 0x27	; 39
 176:	de bf       	out	0x3e, r29	; 62

00000178 <__do_copy_data>:
 178:	10 e2       	ldi	r17, 0x20	; 32
 17a:	a0 e0       	ldi	r26, 0x00	; 0
 17c:	b0 e2       	ldi	r27, 0x20	; 32
 17e:	ea ec       	ldi	r30, 0xCA	; 202
 180:	ff e0       	ldi	r31, 0x0F	; 15
 182:	02 c0       	rjmp	.+4      	; 0x188 <__do_copy_data+0x10>
 184:	05 90       	lpm	r0, Z+
 186:	0d 92       	st	X+, r0
 188:	a8 32       	cpi	r26, 0x28	; 40
 18a:	b1 07       	cpc	r27, r17
 18c:	d9 f7       	brne	.-10     	; 0x184 <__do_copy_data+0xc>

0000018e <__do_clear_bss>:
 18e:	20 e2       	ldi	r18, 0x20	; 32
 190:	a8 e2       	ldi	r26, 0x28	; 40
 192:	b0 e2       	ldi	r27, 0x20	; 32
 194:	01 c0       	rjmp	.+2      	; 0x198 <.do_clear_bss_start>

00000196 <.do_clear_bss_loop>:
 196:	1d 92       	st	X+, r1

00000198 <.do_clear_bss_start>:
 198:	a4 39       	cpi	r26, 0x94	; 148
 19a:	b2 07       	cpc	r27, r18
 19c:	e1 f7       	brne	.-8      	; 0x196 <.do_clear_bss_loop>
 19e:	0e 94 fd 00 	call	0x1fa	; 0x1fa <main>
 1a2:	0c 94 e3 07 	jmp	0xfc6	; 0xfc6 <_exit>

000001a6 <__bad_interrupt>:
 1a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001aa <AccInit>:
#include "acc.h"



void AccInit(void)
{
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	cd b7       	in	r28, 0x3d	; 61
 1b0:	de b7       	in	r29, 0x3e	; 62

	
}
 1b2:	00 00       	nop
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	08 95       	ret

000001ba <AnalogInit>:
#include "Analog.h"
#include <avr/io.h>

void AnalogInit(void)
{
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	cd b7       	in	r28, 0x3d	; 61
 1c0:	de b7       	in	r29, 0x3e	; 62

}
 1c2:	00 00       	nop
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	08 95       	ret

000001ca <ClockInit>:
#pragma GCC push_options
#pragma GCC optimize ("O2") //This function must be optimized to avoid too long time interval betwee CCP write and CLK.CTRL write (4 CLK CYC max)

void ClockInit(void)
{
	OSC.XOSCCTRL=0b11001011; //Clock<=16MHz	
 1ca:	8b ec       	ldi	r24, 0xCB	; 203
 1cc:	80 93 52 00 	sts	0x0052, r24	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
	OSC.CTRL=0b01000; //Enable oscillator	
 1d0:	88 e0       	ldi	r24, 0x08	; 8
 1d2:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
	while (!(OSC.STATUS&0b1000)); //Wait until XTAL osc is ready
 1d6:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
 1da:	83 ff       	sbrs	r24, 3
 1dc:	fc cf       	rjmp	.-8      	; 0x1d6 <ClockInit+0xc>
	
	//Select XTAL osc as system CLK source
	CCP=0xd8;
 1de:	88 ed       	ldi	r24, 0xD8	; 216
 1e0:	84 bf       	out	0x34, r24	; 52
    CLK.CTRL=0b0011;
 1e2:	83 e0       	ldi	r24, 0x03	; 3
 1e4:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
 1e8:	08 95       	ret

000001ea <EncoderInit>:
#include <util/delay.h>
#include <stdio.h>
#include "encoder.h"

void EncoderInit(void)
{
 1ea:	cf 93       	push	r28
 1ec:	df 93       	push	r29
 1ee:	cd b7       	in	r28, 0x3d	; 61
 1f0:	de b7       	in	r29, 0x3e	; 62

}
 1f2:	00 00       	nop
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <main>:

void SimpleFunction(void);	//A simple function: print a counter (0 to 9) to the terminal
void LightLoop(void);

int main(void)
{
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	cd b7       	in	r28, 0x3d	; 61
 200:	de b7       	in	r29, 0x3e	; 62
 202:	2e 97       	sbiw	r28, 0x0e	; 14
 204:	cd bf       	out	0x3d, r28	; 61
 206:	de bf       	out	0x3e, r29	; 62

	
	//###1###
	
	//Initialize subsystems
	ClockInit();			//Initialize system clock (16 MHz)
 208:	0e 94 e5 00 	call	0x1ca	; 0x1ca <ClockInit>
	USARTInit();			//Initialize USART and bind to stdout,stdin
 20c:	0e 94 29 03 	call	0x652	; 0x652 <USARTInit>
	AnalogInit();			//Initialize ADC
 210:	0e 94 dd 00 	call	0x1ba	; 0x1ba <AnalogInit>
	AccInit();				//Initialize accelerometer system
 214:	0e 94 d5 00 	call	0x1aa	; 0x1aa <AccInit>
	LEDInit();				//Initialize LEDs
 218:	0e 94 93 02 	call	0x526	; 0x526 <LEDInit>
	SwitchInit();			//Initialize switches
 21c:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <SwitchInit>
	EncoderInit();			//Initialize encoder
 220:	0e 94 f5 00 	call	0x1ea	; 0x1ea <EncoderInit>
	SpeakerInit();			//Initialize speaker system
 224:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <SpeakerInit>
	
	//Enable interrupts
	PMIC.CTRL|=0b00000111;  //Enable low, medium, high priority interrupts
 228:	80 ea       	ldi	r24, 0xA0	; 160
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	20 ea       	ldi	r18, 0xA0	; 160
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	f9 01       	movw	r30, r18
 232:	22 81       	ldd	r18, Z+2	; 0x02
 234:	27 60       	ori	r18, 0x07	; 7
 236:	fc 01       	movw	r30, r24
 238:	22 83       	std	Z+2, r18	; 0x02
	SREG|=0b10000000;		//Globale interrupt enable
 23a:	8f e3       	ldi	r24, 0x3F	; 63
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	2f e3       	ldi	r18, 0x3F	; 63
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	f9 01       	movw	r30, r18
 244:	20 81       	ld	r18, Z
 246:	20 68       	ori	r18, 0x80	; 128
 248:	fc 01       	movw	r30, r24
 24a:	20 83       	st	Z, r18
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	aa ef       	ldi	r26, 0xFA	; 250
 252:	b3 e4       	ldi	r27, 0x43	; 67
 254:	89 83       	std	Y+1, r24	; 0x01
 256:	9a 83       	std	Y+2, r25	; 0x02
 258:	ab 83       	std	Y+3, r26	; 0x03
 25a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 25c:	20 e0       	ldi	r18, 0x00	; 0
 25e:	30 e0       	ldi	r19, 0x00	; 0
 260:	4a e7       	ldi	r20, 0x7A	; 122
 262:	55 e4       	ldi	r21, 0x45	; 69
 264:	69 81       	ldd	r22, Y+1	; 0x01
 266:	7a 81       	ldd	r23, Y+2	; 0x02
 268:	8b 81       	ldd	r24, Y+3	; 0x03
 26a:	9c 81       	ldd	r25, Y+4	; 0x04
 26c:	0e 94 24 04 	call	0x848	; 0x848 <__mulsf3>
 270:	dc 01       	movw	r26, r24
 272:	cb 01       	movw	r24, r22
 274:	8d 83       	std	Y+5, r24	; 0x05
 276:	9e 83       	std	Y+6, r25	; 0x06
 278:	af 83       	std	Y+7, r26	; 0x07
 27a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 27c:	20 e0       	ldi	r18, 0x00	; 0
 27e:	30 e0       	ldi	r19, 0x00	; 0
 280:	40 e8       	ldi	r20, 0x80	; 128
 282:	5f e3       	ldi	r21, 0x3F	; 63
 284:	6d 81       	ldd	r22, Y+5	; 0x05
 286:	7e 81       	ldd	r23, Y+6	; 0x06
 288:	8f 81       	ldd	r24, Y+7	; 0x07
 28a:	98 85       	ldd	r25, Y+8	; 0x08
 28c:	0e 94 9e 03 	call	0x73c	; 0x73c <__cmpsf2>
 290:	88 23       	and	r24, r24
 292:	2c f4       	brge	.+10     	; 0x29e <main+0xa4>
		__ticks = 1;
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	89 87       	std	Y+9, r24	; 0x09
 29a:	9a 87       	std	Y+10, r25	; 0x0a
 29c:	3f c0       	rjmp	.+126    	; 0x31c <main+0x122>
	else if (__tmp > 65535)
 29e:	20 e0       	ldi	r18, 0x00	; 0
 2a0:	3f ef       	ldi	r19, 0xFF	; 255
 2a2:	4f e7       	ldi	r20, 0x7F	; 127
 2a4:	57 e4       	ldi	r21, 0x47	; 71
 2a6:	6d 81       	ldd	r22, Y+5	; 0x05
 2a8:	7e 81       	ldd	r23, Y+6	; 0x06
 2aa:	8f 81       	ldd	r24, Y+7	; 0x07
 2ac:	98 85       	ldd	r25, Y+8	; 0x08
 2ae:	0e 94 1f 04 	call	0x83e	; 0x83e <__gesf2>
 2b2:	18 16       	cp	r1, r24
 2b4:	4c f5       	brge	.+82     	; 0x308 <main+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2b6:	20 e0       	ldi	r18, 0x00	; 0
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	40 e2       	ldi	r20, 0x20	; 32
 2bc:	51 e4       	ldi	r21, 0x41	; 65
 2be:	69 81       	ldd	r22, Y+1	; 0x01
 2c0:	7a 81       	ldd	r23, Y+2	; 0x02
 2c2:	8b 81       	ldd	r24, Y+3	; 0x03
 2c4:	9c 81       	ldd	r25, Y+4	; 0x04
 2c6:	0e 94 24 04 	call	0x848	; 0x848 <__mulsf3>
 2ca:	dc 01       	movw	r26, r24
 2cc:	cb 01       	movw	r24, r22
 2ce:	bc 01       	movw	r22, r24
 2d0:	cd 01       	movw	r24, r26
 2d2:	0e 94 a3 03 	call	0x746	; 0x746 <__fixunssfsi>
 2d6:	dc 01       	movw	r26, r24
 2d8:	cb 01       	movw	r24, r22
 2da:	89 87       	std	Y+9, r24	; 0x09
 2dc:	9a 87       	std	Y+10, r25	; 0x0a
 2de:	0f c0       	rjmp	.+30     	; 0x2fe <main+0x104>
 2e0:	80 e9       	ldi	r24, 0x90	; 144
 2e2:	91 e0       	ldi	r25, 0x01	; 1
 2e4:	8b 87       	std	Y+11, r24	; 0x0b
 2e6:	9c 87       	std	Y+12, r25	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2e8:	8b 85       	ldd	r24, Y+11	; 0x0b
 2ea:	9c 85       	ldd	r25, Y+12	; 0x0c
 2ec:	01 97       	sbiw	r24, 0x01	; 1
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <main+0xf2>
 2f0:	8b 87       	std	Y+11, r24	; 0x0b
 2f2:	9c 87       	std	Y+12, r25	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2f4:	89 85       	ldd	r24, Y+9	; 0x09
 2f6:	9a 85       	ldd	r25, Y+10	; 0x0a
 2f8:	01 97       	sbiw	r24, 0x01	; 1
 2fa:	89 87       	std	Y+9, r24	; 0x09
 2fc:	9a 87       	std	Y+10, r25	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2fe:	89 85       	ldd	r24, Y+9	; 0x09
 300:	9a 85       	ldd	r25, Y+10	; 0x0a
 302:	89 2b       	or	r24, r25
 304:	69 f7       	brne	.-38     	; 0x2e0 <main+0xe6>
 306:	14 c0       	rjmp	.+40     	; 0x330 <main+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 308:	6d 81       	ldd	r22, Y+5	; 0x05
 30a:	7e 81       	ldd	r23, Y+6	; 0x06
 30c:	8f 81       	ldd	r24, Y+7	; 0x07
 30e:	98 85       	ldd	r25, Y+8	; 0x08
 310:	0e 94 a3 03 	call	0x746	; 0x746 <__fixunssfsi>
 314:	dc 01       	movw	r26, r24
 316:	cb 01       	movw	r24, r22
 318:	89 87       	std	Y+9, r24	; 0x09
 31a:	9a 87       	std	Y+10, r25	; 0x0a
 31c:	89 85       	ldd	r24, Y+9	; 0x09
 31e:	9a 85       	ldd	r25, Y+10	; 0x0a
 320:	8d 87       	std	Y+13, r24	; 0x0d
 322:	9e 87       	std	Y+14, r25	; 0x0e
 324:	8d 85       	ldd	r24, Y+13	; 0x0d
 326:	9e 85       	ldd	r25, Y+14	; 0x0e
 328:	01 97       	sbiw	r24, 0x01	; 1
 32a:	f1 f7       	brne	.-4      	; 0x328 <main+0x12e>
 32c:	8d 87       	std	Y+13, r24	; 0x0d
 32e:	9e 87       	std	Y+14, r25	; 0x0e
	_delay_ms(500);

	//###2###
	SimpleFunction();
 330:	0e 94 9d 01 	call	0x33a	; 0x33a <SimpleFunction>
	LightLoop();
 334:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <LightLoop>
	while (1);
 338:	ff cf       	rjmp	.-2      	; 0x338 <main+0x13e>

0000033a <SimpleFunction>:
}

void SimpleFunction(void)
{
 33a:	cf 93       	push	r28
 33c:	df 93       	push	r29
 33e:	cd b7       	in	r28, 0x3d	; 61
 340:	de b7       	in	r29, 0x3e	; 62
	for (a=0;a<10;a++)
 342:	10 92 8c 20 	sts	0x208C, r1	; 0x80208c <a>
 346:	10 92 8d 20 	sts	0x208D, r1	; 0x80208d <a+0x1>
 34a:	43 c0       	rjmp	.+134    	; 0x3d2 <SimpleFunction+0x98>
	{
		//The variable text had the same address throughout the execution of the program.
		sprintf(text[a],"Counter:%d\r",a);
 34c:	40 91 8c 20 	lds	r20, 0x208C	; 0x80208c <a>
 350:	50 91 8d 20 	lds	r21, 0x208D	; 0x80208d <a+0x1>
 354:	80 91 8c 20 	lds	r24, 0x208C	; 0x80208c <a>
 358:	90 91 8d 20 	lds	r25, 0x208D	; 0x80208d <a+0x1>
 35c:	88 0f       	add	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	9c 01       	movw	r18, r24
 362:	22 0f       	add	r18, r18
 364:	33 1f       	adc	r19, r19
 366:	22 0f       	add	r18, r18
 368:	33 1f       	adc	r19, r19
 36a:	82 0f       	add	r24, r18
 36c:	93 1f       	adc	r25, r19
 36e:	88 5d       	subi	r24, 0xD8	; 216
 370:	9f 4d       	sbci	r25, 0xDF	; 223
 372:	25 2f       	mov	r18, r21
 374:	2f 93       	push	r18
 376:	24 2f       	mov	r18, r20
 378:	2f 93       	push	r18
 37a:	2e e0       	ldi	r18, 0x0E	; 14
 37c:	30 e2       	ldi	r19, 0x20	; 32
 37e:	23 2f       	mov	r18, r19
 380:	2f 93       	push	r18
 382:	2e e0       	ldi	r18, 0x0E	; 14
 384:	30 e2       	ldi	r19, 0x20	; 32
 386:	2f 93       	push	r18
 388:	29 2f       	mov	r18, r25
 38a:	2f 93       	push	r18
 38c:	8f 93       	push	r24
 38e:	0e 94 ff 04 	call	0x9fe	; 0x9fe <sprintf>
 392:	0f 90       	pop	r0
 394:	0f 90       	pop	r0
 396:	0f 90       	pop	r0
 398:	0f 90       	pop	r0
 39a:	0f 90       	pop	r0
 39c:	0f 90       	pop	r0
		puts(text[a]);
 39e:	80 91 8c 20 	lds	r24, 0x208C	; 0x80208c <a>
 3a2:	90 91 8d 20 	lds	r25, 0x208D	; 0x80208d <a+0x1>
 3a6:	88 0f       	add	r24, r24
 3a8:	99 1f       	adc	r25, r25
 3aa:	9c 01       	movw	r18, r24
 3ac:	22 0f       	add	r18, r18
 3ae:	33 1f       	adc	r19, r19
 3b0:	22 0f       	add	r18, r18
 3b2:	33 1f       	adc	r19, r19
 3b4:	82 0f       	add	r24, r18
 3b6:	93 1f       	adc	r25, r19
 3b8:	88 5d       	subi	r24, 0xD8	; 216
 3ba:	9f 4d       	sbci	r25, 0xDF	; 223
 3bc:	0e 94 cf 04 	call	0x99e	; 0x99e <puts>
	while (1);
}

void SimpleFunction(void)
{
	for (a=0;a<10;a++)
 3c0:	80 91 8c 20 	lds	r24, 0x208C	; 0x80208c <a>
 3c4:	90 91 8d 20 	lds	r25, 0x208D	; 0x80208d <a+0x1>
 3c8:	01 96       	adiw	r24, 0x01	; 1
 3ca:	80 93 8c 20 	sts	0x208C, r24	; 0x80208c <a>
 3ce:	90 93 8d 20 	sts	0x208D, r25	; 0x80208d <a+0x1>
 3d2:	80 91 8c 20 	lds	r24, 0x208C	; 0x80208c <a>
 3d6:	90 91 8d 20 	lds	r25, 0x208D	; 0x80208d <a+0x1>
 3da:	0a 97       	sbiw	r24, 0x0a	; 10
 3dc:	0c f4       	brge	.+2      	; 0x3e0 <SimpleFunction+0xa6>
 3de:	b6 cf       	rjmp	.-148    	; 0x34c <SimpleFunction+0x12>
	{
		//The variable text had the same address throughout the execution of the program.
		sprintf(text[a],"Counter:%d\r",a);
		puts(text[a]);
	}
}
 3e0:	00 00       	nop
 3e2:	df 91       	pop	r29
 3e4:	cf 91       	pop	r28
 3e6:	08 95       	ret

000003e8 <LightLoop>:

void LightLoop(void)
{
 3e8:	cf 93       	push	r28
 3ea:	df 93       	push	r29
 3ec:	cd b7       	in	r28, 0x3d	; 61
 3ee:	de b7       	in	r29, 0x3e	; 62
 3f0:	64 97       	sbiw	r28, 0x14	; 20
 3f2:	cd bf       	out	0x3d, r28	; 61
 3f4:	de bf       	out	0x3e, r29	; 62
	char bitmask = 0b00000001;
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	89 83       	std	Y+1, r24	; 0x01
	char switch_out[5];
			
	while (1)
	{
		LEDSet(bitmask);
 3fa:	89 81       	ldd	r24, Y+1	; 0x01
 3fc:	0e 94 b8 02 	call	0x570	; 0x570 <LEDSet>
		if(bitmask == 0b00001000){
 400:	89 81       	ldd	r24, Y+1	; 0x01
 402:	88 30       	cpi	r24, 0x08	; 8
 404:	31 f4       	brne	.+12     	; 0x412 <__FUSE_REGION_LENGTH__+0x12>
			bitmask >>= 3; //terug eerste led
 406:	89 81       	ldd	r24, Y+1	; 0x01
 408:	86 95       	lsr	r24
 40a:	86 95       	lsr	r24
 40c:	86 95       	lsr	r24
 40e:	89 83       	std	Y+1, r24	; 0x01
 410:	03 c0       	rjmp	.+6      	; 0x418 <__FUSE_REGION_LENGTH__+0x18>
		} else {
			bitmask <<= 1; //bitshift naar volgende led
 412:	89 81       	ldd	r24, Y+1	; 0x01
 414:	88 0f       	add	r24, r24
 416:	89 83       	std	Y+1, r24	; 0x01
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	aa ef       	ldi	r26, 0xFA	; 250
 41e:	b3 e4       	ldi	r27, 0x43	; 67
 420:	8a 83       	std	Y+2, r24	; 0x02
 422:	9b 83       	std	Y+3, r25	; 0x03
 424:	ac 83       	std	Y+4, r26	; 0x04
 426:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 428:	20 e0       	ldi	r18, 0x00	; 0
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	4a e7       	ldi	r20, 0x7A	; 122
 42e:	55 e4       	ldi	r21, 0x45	; 69
 430:	6a 81       	ldd	r22, Y+2	; 0x02
 432:	7b 81       	ldd	r23, Y+3	; 0x03
 434:	8c 81       	ldd	r24, Y+4	; 0x04
 436:	9d 81       	ldd	r25, Y+5	; 0x05
 438:	0e 94 24 04 	call	0x848	; 0x848 <__mulsf3>
 43c:	dc 01       	movw	r26, r24
 43e:	cb 01       	movw	r24, r22
 440:	8e 83       	std	Y+6, r24	; 0x06
 442:	9f 83       	std	Y+7, r25	; 0x07
 444:	a8 87       	std	Y+8, r26	; 0x08
 446:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
 448:	20 e0       	ldi	r18, 0x00	; 0
 44a:	30 e0       	ldi	r19, 0x00	; 0
 44c:	40 e8       	ldi	r20, 0x80	; 128
 44e:	5f e3       	ldi	r21, 0x3F	; 63
 450:	6e 81       	ldd	r22, Y+6	; 0x06
 452:	7f 81       	ldd	r23, Y+7	; 0x07
 454:	88 85       	ldd	r24, Y+8	; 0x08
 456:	99 85       	ldd	r25, Y+9	; 0x09
 458:	0e 94 9e 03 	call	0x73c	; 0x73c <__cmpsf2>
 45c:	88 23       	and	r24, r24
 45e:	2c f4       	brge	.+10     	; 0x46a <__FUSE_REGION_LENGTH__+0x6a>
		__ticks = 1;
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	8a 87       	std	Y+10, r24	; 0x0a
 466:	9b 87       	std	Y+11, r25	; 0x0b
 468:	3f c0       	rjmp	.+126    	; 0x4e8 <__FUSE_REGION_LENGTH__+0xe8>
	else if (__tmp > 65535)
 46a:	20 e0       	ldi	r18, 0x00	; 0
 46c:	3f ef       	ldi	r19, 0xFF	; 255
 46e:	4f e7       	ldi	r20, 0x7F	; 127
 470:	57 e4       	ldi	r21, 0x47	; 71
 472:	6e 81       	ldd	r22, Y+6	; 0x06
 474:	7f 81       	ldd	r23, Y+7	; 0x07
 476:	88 85       	ldd	r24, Y+8	; 0x08
 478:	99 85       	ldd	r25, Y+9	; 0x09
 47a:	0e 94 1f 04 	call	0x83e	; 0x83e <__gesf2>
 47e:	18 16       	cp	r1, r24
 480:	4c f5       	brge	.+82     	; 0x4d4 <__FUSE_REGION_LENGTH__+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 482:	20 e0       	ldi	r18, 0x00	; 0
 484:	30 e0       	ldi	r19, 0x00	; 0
 486:	40 e2       	ldi	r20, 0x20	; 32
 488:	51 e4       	ldi	r21, 0x41	; 65
 48a:	6a 81       	ldd	r22, Y+2	; 0x02
 48c:	7b 81       	ldd	r23, Y+3	; 0x03
 48e:	8c 81       	ldd	r24, Y+4	; 0x04
 490:	9d 81       	ldd	r25, Y+5	; 0x05
 492:	0e 94 24 04 	call	0x848	; 0x848 <__mulsf3>
 496:	dc 01       	movw	r26, r24
 498:	cb 01       	movw	r24, r22
 49a:	bc 01       	movw	r22, r24
 49c:	cd 01       	movw	r24, r26
 49e:	0e 94 a3 03 	call	0x746	; 0x746 <__fixunssfsi>
 4a2:	dc 01       	movw	r26, r24
 4a4:	cb 01       	movw	r24, r22
 4a6:	8a 87       	std	Y+10, r24	; 0x0a
 4a8:	9b 87       	std	Y+11, r25	; 0x0b
 4aa:	0f c0       	rjmp	.+30     	; 0x4ca <__FUSE_REGION_LENGTH__+0xca>
 4ac:	80 e9       	ldi	r24, 0x90	; 144
 4ae:	91 e0       	ldi	r25, 0x01	; 1
 4b0:	8c 87       	std	Y+12, r24	; 0x0c
 4b2:	9d 87       	std	Y+13, r25	; 0x0d
 4b4:	8c 85       	ldd	r24, Y+12	; 0x0c
 4b6:	9d 85       	ldd	r25, Y+13	; 0x0d
 4b8:	01 97       	sbiw	r24, 0x01	; 1
 4ba:	f1 f7       	brne	.-4      	; 0x4b8 <__FUSE_REGION_LENGTH__+0xb8>
 4bc:	8c 87       	std	Y+12, r24	; 0x0c
 4be:	9d 87       	std	Y+13, r25	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4c0:	8a 85       	ldd	r24, Y+10	; 0x0a
 4c2:	9b 85       	ldd	r25, Y+11	; 0x0b
 4c4:	01 97       	sbiw	r24, 0x01	; 1
 4c6:	8a 87       	std	Y+10, r24	; 0x0a
 4c8:	9b 87       	std	Y+11, r25	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4ca:	8a 85       	ldd	r24, Y+10	; 0x0a
 4cc:	9b 85       	ldd	r25, Y+11	; 0x0b
 4ce:	89 2b       	or	r24, r25
 4d0:	69 f7       	brne	.-38     	; 0x4ac <__FUSE_REGION_LENGTH__+0xac>
 4d2:	14 c0       	rjmp	.+40     	; 0x4fc <__FUSE_REGION_LENGTH__+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 4d4:	6e 81       	ldd	r22, Y+6	; 0x06
 4d6:	7f 81       	ldd	r23, Y+7	; 0x07
 4d8:	88 85       	ldd	r24, Y+8	; 0x08
 4da:	99 85       	ldd	r25, Y+9	; 0x09
 4dc:	0e 94 a3 03 	call	0x746	; 0x746 <__fixunssfsi>
 4e0:	dc 01       	movw	r26, r24
 4e2:	cb 01       	movw	r24, r22
 4e4:	8a 87       	std	Y+10, r24	; 0x0a
 4e6:	9b 87       	std	Y+11, r25	; 0x0b
 4e8:	8a 85       	ldd	r24, Y+10	; 0x0a
 4ea:	9b 85       	ldd	r25, Y+11	; 0x0b
 4ec:	8e 87       	std	Y+14, r24	; 0x0e
 4ee:	9f 87       	std	Y+15, r25	; 0x0f
 4f0:	8e 85       	ldd	r24, Y+14	; 0x0e
 4f2:	9f 85       	ldd	r25, Y+15	; 0x0f
 4f4:	01 97       	sbiw	r24, 0x01	; 1
 4f6:	f1 f7       	brne	.-4      	; 0x4f4 <__FUSE_REGION_LENGTH__+0xf4>
 4f8:	8e 87       	std	Y+14, r24	; 0x0e
 4fa:	9f 87       	std	Y+15, r25	; 0x0f
		}
		_delay_ms(500);
		
		//GPIO INPUT:

		printf("$SWITCH %d\r\n", SwitchGet());
 4fc:	0e 94 0a 03 	call	0x614	; 0x614 <SwitchGet>
 500:	88 2f       	mov	r24, r24
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	29 2f       	mov	r18, r25
 506:	2f 93       	push	r18
 508:	8f 93       	push	r24
 50a:	8a e1       	ldi	r24, 0x1A	; 26
 50c:	90 e2       	ldi	r25, 0x20	; 32
 50e:	89 2f       	mov	r24, r25
 510:	8f 93       	push	r24
 512:	8a e1       	ldi	r24, 0x1A	; 26
 514:	90 e2       	ldi	r25, 0x20	; 32
 516:	8f 93       	push	r24
 518:	0e 94 b9 04 	call	0x972	; 0x972 <printf>
 51c:	0f 90       	pop	r0
 51e:	0f 90       	pop	r0
 520:	0f 90       	pop	r0
 522:	0f 90       	pop	r0
		//sprintf(switch_out, "SWITCH x\r\n", SwitchGet());
		//puts(switch_out);
	};
 524:	6a cf       	rjmp	.-300    	; 0x3fa <LightLoop+0x12>

00000526 <LEDInit>:
#include "LED.h"
#include <avr/io.h>

void LEDInit(void)
{
 526:	cf 93       	push	r28
 528:	df 93       	push	r29
 52a:	cd b7       	in	r28, 0x3d	; 61
 52c:	de b7       	in	r29, 0x3e	; 62
	PORTE.DIRSET |= 0b00001111; //dir = 1 --> output
 52e:	80 e8       	ldi	r24, 0x80	; 128
 530:	96 e0       	ldi	r25, 0x06	; 6
 532:	20 e8       	ldi	r18, 0x80	; 128
 534:	36 e0       	ldi	r19, 0x06	; 6
 536:	f9 01       	movw	r30, r18
 538:	21 81       	ldd	r18, Z+1	; 0x01
 53a:	2f 60       	ori	r18, 0x0F	; 15
 53c:	fc 01       	movw	r30, r24
 53e:	21 83       	std	Z+1, r18	; 0x01
	PORTE.PIN0CTRL=PORT_OPC_PULLUP_gc; //enkel belangrijk on input
 540:	80 e8       	ldi	r24, 0x80	; 128
 542:	96 e0       	ldi	r25, 0x06	; 6
 544:	28 e1       	ldi	r18, 0x18	; 24
 546:	fc 01       	movw	r30, r24
 548:	20 8b       	std	Z+16, r18	; 0x10
	PORTE.PIN1CTRL=PORT_OPC_PULLUP_gc;
 54a:	80 e8       	ldi	r24, 0x80	; 128
 54c:	96 e0       	ldi	r25, 0x06	; 6
 54e:	28 e1       	ldi	r18, 0x18	; 24
 550:	fc 01       	movw	r30, r24
 552:	21 8b       	std	Z+17, r18	; 0x11
	PORTE.PIN2CTRL=PORT_OPC_PULLUP_gc;
 554:	80 e8       	ldi	r24, 0x80	; 128
 556:	96 e0       	ldi	r25, 0x06	; 6
 558:	28 e1       	ldi	r18, 0x18	; 24
 55a:	fc 01       	movw	r30, r24
 55c:	22 8b       	std	Z+18, r18	; 0x12
	PORTE.PIN3CTRL=PORT_OPC_PULLUP_gc;
 55e:	80 e8       	ldi	r24, 0x80	; 128
 560:	96 e0       	ldi	r25, 0x06	; 6
 562:	28 e1       	ldi	r18, 0x18	; 24
 564:	fc 01       	movw	r30, r24
 566:	23 8b       	std	Z+19, r18	; 0x13
}
 568:	00 00       	nop
 56a:	df 91       	pop	r29
 56c:	cf 91       	pop	r28
 56e:	08 95       	ret

00000570 <LEDSet>:

void LEDSet(char bitmask)
{
 570:	cf 93       	push	r28
 572:	df 93       	push	r29
 574:	1f 92       	push	r1
 576:	cd b7       	in	r28, 0x3d	; 61
 578:	de b7       	in	r29, 0x3e	; 62
 57a:	89 83       	std	Y+1, r24	; 0x01
	PORTE.OUT &= 0b11110000; //4 ledbits op 0, rest blijft ongewijzigd
 57c:	80 e8       	ldi	r24, 0x80	; 128
 57e:	96 e0       	ldi	r25, 0x06	; 6
 580:	20 e8       	ldi	r18, 0x80	; 128
 582:	36 e0       	ldi	r19, 0x06	; 6
 584:	f9 01       	movw	r30, r18
 586:	24 81       	ldd	r18, Z+4	; 0x04
 588:	20 7f       	andi	r18, 0xF0	; 240
 58a:	fc 01       	movw	r30, r24
 58c:	24 83       	std	Z+4, r18	; 0x04
	PORTE.OUT |= ~bitmask; //juiste ledbit wordt op 1 gezet
 58e:	80 e8       	ldi	r24, 0x80	; 128
 590:	96 e0       	ldi	r25, 0x06	; 6
 592:	20 e8       	ldi	r18, 0x80	; 128
 594:	36 e0       	ldi	r19, 0x06	; 6
 596:	f9 01       	movw	r30, r18
 598:	24 81       	ldd	r18, Z+4	; 0x04
 59a:	32 2f       	mov	r19, r18
 59c:	29 81       	ldd	r18, Y+1	; 0x01
 59e:	20 95       	com	r18
 5a0:	23 2b       	or	r18, r19
 5a2:	fc 01       	movw	r30, r24
 5a4:	24 83       	std	Z+4, r18	; 0x04
 5a6:	00 00       	nop
 5a8:	0f 90       	pop	r0
 5aa:	df 91       	pop	r29
 5ac:	cf 91       	pop	r28
 5ae:	08 95       	ret

000005b0 <SpeakerInit>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "speaker.h"

void SpeakerInit(void)
{
 5b0:	cf 93       	push	r28
 5b2:	df 93       	push	r29
 5b4:	cd b7       	in	r28, 0x3d	; 61
 5b6:	de b7       	in	r29, 0x3e	; 62
		//TCC1.CTRLB=
		//TCC1.CTRLC=
		//TCC1.CTRLD=
		//TCC1.CTRLE=
		
}
 5b8:	00 00       	nop
 5ba:	df 91       	pop	r29
 5bc:	cf 91       	pop	r28
 5be:	08 95       	ret

000005c0 <SwitchInit>:
#include "switch.h"
#include <avr/io.h>

void SwitchInit(void)
{
 5c0:	cf 93       	push	r28
 5c2:	df 93       	push	r29
 5c4:	cd b7       	in	r28, 0x3d	; 61
 5c6:	de b7       	in	r29, 0x3e	; 62
	
	//This register sets the data direction for the individual pins of the port. If DIRn is written to one,
	//pin n is configured as an output pin. If DIRn is written to zero, pin n is configured as an input pin
	//PORTD.DIR &= 0b00001110; 
	PORTD.DIRSET |= 0b00001110; 
 5c8:	80 e6       	ldi	r24, 0x60	; 96
 5ca:	96 e0       	ldi	r25, 0x06	; 6
 5cc:	20 e6       	ldi	r18, 0x60	; 96
 5ce:	36 e0       	ldi	r19, 0x06	; 6
 5d0:	f9 01       	movw	r30, r18
 5d2:	21 81       	ldd	r18, Z+1	; 0x01
 5d4:	2e 60       	ori	r18, 0x0E	; 14
 5d6:	fc 01       	movw	r30, r24
 5d8:	21 83       	std	Z+1, r18	; 0x01

	//11.13.15 p124
	PORTD.PIN0CTRL= 0b01011001;		//Center
 5da:	80 e6       	ldi	r24, 0x60	; 96
 5dc:	96 e0       	ldi	r25, 0x06	; 6
 5de:	29 e5       	ldi	r18, 0x59	; 89
 5e0:	fc 01       	movw	r30, r24
 5e2:	20 8b       	std	Z+16, r18	; 0x10
	PORTD.PIN4CTRL= 0b01011001;		//Right
 5e4:	80 e6       	ldi	r24, 0x60	; 96
 5e6:	96 e0       	ldi	r25, 0x06	; 6
 5e8:	29 e5       	ldi	r18, 0x59	; 89
 5ea:	fc 01       	movw	r30, r24
 5ec:	24 8b       	std	Z+20, r18	; 0x14
	PORTD.PIN5CTRL= 0b01011001;		//Down
 5ee:	80 e6       	ldi	r24, 0x60	; 96
 5f0:	96 e0       	ldi	r25, 0x06	; 6
 5f2:	29 e5       	ldi	r18, 0x59	; 89
 5f4:	fc 01       	movw	r30, r24
 5f6:	25 8b       	std	Z+21, r18	; 0x15
	PORTD.PIN6CTRL= 0b01011001;		//Left
 5f8:	80 e6       	ldi	r24, 0x60	; 96
 5fa:	96 e0       	ldi	r25, 0x06	; 6
 5fc:	29 e5       	ldi	r18, 0x59	; 89
 5fe:	fc 01       	movw	r30, r24
 600:	26 8b       	std	Z+22, r18	; 0x16
	PORTD.PIN7CTRL= 0b01011001;		//Up
 602:	80 e6       	ldi	r24, 0x60	; 96
 604:	96 e0       	ldi	r25, 0x06	; 6
 606:	29 e5       	ldi	r18, 0x59	; 89
 608:	fc 01       	movw	r30, r24
 60a:	27 8b       	std	Z+23, r18	; 0x17
}
 60c:	00 00       	nop
 60e:	df 91       	pop	r29
 610:	cf 91       	pop	r28
 612:	08 95       	ret

00000614 <SwitchGet>:


char SwitchGet(void)
{
 614:	cf 93       	push	r28
 616:	df 93       	push	r29
 618:	1f 92       	push	r1
 61a:	cd b7       	in	r28, 0x3d	; 61
 61c:	de b7       	in	r29, 0x3e	; 62
	char input = PORTD.IN; 
 61e:	80 e6       	ldi	r24, 0x60	; 96
 620:	96 e0       	ldi	r25, 0x06	; 6
 622:	fc 01       	movw	r30, r24
 624:	80 85       	ldd	r24, Z+8	; 0x08
 626:	89 83       	std	Y+1, r24	; 0x01
	//PORTDIN looks like 11110001 'if everything would be pressed', the wanted format for ex.: xxx11111
	//To achieve this bitshift first 4 bits , 3 to the right and the bit on the right stays at the same place
	input = ((input & 0b11110000) >> 3) | (input & 0b00000001);
 628:	89 81       	ldd	r24, Y+1	; 0x01
 62a:	88 2f       	mov	r24, r24
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	80 7f       	andi	r24, 0xF0	; 240
 630:	99 27       	eor	r25, r25
 632:	95 95       	asr	r25
 634:	87 95       	ror	r24
 636:	95 95       	asr	r25
 638:	87 95       	ror	r24
 63a:	95 95       	asr	r25
 63c:	87 95       	ror	r24
 63e:	98 2f       	mov	r25, r24
 640:	89 81       	ldd	r24, Y+1	; 0x01
 642:	81 70       	andi	r24, 0x01	; 1
 644:	89 2b       	or	r24, r25
 646:	89 83       	std	Y+1, r24	; 0x01
	return input;
 648:	89 81       	ldd	r24, Y+1	; 0x01
}
 64a:	0f 90       	pop	r0
 64c:	df 91       	pop	r29
 64e:	cf 91       	pop	r28
 650:	08 95       	ret

00000652 <USARTInit>:
static int stdio_putchar(char c, FILE * stream);
static int stdio_getchar(FILE *stream);
static FILE UsartStdio = FDEV_SETUP_STREAM(stdio_putchar, stdio_getchar,_FDEV_SETUP_WRITE);

void USARTInit(void)
{
 652:	cf 93       	push	r28
 654:	df 93       	push	r29
 656:	cd b7       	in	r28, 0x3d	; 61
 658:	de b7       	in	r29, 0x3e	; 62
	USART_PORT.DIRSET=0b00001000;	//transmitlijn als output, receive lijn als input
 65a:	80 e4       	ldi	r24, 0x40	; 64
 65c:	96 e0       	ldi	r25, 0x06	; 6
 65e:	28 e0       	ldi	r18, 0x08	; 8
 660:	fc 01       	movw	r30, r24
 662:	21 83       	std	Z+1, r18	; 0x01
	USART_PORT.DIRCLR=0b00000100;
 664:	80 e4       	ldi	r24, 0x40	; 64
 666:	96 e0       	ldi	r25, 0x06	; 6
 668:	24 e0       	ldi	r18, 0x04	; 4
 66a:	fc 01       	movw	r30, r24
 66c:	22 83       	std	Z+2, r18	; 0x02
	
	USART.CTRLA=0b00000000; //polled mode = interrupts uitgeschakeld
 66e:	80 ea       	ldi	r24, 0xA0	; 160
 670:	98 e0       	ldi	r25, 0x08	; 8
 672:	fc 01       	movw	r30, r24
 674:	13 82       	std	Z+3, r1	; 0x03
	USART.CTRLB=0b00011000; //transmitter en reveicer aan, double speed comm uit
 676:	80 ea       	ldi	r24, 0xA0	; 160
 678:	98 e0       	ldi	r25, 0x08	; 8
 67a:	28 e1       	ldi	r18, 0x18	; 24
 67c:	fc 01       	movw	r30, r24
 67e:	24 83       	std	Z+4, r18	; 0x04
	USART.CTRLC=0b00000011; // USART in async mode
 680:	80 ea       	ldi	r24, 0xA0	; 160
 682:	98 e0       	ldi	r25, 0x08	; 8
 684:	23 e0       	ldi	r18, 0x03	; 3
 686:	fc 01       	movw	r30, r24
 688:	25 83       	std	Z+5, r18	; 0x05
	
	//USART.BAUDCTRLA=0xE5; //BSEL=3301, BSCALE=-5 9600 baud
	//USART.BAUDCTRLB=0xBC; 

	//BSEL=983=0011 1101 0111, BSCALE=-7=1001 --> 115200 baud [afwijking: 115211 baud]
	USART.BAUDCTRLA=0xD7; //1101 0111
 68a:	80 ea       	ldi	r24, 0xA0	; 160
 68c:	98 e0       	ldi	r25, 0x08	; 8
 68e:	27 ed       	ldi	r18, 0xD7	; 215
 690:	fc 01       	movw	r30, r24
 692:	26 83       	std	Z+6, r18	; 0x06
	USART.BAUDCTRLB=0x93; //1001 0011
 694:	80 ea       	ldi	r24, 0xA0	; 160
 696:	98 e0       	ldi	r25, 0x08	; 8
 698:	23 e9       	ldi	r18, 0x93	; 147
 69a:	fc 01       	movw	r30, r24
 69c:	27 83       	std	Z+7, r18	; 0x07
	
	stdout=&UsartStdio; // koppeling tussen drivercode en stdio lib
 69e:	80 e0       	ldi	r24, 0x00	; 0
 6a0:	90 e2       	ldi	r25, 0x20	; 32
 6a2:	80 93 90 20 	sts	0x2090, r24	; 0x802090 <__iob+0x2>
 6a6:	90 93 91 20 	sts	0x2091, r25	; 0x802091 <__iob+0x3>
	stdin=&UsartStdio;
 6aa:	80 e0       	ldi	r24, 0x00	; 0
 6ac:	90 e2       	ldi	r25, 0x20	; 32
 6ae:	80 93 8e 20 	sts	0x208E, r24	; 0x80208e <__iob>
 6b2:	90 93 8f 20 	sts	0x208F, r25	; 0x80208f <__iob+0x1>
}
 6b6:	00 00       	nop
 6b8:	df 91       	pop	r29
 6ba:	cf 91       	pop	r28
 6bc:	08 95       	ret

000006be <stdio_putchar>:

//vormt onderste laag van stdio lib
static int stdio_putchar(char c, FILE * stream) //1 byte over USART
{
 6be:	cf 93       	push	r28
 6c0:	df 93       	push	r29
 6c2:	00 d0       	rcall	.+0      	; 0x6c4 <stdio_putchar+0x6>
 6c4:	1f 92       	push	r1
 6c6:	cd b7       	in	r28, 0x3d	; 61
 6c8:	de b7       	in	r29, 0x3e	; 62
 6ca:	89 83       	std	Y+1, r24	; 0x01
 6cc:	6a 83       	std	Y+2, r22	; 0x02
 6ce:	7b 83       	std	Y+3, r23	; 0x03
	USART.DATA = 0x55;//USARTD --> c, USARTC --> 0x55 = 0101 0101
 6d0:	80 ea       	ldi	r24, 0xA0	; 160
 6d2:	98 e0       	ldi	r25, 0x08	; 8
 6d4:	25 e5       	ldi	r18, 0x55	; 85
 6d6:	fc 01       	movw	r30, r24
 6d8:	20 83       	st	Z, r18
	while (!(USART.STATUS & 0b01000000)); //wachten op TXCIF (Transmit Complete interrupt flag) = byte verzonden
 6da:	00 00       	nop
 6dc:	80 ea       	ldi	r24, 0xA0	; 160
 6de:	98 e0       	ldi	r25, 0x08	; 8
 6e0:	fc 01       	movw	r30, r24
 6e2:	81 81       	ldd	r24, Z+1	; 0x01
 6e4:	88 2f       	mov	r24, r24
 6e6:	90 e0       	ldi	r25, 0x00	; 0
 6e8:	80 74       	andi	r24, 0x40	; 64
 6ea:	99 27       	eor	r25, r25
 6ec:	89 2b       	or	r24, r25
 6ee:	b1 f3       	breq	.-20     	; 0x6dc <stdio_putchar+0x1e>
	USART.STATUS=0b01000000; //vlag op 0 voor volgende datatransfer
 6f0:	80 ea       	ldi	r24, 0xA0	; 160
 6f2:	98 e0       	ldi	r25, 0x08	; 8
 6f4:	20 e4       	ldi	r18, 0x40	; 64
 6f6:	fc 01       	movw	r30, r24
 6f8:	21 83       	std	Z+1, r18	; 0x01
	return 0;
 6fa:	80 e0       	ldi	r24, 0x00	; 0
 6fc:	90 e0       	ldi	r25, 0x00	; 0
}
 6fe:	23 96       	adiw	r28, 0x03	; 3
 700:	cd bf       	out	0x3d, r28	; 61
 702:	de bf       	out	0x3e, r29	; 62
 704:	df 91       	pop	r29
 706:	cf 91       	pop	r28
 708:	08 95       	ret

0000070a <stdio_getchar>:
	
static int stdio_getchar(FILE *stream)
{
 70a:	cf 93       	push	r28
 70c:	df 93       	push	r29
 70e:	00 d0       	rcall	.+0      	; 0x710 <stdio_getchar+0x6>
 710:	cd b7       	in	r28, 0x3d	; 61
 712:	de b7       	in	r29, 0x3e	; 62
 714:	89 83       	std	Y+1, r24	; 0x01
 716:	9a 83       	std	Y+2, r25	; 0x02
	while (!(USART.STATUS & 0b10000000)); //wacht tot er een byte in de receive buffer zit
 718:	00 00       	nop
 71a:	80 ea       	ldi	r24, 0xA0	; 160
 71c:	98 e0       	ldi	r25, 0x08	; 8
 71e:	fc 01       	movw	r30, r24
 720:	81 81       	ldd	r24, Z+1	; 0x01
 722:	88 23       	and	r24, r24
 724:	d4 f7       	brge	.-12     	; 0x71a <stdio_getchar+0x10>
	return USART.DATA;
 726:	80 ea       	ldi	r24, 0xA0	; 160
 728:	98 e0       	ldi	r25, 0x08	; 8
 72a:	fc 01       	movw	r30, r24
 72c:	80 81       	ld	r24, Z
 72e:	88 2f       	mov	r24, r24
 730:	90 e0       	ldi	r25, 0x00	; 0
}
 732:	0f 90       	pop	r0
 734:	0f 90       	pop	r0
 736:	df 91       	pop	r29
 738:	cf 91       	pop	r28
 73a:	08 95       	ret

0000073c <__cmpsf2>:
 73c:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <__fp_cmp>
 740:	08 f4       	brcc	.+2      	; 0x744 <__cmpsf2+0x8>
 742:	81 e0       	ldi	r24, 0x01	; 1
 744:	08 95       	ret

00000746 <__fixunssfsi>:
 746:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__fp_splitA>
 74a:	88 f0       	brcs	.+34     	; 0x76e <__fixunssfsi+0x28>
 74c:	9f 57       	subi	r25, 0x7F	; 127
 74e:	98 f0       	brcs	.+38     	; 0x776 <__fixunssfsi+0x30>
 750:	b9 2f       	mov	r27, r25
 752:	99 27       	eor	r25, r25
 754:	b7 51       	subi	r27, 0x17	; 23
 756:	b0 f0       	brcs	.+44     	; 0x784 <__fixunssfsi+0x3e>
 758:	e1 f0       	breq	.+56     	; 0x792 <__fixunssfsi+0x4c>
 75a:	66 0f       	add	r22, r22
 75c:	77 1f       	adc	r23, r23
 75e:	88 1f       	adc	r24, r24
 760:	99 1f       	adc	r25, r25
 762:	1a f0       	brmi	.+6      	; 0x76a <__fixunssfsi+0x24>
 764:	ba 95       	dec	r27
 766:	c9 f7       	brne	.-14     	; 0x75a <__fixunssfsi+0x14>
 768:	14 c0       	rjmp	.+40     	; 0x792 <__fixunssfsi+0x4c>
 76a:	b1 30       	cpi	r27, 0x01	; 1
 76c:	91 f0       	breq	.+36     	; 0x792 <__fixunssfsi+0x4c>
 76e:	0e 94 18 04 	call	0x830	; 0x830 <__fp_zero>
 772:	b1 e0       	ldi	r27, 0x01	; 1
 774:	08 95       	ret
 776:	0c 94 18 04 	jmp	0x830	; 0x830 <__fp_zero>
 77a:	67 2f       	mov	r22, r23
 77c:	78 2f       	mov	r23, r24
 77e:	88 27       	eor	r24, r24
 780:	b8 5f       	subi	r27, 0xF8	; 248
 782:	39 f0       	breq	.+14     	; 0x792 <__fixunssfsi+0x4c>
 784:	b9 3f       	cpi	r27, 0xF9	; 249
 786:	cc f3       	brlt	.-14     	; 0x77a <__fixunssfsi+0x34>
 788:	86 95       	lsr	r24
 78a:	77 95       	ror	r23
 78c:	67 95       	ror	r22
 78e:	b3 95       	inc	r27
 790:	d9 f7       	brne	.-10     	; 0x788 <__fixunssfsi+0x42>
 792:	3e f4       	brtc	.+14     	; 0x7a2 <__fixunssfsi+0x5c>
 794:	90 95       	com	r25
 796:	80 95       	com	r24
 798:	70 95       	com	r23
 79a:	61 95       	neg	r22
 79c:	7f 4f       	sbci	r23, 0xFF	; 255
 79e:	8f 4f       	sbci	r24, 0xFF	; 255
 7a0:	9f 4f       	sbci	r25, 0xFF	; 255
 7a2:	08 95       	ret

000007a4 <__fp_cmp>:
 7a4:	99 0f       	add	r25, r25
 7a6:	00 08       	sbc	r0, r0
 7a8:	55 0f       	add	r21, r21
 7aa:	aa 0b       	sbc	r26, r26
 7ac:	e0 e8       	ldi	r30, 0x80	; 128
 7ae:	fe ef       	ldi	r31, 0xFE	; 254
 7b0:	16 16       	cp	r1, r22
 7b2:	17 06       	cpc	r1, r23
 7b4:	e8 07       	cpc	r30, r24
 7b6:	f9 07       	cpc	r31, r25
 7b8:	c0 f0       	brcs	.+48     	; 0x7ea <__fp_cmp+0x46>
 7ba:	12 16       	cp	r1, r18
 7bc:	13 06       	cpc	r1, r19
 7be:	e4 07       	cpc	r30, r20
 7c0:	f5 07       	cpc	r31, r21
 7c2:	98 f0       	brcs	.+38     	; 0x7ea <__fp_cmp+0x46>
 7c4:	62 1b       	sub	r22, r18
 7c6:	73 0b       	sbc	r23, r19
 7c8:	84 0b       	sbc	r24, r20
 7ca:	95 0b       	sbc	r25, r21
 7cc:	39 f4       	brne	.+14     	; 0x7dc <__fp_cmp+0x38>
 7ce:	0a 26       	eor	r0, r26
 7d0:	61 f0       	breq	.+24     	; 0x7ea <__fp_cmp+0x46>
 7d2:	23 2b       	or	r18, r19
 7d4:	24 2b       	or	r18, r20
 7d6:	25 2b       	or	r18, r21
 7d8:	21 f4       	brne	.+8      	; 0x7e2 <__fp_cmp+0x3e>
 7da:	08 95       	ret
 7dc:	0a 26       	eor	r0, r26
 7de:	09 f4       	brne	.+2      	; 0x7e2 <__fp_cmp+0x3e>
 7e0:	a1 40       	sbci	r26, 0x01	; 1
 7e2:	a6 95       	lsr	r26
 7e4:	8f ef       	ldi	r24, 0xFF	; 255
 7e6:	81 1d       	adc	r24, r1
 7e8:	81 1d       	adc	r24, r1
 7ea:	08 95       	ret

000007ec <__fp_split3>:
 7ec:	57 fd       	sbrc	r21, 7
 7ee:	90 58       	subi	r25, 0x80	; 128
 7f0:	44 0f       	add	r20, r20
 7f2:	55 1f       	adc	r21, r21
 7f4:	59 f0       	breq	.+22     	; 0x80c <__fp_splitA+0x10>
 7f6:	5f 3f       	cpi	r21, 0xFF	; 255
 7f8:	71 f0       	breq	.+28     	; 0x816 <__fp_splitA+0x1a>
 7fa:	47 95       	ror	r20

000007fc <__fp_splitA>:
 7fc:	88 0f       	add	r24, r24
 7fe:	97 fb       	bst	r25, 7
 800:	99 1f       	adc	r25, r25
 802:	61 f0       	breq	.+24     	; 0x81c <__fp_splitA+0x20>
 804:	9f 3f       	cpi	r25, 0xFF	; 255
 806:	79 f0       	breq	.+30     	; 0x826 <__fp_splitA+0x2a>
 808:	87 95       	ror	r24
 80a:	08 95       	ret
 80c:	12 16       	cp	r1, r18
 80e:	13 06       	cpc	r1, r19
 810:	14 06       	cpc	r1, r20
 812:	55 1f       	adc	r21, r21
 814:	f2 cf       	rjmp	.-28     	; 0x7fa <__fp_split3+0xe>
 816:	46 95       	lsr	r20
 818:	f1 df       	rcall	.-30     	; 0x7fc <__fp_splitA>
 81a:	08 c0       	rjmp	.+16     	; 0x82c <__fp_splitA+0x30>
 81c:	16 16       	cp	r1, r22
 81e:	17 06       	cpc	r1, r23
 820:	18 06       	cpc	r1, r24
 822:	99 1f       	adc	r25, r25
 824:	f1 cf       	rjmp	.-30     	; 0x808 <__fp_splitA+0xc>
 826:	86 95       	lsr	r24
 828:	71 05       	cpc	r23, r1
 82a:	61 05       	cpc	r22, r1
 82c:	08 94       	sec
 82e:	08 95       	ret

00000830 <__fp_zero>:
 830:	e8 94       	clt

00000832 <__fp_szero>:
 832:	bb 27       	eor	r27, r27
 834:	66 27       	eor	r22, r22
 836:	77 27       	eor	r23, r23
 838:	cb 01       	movw	r24, r22
 83a:	97 f9       	bld	r25, 7
 83c:	08 95       	ret

0000083e <__gesf2>:
 83e:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <__fp_cmp>
 842:	08 f4       	brcc	.+2      	; 0x846 <__gesf2+0x8>
 844:	8f ef       	ldi	r24, 0xFF	; 255
 846:	08 95       	ret

00000848 <__mulsf3>:
 848:	0e 94 37 04 	call	0x86e	; 0x86e <__mulsf3x>
 84c:	0c 94 a8 04 	jmp	0x950	; 0x950 <__fp_round>
 850:	0e 94 9a 04 	call	0x934	; 0x934 <__fp_pscA>
 854:	38 f0       	brcs	.+14     	; 0x864 <__mulsf3+0x1c>
 856:	0e 94 a1 04 	call	0x942	; 0x942 <__fp_pscB>
 85a:	20 f0       	brcs	.+8      	; 0x864 <__mulsf3+0x1c>
 85c:	95 23       	and	r25, r21
 85e:	11 f0       	breq	.+4      	; 0x864 <__mulsf3+0x1c>
 860:	0c 94 91 04 	jmp	0x922	; 0x922 <__fp_inf>
 864:	0c 94 97 04 	jmp	0x92e	; 0x92e <__fp_nan>
 868:	11 24       	eor	r1, r1
 86a:	0c 94 19 04 	jmp	0x832	; 0x832 <__fp_szero>

0000086e <__mulsf3x>:
 86e:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__fp_split3>
 872:	70 f3       	brcs	.-36     	; 0x850 <__mulsf3+0x8>

00000874 <__mulsf3_pse>:
 874:	95 9f       	mul	r25, r21
 876:	c1 f3       	breq	.-16     	; 0x868 <__mulsf3+0x20>
 878:	95 0f       	add	r25, r21
 87a:	50 e0       	ldi	r21, 0x00	; 0
 87c:	55 1f       	adc	r21, r21
 87e:	62 9f       	mul	r22, r18
 880:	f0 01       	movw	r30, r0
 882:	72 9f       	mul	r23, r18
 884:	bb 27       	eor	r27, r27
 886:	f0 0d       	add	r31, r0
 888:	b1 1d       	adc	r27, r1
 88a:	63 9f       	mul	r22, r19
 88c:	aa 27       	eor	r26, r26
 88e:	f0 0d       	add	r31, r0
 890:	b1 1d       	adc	r27, r1
 892:	aa 1f       	adc	r26, r26
 894:	64 9f       	mul	r22, r20
 896:	66 27       	eor	r22, r22
 898:	b0 0d       	add	r27, r0
 89a:	a1 1d       	adc	r26, r1
 89c:	66 1f       	adc	r22, r22
 89e:	82 9f       	mul	r24, r18
 8a0:	22 27       	eor	r18, r18
 8a2:	b0 0d       	add	r27, r0
 8a4:	a1 1d       	adc	r26, r1
 8a6:	62 1f       	adc	r22, r18
 8a8:	73 9f       	mul	r23, r19
 8aa:	b0 0d       	add	r27, r0
 8ac:	a1 1d       	adc	r26, r1
 8ae:	62 1f       	adc	r22, r18
 8b0:	83 9f       	mul	r24, r19
 8b2:	a0 0d       	add	r26, r0
 8b4:	61 1d       	adc	r22, r1
 8b6:	22 1f       	adc	r18, r18
 8b8:	74 9f       	mul	r23, r20
 8ba:	33 27       	eor	r19, r19
 8bc:	a0 0d       	add	r26, r0
 8be:	61 1d       	adc	r22, r1
 8c0:	23 1f       	adc	r18, r19
 8c2:	84 9f       	mul	r24, r20
 8c4:	60 0d       	add	r22, r0
 8c6:	21 1d       	adc	r18, r1
 8c8:	82 2f       	mov	r24, r18
 8ca:	76 2f       	mov	r23, r22
 8cc:	6a 2f       	mov	r22, r26
 8ce:	11 24       	eor	r1, r1
 8d0:	9f 57       	subi	r25, 0x7F	; 127
 8d2:	50 40       	sbci	r21, 0x00	; 0
 8d4:	9a f0       	brmi	.+38     	; 0x8fc <__mulsf3_pse+0x88>
 8d6:	f1 f0       	breq	.+60     	; 0x914 <__mulsf3_pse+0xa0>
 8d8:	88 23       	and	r24, r24
 8da:	4a f0       	brmi	.+18     	; 0x8ee <__mulsf3_pse+0x7a>
 8dc:	ee 0f       	add	r30, r30
 8de:	ff 1f       	adc	r31, r31
 8e0:	bb 1f       	adc	r27, r27
 8e2:	66 1f       	adc	r22, r22
 8e4:	77 1f       	adc	r23, r23
 8e6:	88 1f       	adc	r24, r24
 8e8:	91 50       	subi	r25, 0x01	; 1
 8ea:	50 40       	sbci	r21, 0x00	; 0
 8ec:	a9 f7       	brne	.-22     	; 0x8d8 <__mulsf3_pse+0x64>
 8ee:	9e 3f       	cpi	r25, 0xFE	; 254
 8f0:	51 05       	cpc	r21, r1
 8f2:	80 f0       	brcs	.+32     	; 0x914 <__mulsf3_pse+0xa0>
 8f4:	0c 94 91 04 	jmp	0x922	; 0x922 <__fp_inf>
 8f8:	0c 94 19 04 	jmp	0x832	; 0x832 <__fp_szero>
 8fc:	5f 3f       	cpi	r21, 0xFF	; 255
 8fe:	e4 f3       	brlt	.-8      	; 0x8f8 <__mulsf3_pse+0x84>
 900:	98 3e       	cpi	r25, 0xE8	; 232
 902:	d4 f3       	brlt	.-12     	; 0x8f8 <__mulsf3_pse+0x84>
 904:	86 95       	lsr	r24
 906:	77 95       	ror	r23
 908:	67 95       	ror	r22
 90a:	b7 95       	ror	r27
 90c:	f7 95       	ror	r31
 90e:	e7 95       	ror	r30
 910:	9f 5f       	subi	r25, 0xFF	; 255
 912:	c1 f7       	brne	.-16     	; 0x904 <__mulsf3_pse+0x90>
 914:	fe 2b       	or	r31, r30
 916:	88 0f       	add	r24, r24
 918:	91 1d       	adc	r25, r1
 91a:	96 95       	lsr	r25
 91c:	87 95       	ror	r24
 91e:	97 f9       	bld	r25, 7
 920:	08 95       	ret

00000922 <__fp_inf>:
 922:	97 f9       	bld	r25, 7
 924:	9f 67       	ori	r25, 0x7F	; 127
 926:	80 e8       	ldi	r24, 0x80	; 128
 928:	70 e0       	ldi	r23, 0x00	; 0
 92a:	60 e0       	ldi	r22, 0x00	; 0
 92c:	08 95       	ret

0000092e <__fp_nan>:
 92e:	9f ef       	ldi	r25, 0xFF	; 255
 930:	80 ec       	ldi	r24, 0xC0	; 192
 932:	08 95       	ret

00000934 <__fp_pscA>:
 934:	00 24       	eor	r0, r0
 936:	0a 94       	dec	r0
 938:	16 16       	cp	r1, r22
 93a:	17 06       	cpc	r1, r23
 93c:	18 06       	cpc	r1, r24
 93e:	09 06       	cpc	r0, r25
 940:	08 95       	ret

00000942 <__fp_pscB>:
 942:	00 24       	eor	r0, r0
 944:	0a 94       	dec	r0
 946:	12 16       	cp	r1, r18
 948:	13 06       	cpc	r1, r19
 94a:	14 06       	cpc	r1, r20
 94c:	05 06       	cpc	r0, r21
 94e:	08 95       	ret

00000950 <__fp_round>:
 950:	09 2e       	mov	r0, r25
 952:	03 94       	inc	r0
 954:	00 0c       	add	r0, r0
 956:	11 f4       	brne	.+4      	; 0x95c <__fp_round+0xc>
 958:	88 23       	and	r24, r24
 95a:	52 f0       	brmi	.+20     	; 0x970 <__fp_round+0x20>
 95c:	bb 0f       	add	r27, r27
 95e:	40 f4       	brcc	.+16     	; 0x970 <__fp_round+0x20>
 960:	bf 2b       	or	r27, r31
 962:	11 f4       	brne	.+4      	; 0x968 <__fp_round+0x18>
 964:	60 ff       	sbrs	r22, 0
 966:	04 c0       	rjmp	.+8      	; 0x970 <__fp_round+0x20>
 968:	6f 5f       	subi	r22, 0xFF	; 255
 96a:	7f 4f       	sbci	r23, 0xFF	; 255
 96c:	8f 4f       	sbci	r24, 0xFF	; 255
 96e:	9f 4f       	sbci	r25, 0xFF	; 255
 970:	08 95       	ret

00000972 <printf>:
 972:	a0 e0       	ldi	r26, 0x00	; 0
 974:	b0 e0       	ldi	r27, 0x00	; 0
 976:	ef eb       	ldi	r30, 0xBF	; 191
 978:	f4 e0       	ldi	r31, 0x04	; 4
 97a:	0c 94 c2 07 	jmp	0xf84	; 0xf84 <__prologue_saves__+0x20>
 97e:	ae 01       	movw	r20, r28
 980:	4b 5f       	subi	r20, 0xFB	; 251
 982:	5f 4f       	sbci	r21, 0xFF	; 255
 984:	fa 01       	movw	r30, r20
 986:	61 91       	ld	r22, Z+
 988:	71 91       	ld	r23, Z+
 98a:	af 01       	movw	r20, r30
 98c:	80 91 90 20 	lds	r24, 0x2090	; 0x802090 <__iob+0x2>
 990:	90 91 91 20 	lds	r25, 0x2091	; 0x802091 <__iob+0x3>
 994:	0e 94 21 05 	call	0xa42	; 0xa42 <vfprintf>
 998:	e2 e0       	ldi	r30, 0x02	; 2
 99a:	0c 94 db 07 	jmp	0xfb6	; 0xfb6 <__epilogue_restores__+0x20>

0000099e <puts>:
 99e:	0f 93       	push	r16
 9a0:	1f 93       	push	r17
 9a2:	cf 93       	push	r28
 9a4:	df 93       	push	r29
 9a6:	e0 91 90 20 	lds	r30, 0x2090	; 0x802090 <__iob+0x2>
 9aa:	f0 91 91 20 	lds	r31, 0x2091	; 0x802091 <__iob+0x3>
 9ae:	23 81       	ldd	r18, Z+3	; 0x03
 9b0:	21 ff       	sbrs	r18, 1
 9b2:	1b c0       	rjmp	.+54     	; 0x9ea <puts+0x4c>
 9b4:	8c 01       	movw	r16, r24
 9b6:	d0 e0       	ldi	r29, 0x00	; 0
 9b8:	c0 e0       	ldi	r28, 0x00	; 0
 9ba:	f8 01       	movw	r30, r16
 9bc:	81 91       	ld	r24, Z+
 9be:	8f 01       	movw	r16, r30
 9c0:	60 91 90 20 	lds	r22, 0x2090	; 0x802090 <__iob+0x2>
 9c4:	70 91 91 20 	lds	r23, 0x2091	; 0x802091 <__iob+0x3>
 9c8:	db 01       	movw	r26, r22
 9ca:	18 96       	adiw	r26, 0x08	; 8
 9cc:	ed 91       	ld	r30, X+
 9ce:	fc 91       	ld	r31, X
 9d0:	19 97       	sbiw	r26, 0x09	; 9
 9d2:	88 23       	and	r24, r24
 9d4:	31 f0       	breq	.+12     	; 0x9e2 <puts+0x44>
 9d6:	09 95       	icall
 9d8:	89 2b       	or	r24, r25
 9da:	79 f3       	breq	.-34     	; 0x9ba <puts+0x1c>
 9dc:	df ef       	ldi	r29, 0xFF	; 255
 9de:	cf ef       	ldi	r28, 0xFF	; 255
 9e0:	ec cf       	rjmp	.-40     	; 0x9ba <puts+0x1c>
 9e2:	8a e0       	ldi	r24, 0x0A	; 10
 9e4:	09 95       	icall
 9e6:	89 2b       	or	r24, r25
 9e8:	19 f0       	breq	.+6      	; 0x9f0 <puts+0x52>
 9ea:	8f ef       	ldi	r24, 0xFF	; 255
 9ec:	9f ef       	ldi	r25, 0xFF	; 255
 9ee:	02 c0       	rjmp	.+4      	; 0x9f4 <puts+0x56>
 9f0:	8d 2f       	mov	r24, r29
 9f2:	9c 2f       	mov	r25, r28
 9f4:	df 91       	pop	r29
 9f6:	cf 91       	pop	r28
 9f8:	1f 91       	pop	r17
 9fa:	0f 91       	pop	r16
 9fc:	08 95       	ret

000009fe <sprintf>:
 9fe:	ae e0       	ldi	r26, 0x0E	; 14
 a00:	b0 e0       	ldi	r27, 0x00	; 0
 a02:	e5 e0       	ldi	r30, 0x05	; 5
 a04:	f5 e0       	ldi	r31, 0x05	; 5
 a06:	0c 94 c0 07 	jmp	0xf80	; 0xf80 <__prologue_saves__+0x1c>
 a0a:	0d 89       	ldd	r16, Y+21	; 0x15
 a0c:	1e 89       	ldd	r17, Y+22	; 0x16
 a0e:	86 e0       	ldi	r24, 0x06	; 6
 a10:	8c 83       	std	Y+4, r24	; 0x04
 a12:	09 83       	std	Y+1, r16	; 0x01
 a14:	1a 83       	std	Y+2, r17	; 0x02
 a16:	8f ef       	ldi	r24, 0xFF	; 255
 a18:	9f e7       	ldi	r25, 0x7F	; 127
 a1a:	8d 83       	std	Y+5, r24	; 0x05
 a1c:	9e 83       	std	Y+6, r25	; 0x06
 a1e:	ae 01       	movw	r20, r28
 a20:	47 5e       	subi	r20, 0xE7	; 231
 a22:	5f 4f       	sbci	r21, 0xFF	; 255
 a24:	6f 89       	ldd	r22, Y+23	; 0x17
 a26:	78 8d       	ldd	r23, Y+24	; 0x18
 a28:	ce 01       	movw	r24, r28
 a2a:	01 96       	adiw	r24, 0x01	; 1
 a2c:	0e 94 21 05 	call	0xa42	; 0xa42 <vfprintf>
 a30:	ef 81       	ldd	r30, Y+7	; 0x07
 a32:	f8 85       	ldd	r31, Y+8	; 0x08
 a34:	e0 0f       	add	r30, r16
 a36:	f1 1f       	adc	r31, r17
 a38:	10 82       	st	Z, r1
 a3a:	2e 96       	adiw	r28, 0x0e	; 14
 a3c:	e4 e0       	ldi	r30, 0x04	; 4
 a3e:	0c 94 d9 07 	jmp	0xfb2	; 0xfb2 <__epilogue_restores__+0x1c>

00000a42 <vfprintf>:
 a42:	ab e0       	ldi	r26, 0x0B	; 11
 a44:	b0 e0       	ldi	r27, 0x00	; 0
 a46:	e7 e2       	ldi	r30, 0x27	; 39
 a48:	f5 e0       	ldi	r31, 0x05	; 5
 a4a:	0c 94 b2 07 	jmp	0xf64	; 0xf64 <__prologue_saves__>
 a4e:	6c 01       	movw	r12, r24
 a50:	7b 01       	movw	r14, r22
 a52:	8a 01       	movw	r16, r20
 a54:	fc 01       	movw	r30, r24
 a56:	16 82       	std	Z+6, r1	; 0x06
 a58:	17 82       	std	Z+7, r1	; 0x07
 a5a:	83 81       	ldd	r24, Z+3	; 0x03
 a5c:	81 ff       	sbrs	r24, 1
 a5e:	cc c1       	rjmp	.+920    	; 0xdf8 <vfprintf+0x3b6>
 a60:	ce 01       	movw	r24, r28
 a62:	01 96       	adiw	r24, 0x01	; 1
 a64:	3c 01       	movw	r6, r24
 a66:	f6 01       	movw	r30, r12
 a68:	93 81       	ldd	r25, Z+3	; 0x03
 a6a:	f7 01       	movw	r30, r14
 a6c:	93 fd       	sbrc	r25, 3
 a6e:	85 91       	lpm	r24, Z+
 a70:	93 ff       	sbrs	r25, 3
 a72:	81 91       	ld	r24, Z+
 a74:	7f 01       	movw	r14, r30
 a76:	88 23       	and	r24, r24
 a78:	09 f4       	brne	.+2      	; 0xa7c <vfprintf+0x3a>
 a7a:	ba c1       	rjmp	.+884    	; 0xdf0 <vfprintf+0x3ae>
 a7c:	85 32       	cpi	r24, 0x25	; 37
 a7e:	39 f4       	brne	.+14     	; 0xa8e <vfprintf+0x4c>
 a80:	93 fd       	sbrc	r25, 3
 a82:	85 91       	lpm	r24, Z+
 a84:	93 ff       	sbrs	r25, 3
 a86:	81 91       	ld	r24, Z+
 a88:	7f 01       	movw	r14, r30
 a8a:	85 32       	cpi	r24, 0x25	; 37
 a8c:	29 f4       	brne	.+10     	; 0xa98 <vfprintf+0x56>
 a8e:	b6 01       	movw	r22, r12
 a90:	90 e0       	ldi	r25, 0x00	; 0
 a92:	0e 94 18 07 	call	0xe30	; 0xe30 <fputc>
 a96:	e7 cf       	rjmp	.-50     	; 0xa66 <vfprintf+0x24>
 a98:	91 2c       	mov	r9, r1
 a9a:	21 2c       	mov	r2, r1
 a9c:	31 2c       	mov	r3, r1
 a9e:	ff e1       	ldi	r31, 0x1F	; 31
 aa0:	f3 15       	cp	r31, r3
 aa2:	d8 f0       	brcs	.+54     	; 0xada <vfprintf+0x98>
 aa4:	8b 32       	cpi	r24, 0x2B	; 43
 aa6:	79 f0       	breq	.+30     	; 0xac6 <vfprintf+0x84>
 aa8:	38 f4       	brcc	.+14     	; 0xab8 <vfprintf+0x76>
 aaa:	80 32       	cpi	r24, 0x20	; 32
 aac:	79 f0       	breq	.+30     	; 0xacc <vfprintf+0x8a>
 aae:	83 32       	cpi	r24, 0x23	; 35
 ab0:	a1 f4       	brne	.+40     	; 0xada <vfprintf+0x98>
 ab2:	23 2d       	mov	r18, r3
 ab4:	20 61       	ori	r18, 0x10	; 16
 ab6:	1d c0       	rjmp	.+58     	; 0xaf2 <vfprintf+0xb0>
 ab8:	8d 32       	cpi	r24, 0x2D	; 45
 aba:	61 f0       	breq	.+24     	; 0xad4 <vfprintf+0x92>
 abc:	80 33       	cpi	r24, 0x30	; 48
 abe:	69 f4       	brne	.+26     	; 0xada <vfprintf+0x98>
 ac0:	23 2d       	mov	r18, r3
 ac2:	21 60       	ori	r18, 0x01	; 1
 ac4:	16 c0       	rjmp	.+44     	; 0xaf2 <vfprintf+0xb0>
 ac6:	83 2d       	mov	r24, r3
 ac8:	82 60       	ori	r24, 0x02	; 2
 aca:	38 2e       	mov	r3, r24
 acc:	e3 2d       	mov	r30, r3
 ace:	e4 60       	ori	r30, 0x04	; 4
 ad0:	3e 2e       	mov	r3, r30
 ad2:	2a c0       	rjmp	.+84     	; 0xb28 <vfprintf+0xe6>
 ad4:	f3 2d       	mov	r31, r3
 ad6:	f8 60       	ori	r31, 0x08	; 8
 ad8:	1d c0       	rjmp	.+58     	; 0xb14 <vfprintf+0xd2>
 ada:	37 fc       	sbrc	r3, 7
 adc:	2d c0       	rjmp	.+90     	; 0xb38 <vfprintf+0xf6>
 ade:	20 ed       	ldi	r18, 0xD0	; 208
 ae0:	28 0f       	add	r18, r24
 ae2:	2a 30       	cpi	r18, 0x0A	; 10
 ae4:	40 f0       	brcs	.+16     	; 0xaf6 <vfprintf+0xb4>
 ae6:	8e 32       	cpi	r24, 0x2E	; 46
 ae8:	b9 f4       	brne	.+46     	; 0xb18 <vfprintf+0xd6>
 aea:	36 fc       	sbrc	r3, 6
 aec:	81 c1       	rjmp	.+770    	; 0xdf0 <vfprintf+0x3ae>
 aee:	23 2d       	mov	r18, r3
 af0:	20 64       	ori	r18, 0x40	; 64
 af2:	32 2e       	mov	r3, r18
 af4:	19 c0       	rjmp	.+50     	; 0xb28 <vfprintf+0xe6>
 af6:	36 fe       	sbrs	r3, 6
 af8:	06 c0       	rjmp	.+12     	; 0xb06 <vfprintf+0xc4>
 afa:	8a e0       	ldi	r24, 0x0A	; 10
 afc:	98 9e       	mul	r9, r24
 afe:	20 0d       	add	r18, r0
 b00:	11 24       	eor	r1, r1
 b02:	92 2e       	mov	r9, r18
 b04:	11 c0       	rjmp	.+34     	; 0xb28 <vfprintf+0xe6>
 b06:	ea e0       	ldi	r30, 0x0A	; 10
 b08:	2e 9e       	mul	r2, r30
 b0a:	20 0d       	add	r18, r0
 b0c:	11 24       	eor	r1, r1
 b0e:	22 2e       	mov	r2, r18
 b10:	f3 2d       	mov	r31, r3
 b12:	f0 62       	ori	r31, 0x20	; 32
 b14:	3f 2e       	mov	r3, r31
 b16:	08 c0       	rjmp	.+16     	; 0xb28 <vfprintf+0xe6>
 b18:	8c 36       	cpi	r24, 0x6C	; 108
 b1a:	21 f4       	brne	.+8      	; 0xb24 <vfprintf+0xe2>
 b1c:	83 2d       	mov	r24, r3
 b1e:	80 68       	ori	r24, 0x80	; 128
 b20:	38 2e       	mov	r3, r24
 b22:	02 c0       	rjmp	.+4      	; 0xb28 <vfprintf+0xe6>
 b24:	88 36       	cpi	r24, 0x68	; 104
 b26:	41 f4       	brne	.+16     	; 0xb38 <vfprintf+0xf6>
 b28:	f7 01       	movw	r30, r14
 b2a:	93 fd       	sbrc	r25, 3
 b2c:	85 91       	lpm	r24, Z+
 b2e:	93 ff       	sbrs	r25, 3
 b30:	81 91       	ld	r24, Z+
 b32:	7f 01       	movw	r14, r30
 b34:	81 11       	cpse	r24, r1
 b36:	b3 cf       	rjmp	.-154    	; 0xa9e <vfprintf+0x5c>
 b38:	98 2f       	mov	r25, r24
 b3a:	9f 7d       	andi	r25, 0xDF	; 223
 b3c:	95 54       	subi	r25, 0x45	; 69
 b3e:	93 30       	cpi	r25, 0x03	; 3
 b40:	28 f4       	brcc	.+10     	; 0xb4c <vfprintf+0x10a>
 b42:	0c 5f       	subi	r16, 0xFC	; 252
 b44:	1f 4f       	sbci	r17, 0xFF	; 255
 b46:	9f e3       	ldi	r25, 0x3F	; 63
 b48:	99 83       	std	Y+1, r25	; 0x01
 b4a:	0d c0       	rjmp	.+26     	; 0xb66 <vfprintf+0x124>
 b4c:	83 36       	cpi	r24, 0x63	; 99
 b4e:	31 f0       	breq	.+12     	; 0xb5c <vfprintf+0x11a>
 b50:	83 37       	cpi	r24, 0x73	; 115
 b52:	71 f0       	breq	.+28     	; 0xb70 <vfprintf+0x12e>
 b54:	83 35       	cpi	r24, 0x53	; 83
 b56:	09 f0       	breq	.+2      	; 0xb5a <vfprintf+0x118>
 b58:	59 c0       	rjmp	.+178    	; 0xc0c <vfprintf+0x1ca>
 b5a:	21 c0       	rjmp	.+66     	; 0xb9e <vfprintf+0x15c>
 b5c:	f8 01       	movw	r30, r16
 b5e:	80 81       	ld	r24, Z
 b60:	89 83       	std	Y+1, r24	; 0x01
 b62:	0e 5f       	subi	r16, 0xFE	; 254
 b64:	1f 4f       	sbci	r17, 0xFF	; 255
 b66:	88 24       	eor	r8, r8
 b68:	83 94       	inc	r8
 b6a:	91 2c       	mov	r9, r1
 b6c:	53 01       	movw	r10, r6
 b6e:	13 c0       	rjmp	.+38     	; 0xb96 <vfprintf+0x154>
 b70:	28 01       	movw	r4, r16
 b72:	f2 e0       	ldi	r31, 0x02	; 2
 b74:	4f 0e       	add	r4, r31
 b76:	51 1c       	adc	r5, r1
 b78:	f8 01       	movw	r30, r16
 b7a:	a0 80       	ld	r10, Z
 b7c:	b1 80       	ldd	r11, Z+1	; 0x01
 b7e:	36 fe       	sbrs	r3, 6
 b80:	03 c0       	rjmp	.+6      	; 0xb88 <vfprintf+0x146>
 b82:	69 2d       	mov	r22, r9
 b84:	70 e0       	ldi	r23, 0x00	; 0
 b86:	02 c0       	rjmp	.+4      	; 0xb8c <vfprintf+0x14a>
 b88:	6f ef       	ldi	r22, 0xFF	; 255
 b8a:	7f ef       	ldi	r23, 0xFF	; 255
 b8c:	c5 01       	movw	r24, r10
 b8e:	0e 94 0d 07 	call	0xe1a	; 0xe1a <strnlen>
 b92:	4c 01       	movw	r8, r24
 b94:	82 01       	movw	r16, r4
 b96:	f3 2d       	mov	r31, r3
 b98:	ff 77       	andi	r31, 0x7F	; 127
 b9a:	3f 2e       	mov	r3, r31
 b9c:	16 c0       	rjmp	.+44     	; 0xbca <vfprintf+0x188>
 b9e:	28 01       	movw	r4, r16
 ba0:	22 e0       	ldi	r18, 0x02	; 2
 ba2:	42 0e       	add	r4, r18
 ba4:	51 1c       	adc	r5, r1
 ba6:	f8 01       	movw	r30, r16
 ba8:	a0 80       	ld	r10, Z
 baa:	b1 80       	ldd	r11, Z+1	; 0x01
 bac:	36 fe       	sbrs	r3, 6
 bae:	03 c0       	rjmp	.+6      	; 0xbb6 <vfprintf+0x174>
 bb0:	69 2d       	mov	r22, r9
 bb2:	70 e0       	ldi	r23, 0x00	; 0
 bb4:	02 c0       	rjmp	.+4      	; 0xbba <vfprintf+0x178>
 bb6:	6f ef       	ldi	r22, 0xFF	; 255
 bb8:	7f ef       	ldi	r23, 0xFF	; 255
 bba:	c5 01       	movw	r24, r10
 bbc:	0e 94 02 07 	call	0xe04	; 0xe04 <strnlen_P>
 bc0:	4c 01       	movw	r8, r24
 bc2:	f3 2d       	mov	r31, r3
 bc4:	f0 68       	ori	r31, 0x80	; 128
 bc6:	3f 2e       	mov	r3, r31
 bc8:	82 01       	movw	r16, r4
 bca:	33 fc       	sbrc	r3, 3
 bcc:	1b c0       	rjmp	.+54     	; 0xc04 <vfprintf+0x1c2>
 bce:	82 2d       	mov	r24, r2
 bd0:	90 e0       	ldi	r25, 0x00	; 0
 bd2:	88 16       	cp	r8, r24
 bd4:	99 06       	cpc	r9, r25
 bd6:	b0 f4       	brcc	.+44     	; 0xc04 <vfprintf+0x1c2>
 bd8:	b6 01       	movw	r22, r12
 bda:	80 e2       	ldi	r24, 0x20	; 32
 bdc:	90 e0       	ldi	r25, 0x00	; 0
 bde:	0e 94 18 07 	call	0xe30	; 0xe30 <fputc>
 be2:	2a 94       	dec	r2
 be4:	f4 cf       	rjmp	.-24     	; 0xbce <vfprintf+0x18c>
 be6:	f5 01       	movw	r30, r10
 be8:	37 fc       	sbrc	r3, 7
 bea:	85 91       	lpm	r24, Z+
 bec:	37 fe       	sbrs	r3, 7
 bee:	81 91       	ld	r24, Z+
 bf0:	5f 01       	movw	r10, r30
 bf2:	b6 01       	movw	r22, r12
 bf4:	90 e0       	ldi	r25, 0x00	; 0
 bf6:	0e 94 18 07 	call	0xe30	; 0xe30 <fputc>
 bfa:	21 10       	cpse	r2, r1
 bfc:	2a 94       	dec	r2
 bfe:	21 e0       	ldi	r18, 0x01	; 1
 c00:	82 1a       	sub	r8, r18
 c02:	91 08       	sbc	r9, r1
 c04:	81 14       	cp	r8, r1
 c06:	91 04       	cpc	r9, r1
 c08:	71 f7       	brne	.-36     	; 0xbe6 <vfprintf+0x1a4>
 c0a:	e8 c0       	rjmp	.+464    	; 0xddc <vfprintf+0x39a>
 c0c:	84 36       	cpi	r24, 0x64	; 100
 c0e:	11 f0       	breq	.+4      	; 0xc14 <vfprintf+0x1d2>
 c10:	89 36       	cpi	r24, 0x69	; 105
 c12:	41 f5       	brne	.+80     	; 0xc64 <vfprintf+0x222>
 c14:	f8 01       	movw	r30, r16
 c16:	37 fe       	sbrs	r3, 7
 c18:	07 c0       	rjmp	.+14     	; 0xc28 <vfprintf+0x1e6>
 c1a:	60 81       	ld	r22, Z
 c1c:	71 81       	ldd	r23, Z+1	; 0x01
 c1e:	82 81       	ldd	r24, Z+2	; 0x02
 c20:	93 81       	ldd	r25, Z+3	; 0x03
 c22:	0c 5f       	subi	r16, 0xFC	; 252
 c24:	1f 4f       	sbci	r17, 0xFF	; 255
 c26:	08 c0       	rjmp	.+16     	; 0xc38 <vfprintf+0x1f6>
 c28:	60 81       	ld	r22, Z
 c2a:	71 81       	ldd	r23, Z+1	; 0x01
 c2c:	07 2e       	mov	r0, r23
 c2e:	00 0c       	add	r0, r0
 c30:	88 0b       	sbc	r24, r24
 c32:	99 0b       	sbc	r25, r25
 c34:	0e 5f       	subi	r16, 0xFE	; 254
 c36:	1f 4f       	sbci	r17, 0xFF	; 255
 c38:	f3 2d       	mov	r31, r3
 c3a:	ff 76       	andi	r31, 0x6F	; 111
 c3c:	3f 2e       	mov	r3, r31
 c3e:	97 ff       	sbrs	r25, 7
 c40:	09 c0       	rjmp	.+18     	; 0xc54 <vfprintf+0x212>
 c42:	90 95       	com	r25
 c44:	80 95       	com	r24
 c46:	70 95       	com	r23
 c48:	61 95       	neg	r22
 c4a:	7f 4f       	sbci	r23, 0xFF	; 255
 c4c:	8f 4f       	sbci	r24, 0xFF	; 255
 c4e:	9f 4f       	sbci	r25, 0xFF	; 255
 c50:	f0 68       	ori	r31, 0x80	; 128
 c52:	3f 2e       	mov	r3, r31
 c54:	2a e0       	ldi	r18, 0x0A	; 10
 c56:	30 e0       	ldi	r19, 0x00	; 0
 c58:	a3 01       	movw	r20, r6
 c5a:	0e 94 54 07 	call	0xea8	; 0xea8 <__ultoa_invert>
 c5e:	88 2e       	mov	r8, r24
 c60:	86 18       	sub	r8, r6
 c62:	45 c0       	rjmp	.+138    	; 0xcee <vfprintf+0x2ac>
 c64:	85 37       	cpi	r24, 0x75	; 117
 c66:	31 f4       	brne	.+12     	; 0xc74 <vfprintf+0x232>
 c68:	23 2d       	mov	r18, r3
 c6a:	2f 7e       	andi	r18, 0xEF	; 239
 c6c:	b2 2e       	mov	r11, r18
 c6e:	2a e0       	ldi	r18, 0x0A	; 10
 c70:	30 e0       	ldi	r19, 0x00	; 0
 c72:	25 c0       	rjmp	.+74     	; 0xcbe <vfprintf+0x27c>
 c74:	93 2d       	mov	r25, r3
 c76:	99 7f       	andi	r25, 0xF9	; 249
 c78:	b9 2e       	mov	r11, r25
 c7a:	8f 36       	cpi	r24, 0x6F	; 111
 c7c:	c1 f0       	breq	.+48     	; 0xcae <vfprintf+0x26c>
 c7e:	18 f4       	brcc	.+6      	; 0xc86 <vfprintf+0x244>
 c80:	88 35       	cpi	r24, 0x58	; 88
 c82:	79 f0       	breq	.+30     	; 0xca2 <vfprintf+0x260>
 c84:	b5 c0       	rjmp	.+362    	; 0xdf0 <vfprintf+0x3ae>
 c86:	80 37       	cpi	r24, 0x70	; 112
 c88:	19 f0       	breq	.+6      	; 0xc90 <vfprintf+0x24e>
 c8a:	88 37       	cpi	r24, 0x78	; 120
 c8c:	21 f0       	breq	.+8      	; 0xc96 <vfprintf+0x254>
 c8e:	b0 c0       	rjmp	.+352    	; 0xdf0 <vfprintf+0x3ae>
 c90:	e9 2f       	mov	r30, r25
 c92:	e0 61       	ori	r30, 0x10	; 16
 c94:	be 2e       	mov	r11, r30
 c96:	b4 fe       	sbrs	r11, 4
 c98:	0d c0       	rjmp	.+26     	; 0xcb4 <vfprintf+0x272>
 c9a:	fb 2d       	mov	r31, r11
 c9c:	f4 60       	ori	r31, 0x04	; 4
 c9e:	bf 2e       	mov	r11, r31
 ca0:	09 c0       	rjmp	.+18     	; 0xcb4 <vfprintf+0x272>
 ca2:	34 fe       	sbrs	r3, 4
 ca4:	0a c0       	rjmp	.+20     	; 0xcba <vfprintf+0x278>
 ca6:	29 2f       	mov	r18, r25
 ca8:	26 60       	ori	r18, 0x06	; 6
 caa:	b2 2e       	mov	r11, r18
 cac:	06 c0       	rjmp	.+12     	; 0xcba <vfprintf+0x278>
 cae:	28 e0       	ldi	r18, 0x08	; 8
 cb0:	30 e0       	ldi	r19, 0x00	; 0
 cb2:	05 c0       	rjmp	.+10     	; 0xcbe <vfprintf+0x27c>
 cb4:	20 e1       	ldi	r18, 0x10	; 16
 cb6:	30 e0       	ldi	r19, 0x00	; 0
 cb8:	02 c0       	rjmp	.+4      	; 0xcbe <vfprintf+0x27c>
 cba:	20 e1       	ldi	r18, 0x10	; 16
 cbc:	32 e0       	ldi	r19, 0x02	; 2
 cbe:	f8 01       	movw	r30, r16
 cc0:	b7 fe       	sbrs	r11, 7
 cc2:	07 c0       	rjmp	.+14     	; 0xcd2 <vfprintf+0x290>
 cc4:	60 81       	ld	r22, Z
 cc6:	71 81       	ldd	r23, Z+1	; 0x01
 cc8:	82 81       	ldd	r24, Z+2	; 0x02
 cca:	93 81       	ldd	r25, Z+3	; 0x03
 ccc:	0c 5f       	subi	r16, 0xFC	; 252
 cce:	1f 4f       	sbci	r17, 0xFF	; 255
 cd0:	06 c0       	rjmp	.+12     	; 0xcde <vfprintf+0x29c>
 cd2:	60 81       	ld	r22, Z
 cd4:	71 81       	ldd	r23, Z+1	; 0x01
 cd6:	80 e0       	ldi	r24, 0x00	; 0
 cd8:	90 e0       	ldi	r25, 0x00	; 0
 cda:	0e 5f       	subi	r16, 0xFE	; 254
 cdc:	1f 4f       	sbci	r17, 0xFF	; 255
 cde:	a3 01       	movw	r20, r6
 ce0:	0e 94 54 07 	call	0xea8	; 0xea8 <__ultoa_invert>
 ce4:	88 2e       	mov	r8, r24
 ce6:	86 18       	sub	r8, r6
 ce8:	fb 2d       	mov	r31, r11
 cea:	ff 77       	andi	r31, 0x7F	; 127
 cec:	3f 2e       	mov	r3, r31
 cee:	36 fe       	sbrs	r3, 6
 cf0:	0d c0       	rjmp	.+26     	; 0xd0c <vfprintf+0x2ca>
 cf2:	23 2d       	mov	r18, r3
 cf4:	2e 7f       	andi	r18, 0xFE	; 254
 cf6:	a2 2e       	mov	r10, r18
 cf8:	89 14       	cp	r8, r9
 cfa:	58 f4       	brcc	.+22     	; 0xd12 <vfprintf+0x2d0>
 cfc:	34 fe       	sbrs	r3, 4
 cfe:	0b c0       	rjmp	.+22     	; 0xd16 <vfprintf+0x2d4>
 d00:	32 fc       	sbrc	r3, 2
 d02:	09 c0       	rjmp	.+18     	; 0xd16 <vfprintf+0x2d4>
 d04:	83 2d       	mov	r24, r3
 d06:	8e 7e       	andi	r24, 0xEE	; 238
 d08:	a8 2e       	mov	r10, r24
 d0a:	05 c0       	rjmp	.+10     	; 0xd16 <vfprintf+0x2d4>
 d0c:	b8 2c       	mov	r11, r8
 d0e:	a3 2c       	mov	r10, r3
 d10:	03 c0       	rjmp	.+6      	; 0xd18 <vfprintf+0x2d6>
 d12:	b8 2c       	mov	r11, r8
 d14:	01 c0       	rjmp	.+2      	; 0xd18 <vfprintf+0x2d6>
 d16:	b9 2c       	mov	r11, r9
 d18:	a4 fe       	sbrs	r10, 4
 d1a:	0f c0       	rjmp	.+30     	; 0xd3a <vfprintf+0x2f8>
 d1c:	fe 01       	movw	r30, r28
 d1e:	e8 0d       	add	r30, r8
 d20:	f1 1d       	adc	r31, r1
 d22:	80 81       	ld	r24, Z
 d24:	80 33       	cpi	r24, 0x30	; 48
 d26:	21 f4       	brne	.+8      	; 0xd30 <vfprintf+0x2ee>
 d28:	9a 2d       	mov	r25, r10
 d2a:	99 7e       	andi	r25, 0xE9	; 233
 d2c:	a9 2e       	mov	r10, r25
 d2e:	09 c0       	rjmp	.+18     	; 0xd42 <vfprintf+0x300>
 d30:	a2 fe       	sbrs	r10, 2
 d32:	06 c0       	rjmp	.+12     	; 0xd40 <vfprintf+0x2fe>
 d34:	b3 94       	inc	r11
 d36:	b3 94       	inc	r11
 d38:	04 c0       	rjmp	.+8      	; 0xd42 <vfprintf+0x300>
 d3a:	8a 2d       	mov	r24, r10
 d3c:	86 78       	andi	r24, 0x86	; 134
 d3e:	09 f0       	breq	.+2      	; 0xd42 <vfprintf+0x300>
 d40:	b3 94       	inc	r11
 d42:	a3 fc       	sbrc	r10, 3
 d44:	11 c0       	rjmp	.+34     	; 0xd68 <vfprintf+0x326>
 d46:	a0 fe       	sbrs	r10, 0
 d48:	06 c0       	rjmp	.+12     	; 0xd56 <vfprintf+0x314>
 d4a:	b2 14       	cp	r11, r2
 d4c:	88 f4       	brcc	.+34     	; 0xd70 <vfprintf+0x32e>
 d4e:	28 0c       	add	r2, r8
 d50:	92 2c       	mov	r9, r2
 d52:	9b 18       	sub	r9, r11
 d54:	0e c0       	rjmp	.+28     	; 0xd72 <vfprintf+0x330>
 d56:	b2 14       	cp	r11, r2
 d58:	60 f4       	brcc	.+24     	; 0xd72 <vfprintf+0x330>
 d5a:	b6 01       	movw	r22, r12
 d5c:	80 e2       	ldi	r24, 0x20	; 32
 d5e:	90 e0       	ldi	r25, 0x00	; 0
 d60:	0e 94 18 07 	call	0xe30	; 0xe30 <fputc>
 d64:	b3 94       	inc	r11
 d66:	f7 cf       	rjmp	.-18     	; 0xd56 <vfprintf+0x314>
 d68:	b2 14       	cp	r11, r2
 d6a:	18 f4       	brcc	.+6      	; 0xd72 <vfprintf+0x330>
 d6c:	2b 18       	sub	r2, r11
 d6e:	02 c0       	rjmp	.+4      	; 0xd74 <vfprintf+0x332>
 d70:	98 2c       	mov	r9, r8
 d72:	21 2c       	mov	r2, r1
 d74:	a4 fe       	sbrs	r10, 4
 d76:	10 c0       	rjmp	.+32     	; 0xd98 <vfprintf+0x356>
 d78:	b6 01       	movw	r22, r12
 d7a:	80 e3       	ldi	r24, 0x30	; 48
 d7c:	90 e0       	ldi	r25, 0x00	; 0
 d7e:	0e 94 18 07 	call	0xe30	; 0xe30 <fputc>
 d82:	a2 fe       	sbrs	r10, 2
 d84:	17 c0       	rjmp	.+46     	; 0xdb4 <vfprintf+0x372>
 d86:	a1 fc       	sbrc	r10, 1
 d88:	03 c0       	rjmp	.+6      	; 0xd90 <vfprintf+0x34e>
 d8a:	88 e7       	ldi	r24, 0x78	; 120
 d8c:	90 e0       	ldi	r25, 0x00	; 0
 d8e:	02 c0       	rjmp	.+4      	; 0xd94 <vfprintf+0x352>
 d90:	88 e5       	ldi	r24, 0x58	; 88
 d92:	90 e0       	ldi	r25, 0x00	; 0
 d94:	b6 01       	movw	r22, r12
 d96:	0c c0       	rjmp	.+24     	; 0xdb0 <vfprintf+0x36e>
 d98:	8a 2d       	mov	r24, r10
 d9a:	86 78       	andi	r24, 0x86	; 134
 d9c:	59 f0       	breq	.+22     	; 0xdb4 <vfprintf+0x372>
 d9e:	a1 fe       	sbrs	r10, 1
 da0:	02 c0       	rjmp	.+4      	; 0xda6 <vfprintf+0x364>
 da2:	8b e2       	ldi	r24, 0x2B	; 43
 da4:	01 c0       	rjmp	.+2      	; 0xda8 <vfprintf+0x366>
 da6:	80 e2       	ldi	r24, 0x20	; 32
 da8:	a7 fc       	sbrc	r10, 7
 daa:	8d e2       	ldi	r24, 0x2D	; 45
 dac:	b6 01       	movw	r22, r12
 dae:	90 e0       	ldi	r25, 0x00	; 0
 db0:	0e 94 18 07 	call	0xe30	; 0xe30 <fputc>
 db4:	89 14       	cp	r8, r9
 db6:	38 f4       	brcc	.+14     	; 0xdc6 <vfprintf+0x384>
 db8:	b6 01       	movw	r22, r12
 dba:	80 e3       	ldi	r24, 0x30	; 48
 dbc:	90 e0       	ldi	r25, 0x00	; 0
 dbe:	0e 94 18 07 	call	0xe30	; 0xe30 <fputc>
 dc2:	9a 94       	dec	r9
 dc4:	f7 cf       	rjmp	.-18     	; 0xdb4 <vfprintf+0x372>
 dc6:	8a 94       	dec	r8
 dc8:	f3 01       	movw	r30, r6
 dca:	e8 0d       	add	r30, r8
 dcc:	f1 1d       	adc	r31, r1
 dce:	80 81       	ld	r24, Z
 dd0:	b6 01       	movw	r22, r12
 dd2:	90 e0       	ldi	r25, 0x00	; 0
 dd4:	0e 94 18 07 	call	0xe30	; 0xe30 <fputc>
 dd8:	81 10       	cpse	r8, r1
 dda:	f5 cf       	rjmp	.-22     	; 0xdc6 <vfprintf+0x384>
 ddc:	22 20       	and	r2, r2
 dde:	09 f4       	brne	.+2      	; 0xde2 <vfprintf+0x3a0>
 de0:	42 ce       	rjmp	.-892    	; 0xa66 <vfprintf+0x24>
 de2:	b6 01       	movw	r22, r12
 de4:	80 e2       	ldi	r24, 0x20	; 32
 de6:	90 e0       	ldi	r25, 0x00	; 0
 de8:	0e 94 18 07 	call	0xe30	; 0xe30 <fputc>
 dec:	2a 94       	dec	r2
 dee:	f6 cf       	rjmp	.-20     	; 0xddc <vfprintf+0x39a>
 df0:	f6 01       	movw	r30, r12
 df2:	86 81       	ldd	r24, Z+6	; 0x06
 df4:	97 81       	ldd	r25, Z+7	; 0x07
 df6:	02 c0       	rjmp	.+4      	; 0xdfc <vfprintf+0x3ba>
 df8:	8f ef       	ldi	r24, 0xFF	; 255
 dfa:	9f ef       	ldi	r25, 0xFF	; 255
 dfc:	2b 96       	adiw	r28, 0x0b	; 11
 dfe:	e2 e1       	ldi	r30, 0x12	; 18
 e00:	0c 94 cb 07 	jmp	0xf96	; 0xf96 <__epilogue_restores__>

00000e04 <strnlen_P>:
 e04:	fc 01       	movw	r30, r24
 e06:	05 90       	lpm	r0, Z+
 e08:	61 50       	subi	r22, 0x01	; 1
 e0a:	70 40       	sbci	r23, 0x00	; 0
 e0c:	01 10       	cpse	r0, r1
 e0e:	d8 f7       	brcc	.-10     	; 0xe06 <strnlen_P+0x2>
 e10:	80 95       	com	r24
 e12:	90 95       	com	r25
 e14:	8e 0f       	add	r24, r30
 e16:	9f 1f       	adc	r25, r31
 e18:	08 95       	ret

00000e1a <strnlen>:
 e1a:	fc 01       	movw	r30, r24
 e1c:	61 50       	subi	r22, 0x01	; 1
 e1e:	70 40       	sbci	r23, 0x00	; 0
 e20:	01 90       	ld	r0, Z+
 e22:	01 10       	cpse	r0, r1
 e24:	d8 f7       	brcc	.-10     	; 0xe1c <strnlen+0x2>
 e26:	80 95       	com	r24
 e28:	90 95       	com	r25
 e2a:	8e 0f       	add	r24, r30
 e2c:	9f 1f       	adc	r25, r31
 e2e:	08 95       	ret

00000e30 <fputc>:
 e30:	0f 93       	push	r16
 e32:	1f 93       	push	r17
 e34:	cf 93       	push	r28
 e36:	df 93       	push	r29
 e38:	fb 01       	movw	r30, r22
 e3a:	23 81       	ldd	r18, Z+3	; 0x03
 e3c:	21 fd       	sbrc	r18, 1
 e3e:	03 c0       	rjmp	.+6      	; 0xe46 <fputc+0x16>
 e40:	8f ef       	ldi	r24, 0xFF	; 255
 e42:	9f ef       	ldi	r25, 0xFF	; 255
 e44:	2c c0       	rjmp	.+88     	; 0xe9e <fputc+0x6e>
 e46:	22 ff       	sbrs	r18, 2
 e48:	16 c0       	rjmp	.+44     	; 0xe76 <fputc+0x46>
 e4a:	46 81       	ldd	r20, Z+6	; 0x06
 e4c:	57 81       	ldd	r21, Z+7	; 0x07
 e4e:	24 81       	ldd	r18, Z+4	; 0x04
 e50:	35 81       	ldd	r19, Z+5	; 0x05
 e52:	42 17       	cp	r20, r18
 e54:	53 07       	cpc	r21, r19
 e56:	44 f4       	brge	.+16     	; 0xe68 <fputc+0x38>
 e58:	a0 81       	ld	r26, Z
 e5a:	b1 81       	ldd	r27, Z+1	; 0x01
 e5c:	9d 01       	movw	r18, r26
 e5e:	2f 5f       	subi	r18, 0xFF	; 255
 e60:	3f 4f       	sbci	r19, 0xFF	; 255
 e62:	20 83       	st	Z, r18
 e64:	31 83       	std	Z+1, r19	; 0x01
 e66:	8c 93       	st	X, r24
 e68:	26 81       	ldd	r18, Z+6	; 0x06
 e6a:	37 81       	ldd	r19, Z+7	; 0x07
 e6c:	2f 5f       	subi	r18, 0xFF	; 255
 e6e:	3f 4f       	sbci	r19, 0xFF	; 255
 e70:	26 83       	std	Z+6, r18	; 0x06
 e72:	37 83       	std	Z+7, r19	; 0x07
 e74:	14 c0       	rjmp	.+40     	; 0xe9e <fputc+0x6e>
 e76:	8b 01       	movw	r16, r22
 e78:	ec 01       	movw	r28, r24
 e7a:	fb 01       	movw	r30, r22
 e7c:	00 84       	ldd	r0, Z+8	; 0x08
 e7e:	f1 85       	ldd	r31, Z+9	; 0x09
 e80:	e0 2d       	mov	r30, r0
 e82:	09 95       	icall
 e84:	89 2b       	or	r24, r25
 e86:	e1 f6       	brne	.-72     	; 0xe40 <fputc+0x10>
 e88:	d8 01       	movw	r26, r16
 e8a:	16 96       	adiw	r26, 0x06	; 6
 e8c:	8d 91       	ld	r24, X+
 e8e:	9c 91       	ld	r25, X
 e90:	17 97       	sbiw	r26, 0x07	; 7
 e92:	01 96       	adiw	r24, 0x01	; 1
 e94:	16 96       	adiw	r26, 0x06	; 6
 e96:	8d 93       	st	X+, r24
 e98:	9c 93       	st	X, r25
 e9a:	17 97       	sbiw	r26, 0x07	; 7
 e9c:	ce 01       	movw	r24, r28
 e9e:	df 91       	pop	r29
 ea0:	cf 91       	pop	r28
 ea2:	1f 91       	pop	r17
 ea4:	0f 91       	pop	r16
 ea6:	08 95       	ret

00000ea8 <__ultoa_invert>:
 ea8:	fa 01       	movw	r30, r20
 eaa:	aa 27       	eor	r26, r26
 eac:	28 30       	cpi	r18, 0x08	; 8
 eae:	51 f1       	breq	.+84     	; 0xf04 <__ultoa_invert+0x5c>
 eb0:	20 31       	cpi	r18, 0x10	; 16
 eb2:	81 f1       	breq	.+96     	; 0xf14 <__ultoa_invert+0x6c>
 eb4:	e8 94       	clt
 eb6:	6f 93       	push	r22
 eb8:	6e 7f       	andi	r22, 0xFE	; 254
 eba:	6e 5f       	subi	r22, 0xFE	; 254
 ebc:	7f 4f       	sbci	r23, 0xFF	; 255
 ebe:	8f 4f       	sbci	r24, 0xFF	; 255
 ec0:	9f 4f       	sbci	r25, 0xFF	; 255
 ec2:	af 4f       	sbci	r26, 0xFF	; 255
 ec4:	b1 e0       	ldi	r27, 0x01	; 1
 ec6:	3e d0       	rcall	.+124    	; 0xf44 <__ultoa_invert+0x9c>
 ec8:	b4 e0       	ldi	r27, 0x04	; 4
 eca:	3c d0       	rcall	.+120    	; 0xf44 <__ultoa_invert+0x9c>
 ecc:	67 0f       	add	r22, r23
 ece:	78 1f       	adc	r23, r24
 ed0:	89 1f       	adc	r24, r25
 ed2:	9a 1f       	adc	r25, r26
 ed4:	a1 1d       	adc	r26, r1
 ed6:	68 0f       	add	r22, r24
 ed8:	79 1f       	adc	r23, r25
 eda:	8a 1f       	adc	r24, r26
 edc:	91 1d       	adc	r25, r1
 ede:	a1 1d       	adc	r26, r1
 ee0:	6a 0f       	add	r22, r26
 ee2:	71 1d       	adc	r23, r1
 ee4:	81 1d       	adc	r24, r1
 ee6:	91 1d       	adc	r25, r1
 ee8:	a1 1d       	adc	r26, r1
 eea:	20 d0       	rcall	.+64     	; 0xf2c <__ultoa_invert+0x84>
 eec:	09 f4       	brne	.+2      	; 0xef0 <__ultoa_invert+0x48>
 eee:	68 94       	set
 ef0:	3f 91       	pop	r19
 ef2:	2a e0       	ldi	r18, 0x0A	; 10
 ef4:	26 9f       	mul	r18, r22
 ef6:	11 24       	eor	r1, r1
 ef8:	30 19       	sub	r19, r0
 efa:	30 5d       	subi	r19, 0xD0	; 208
 efc:	31 93       	st	Z+, r19
 efe:	de f6       	brtc	.-74     	; 0xeb6 <__ultoa_invert+0xe>
 f00:	cf 01       	movw	r24, r30
 f02:	08 95       	ret
 f04:	46 2f       	mov	r20, r22
 f06:	47 70       	andi	r20, 0x07	; 7
 f08:	40 5d       	subi	r20, 0xD0	; 208
 f0a:	41 93       	st	Z+, r20
 f0c:	b3 e0       	ldi	r27, 0x03	; 3
 f0e:	0f d0       	rcall	.+30     	; 0xf2e <__ultoa_invert+0x86>
 f10:	c9 f7       	brne	.-14     	; 0xf04 <__ultoa_invert+0x5c>
 f12:	f6 cf       	rjmp	.-20     	; 0xf00 <__ultoa_invert+0x58>
 f14:	46 2f       	mov	r20, r22
 f16:	4f 70       	andi	r20, 0x0F	; 15
 f18:	40 5d       	subi	r20, 0xD0	; 208
 f1a:	4a 33       	cpi	r20, 0x3A	; 58
 f1c:	18 f0       	brcs	.+6      	; 0xf24 <__ultoa_invert+0x7c>
 f1e:	49 5d       	subi	r20, 0xD9	; 217
 f20:	31 fd       	sbrc	r19, 1
 f22:	40 52       	subi	r20, 0x20	; 32
 f24:	41 93       	st	Z+, r20
 f26:	02 d0       	rcall	.+4      	; 0xf2c <__ultoa_invert+0x84>
 f28:	a9 f7       	brne	.-22     	; 0xf14 <__ultoa_invert+0x6c>
 f2a:	ea cf       	rjmp	.-44     	; 0xf00 <__ultoa_invert+0x58>
 f2c:	b4 e0       	ldi	r27, 0x04	; 4
 f2e:	a6 95       	lsr	r26
 f30:	97 95       	ror	r25
 f32:	87 95       	ror	r24
 f34:	77 95       	ror	r23
 f36:	67 95       	ror	r22
 f38:	ba 95       	dec	r27
 f3a:	c9 f7       	brne	.-14     	; 0xf2e <__ultoa_invert+0x86>
 f3c:	00 97       	sbiw	r24, 0x00	; 0
 f3e:	61 05       	cpc	r22, r1
 f40:	71 05       	cpc	r23, r1
 f42:	08 95       	ret
 f44:	9b 01       	movw	r18, r22
 f46:	ac 01       	movw	r20, r24
 f48:	0a 2e       	mov	r0, r26
 f4a:	06 94       	lsr	r0
 f4c:	57 95       	ror	r21
 f4e:	47 95       	ror	r20
 f50:	37 95       	ror	r19
 f52:	27 95       	ror	r18
 f54:	ba 95       	dec	r27
 f56:	c9 f7       	brne	.-14     	; 0xf4a <__ultoa_invert+0xa2>
 f58:	62 0f       	add	r22, r18
 f5a:	73 1f       	adc	r23, r19
 f5c:	84 1f       	adc	r24, r20
 f5e:	95 1f       	adc	r25, r21
 f60:	a0 1d       	adc	r26, r0
 f62:	08 95       	ret

00000f64 <__prologue_saves__>:
 f64:	2f 92       	push	r2
 f66:	3f 92       	push	r3
 f68:	4f 92       	push	r4
 f6a:	5f 92       	push	r5
 f6c:	6f 92       	push	r6
 f6e:	7f 92       	push	r7
 f70:	8f 92       	push	r8
 f72:	9f 92       	push	r9
 f74:	af 92       	push	r10
 f76:	bf 92       	push	r11
 f78:	cf 92       	push	r12
 f7a:	df 92       	push	r13
 f7c:	ef 92       	push	r14
 f7e:	ff 92       	push	r15
 f80:	0f 93       	push	r16
 f82:	1f 93       	push	r17
 f84:	cf 93       	push	r28
 f86:	df 93       	push	r29
 f88:	cd b7       	in	r28, 0x3d	; 61
 f8a:	de b7       	in	r29, 0x3e	; 62
 f8c:	ca 1b       	sub	r28, r26
 f8e:	db 0b       	sbc	r29, r27
 f90:	cd bf       	out	0x3d, r28	; 61
 f92:	de bf       	out	0x3e, r29	; 62
 f94:	09 94       	ijmp

00000f96 <__epilogue_restores__>:
 f96:	2a 88       	ldd	r2, Y+18	; 0x12
 f98:	39 88       	ldd	r3, Y+17	; 0x11
 f9a:	48 88       	ldd	r4, Y+16	; 0x10
 f9c:	5f 84       	ldd	r5, Y+15	; 0x0f
 f9e:	6e 84       	ldd	r6, Y+14	; 0x0e
 fa0:	7d 84       	ldd	r7, Y+13	; 0x0d
 fa2:	8c 84       	ldd	r8, Y+12	; 0x0c
 fa4:	9b 84       	ldd	r9, Y+11	; 0x0b
 fa6:	aa 84       	ldd	r10, Y+10	; 0x0a
 fa8:	b9 84       	ldd	r11, Y+9	; 0x09
 faa:	c8 84       	ldd	r12, Y+8	; 0x08
 fac:	df 80       	ldd	r13, Y+7	; 0x07
 fae:	ee 80       	ldd	r14, Y+6	; 0x06
 fb0:	fd 80       	ldd	r15, Y+5	; 0x05
 fb2:	0c 81       	ldd	r16, Y+4	; 0x04
 fb4:	1b 81       	ldd	r17, Y+3	; 0x03
 fb6:	aa 81       	ldd	r26, Y+2	; 0x02
 fb8:	b9 81       	ldd	r27, Y+1	; 0x01
 fba:	ce 0f       	add	r28, r30
 fbc:	d1 1d       	adc	r29, r1
 fbe:	cd bf       	out	0x3d, r28	; 61
 fc0:	de bf       	out	0x3e, r29	; 62
 fc2:	ed 01       	movw	r28, r26
 fc4:	08 95       	ret

00000fc6 <_exit>:
 fc6:	f8 94       	cli

00000fc8 <__stop_program>:
 fc8:	ff cf       	rjmp	.-2      	; 0xfc8 <__stop_program>
