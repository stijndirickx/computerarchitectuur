
gamecontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000010d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004a  00802000  000010d8  0000116c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006d  0080204a  0080204a  000011b6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000011b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001214  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00001254  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017c2  00000000  00000000  000013fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f4  00000000  00000000  00002bbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a7a  00000000  00000000  000033b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003f8  00000000  00000000  00004e2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00011f62  00000000  00000000  00005224  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000690  00000000  00000000  00017186  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00017816  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000058d5  00000000  00000000  00017946  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__ctors_end>
       4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
       8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
       c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      10:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      14:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      18:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      1c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      20:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      24:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      28:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      2c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      30:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      34:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      38:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      3c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      40:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      44:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      48:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      4c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      50:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      54:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      58:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      5c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      60:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      64:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      68:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      6c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      70:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      74:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      78:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      7c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      80:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      84:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      88:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      8c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      90:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      94:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      98:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      9c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      a0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      a4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      a8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      ac:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      b0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      b4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      b8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      bc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      c0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      c4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      c8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      cc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      d0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      d4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      d8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      dc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      e0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      e4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      e8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      ec:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      f0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      f4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      f8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      fc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     100:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     104:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     108:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     10c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     110:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     114:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     118:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     11c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     120:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     124:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     128:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     12c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     130:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     134:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     138:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     13c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     140:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     144:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     148:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     14c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     150:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     154:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     158:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     15c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     160:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     164:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     168:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>

0000016c <__ctors_end>:
     16c:	11 24       	eor	r1, r1
     16e:	1f be       	out	0x3f, r1	; 63
     170:	cf ef       	ldi	r28, 0xFF	; 255
     172:	cd bf       	out	0x3d, r28	; 61
     174:	d7 e2       	ldi	r29, 0x27	; 39
     176:	de bf       	out	0x3e, r29	; 62

00000178 <__do_copy_data>:
     178:	10 e2       	ldi	r17, 0x20	; 32
     17a:	a0 e0       	ldi	r26, 0x00	; 0
     17c:	b0 e2       	ldi	r27, 0x20	; 32
     17e:	e8 ed       	ldi	r30, 0xD8	; 216
     180:	f0 e1       	ldi	r31, 0x10	; 16
     182:	02 c0       	rjmp	.+4      	; 0x188 <__do_copy_data+0x10>
     184:	05 90       	lpm	r0, Z+
     186:	0d 92       	st	X+, r0
     188:	aa 34       	cpi	r26, 0x4A	; 74
     18a:	b1 07       	cpc	r27, r17
     18c:	d9 f7       	brne	.-10     	; 0x184 <__do_copy_data+0xc>

0000018e <__do_clear_bss>:
     18e:	20 e2       	ldi	r18, 0x20	; 32
     190:	aa e4       	ldi	r26, 0x4A	; 74
     192:	b0 e2       	ldi	r27, 0x20	; 32
     194:	01 c0       	rjmp	.+2      	; 0x198 <.do_clear_bss_start>

00000196 <.do_clear_bss_loop>:
     196:	1d 92       	st	X+, r1

00000198 <.do_clear_bss_start>:
     198:	a7 3b       	cpi	r26, 0xB7	; 183
     19a:	b2 07       	cpc	r27, r18
     19c:	e1 f7       	brne	.-8      	; 0x196 <.do_clear_bss_loop>
     19e:	0e 94 b3 01 	call	0x366	; 0x366 <main>
     1a2:	0c 94 6a 08 	jmp	0x10d4	; 0x10d4 <_exit>

000001a6 <__bad_interrupt>:
     1a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001aa <AccInit>:
#include "acc.h"



void AccInit(void)
{
     1aa:	cf 93       	push	r28
     1ac:	df 93       	push	r29
     1ae:	cd b7       	in	r28, 0x3d	; 61
     1b0:	de b7       	in	r29, 0x3e	; 62
	//accelerometer uit slaaptoestand
	// PC6 = ACC_SLEEP
	PORTA.PIN6CTRL = 0b00010001; // 0 reserved - 0 inverted IO enable - 010 Pull-down (on input) - 001 Sense rising edge
     1b2:	80 e0       	ldi	r24, 0x00	; 0
     1b4:	96 e0       	ldi	r25, 0x06	; 6
     1b6:	21 e1       	ldi	r18, 0x11	; 17
     1b8:	fc 01       	movw	r30, r24
     1ba:	26 8b       	std	Z+22, r18	; 0x16

	
}
     1bc:	00 00       	nop
     1be:	df 91       	pop	r29
     1c0:	cf 91       	pop	r28
     1c2:	08 95       	ret

000001c4 <AccGetXAxisRaw>:
unsigned int AccGetXAxisRaw(void)
{
     1c4:	cf 93       	push	r28
     1c6:	df 93       	push	r29
     1c8:	cd b7       	in	r28, 0x3d	; 61
     1ca:	de b7       	in	r29, 0x3e	; 62
	return AnalogGetCh(0, 4); //X op PA0 & PinNeg op PA4 = GND
     1cc:	64 e0       	ldi	r22, 0x04	; 4
     1ce:	70 e0       	ldi	r23, 0x00	; 0
     1d0:	80 e0       	ldi	r24, 0x00	; 0
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	0e 94 4a 01 	call	0x294	; 0x294 <AnalogGetCh>
}
     1d8:	df 91       	pop	r29
     1da:	cf 91       	pop	r28
     1dc:	08 95       	ret

000001de <AccGetYAxisRaw>:
unsigned int AccGetYAxisRaw(void)
{
     1de:	cf 93       	push	r28
     1e0:	df 93       	push	r29
     1e2:	cd b7       	in	r28, 0x3d	; 61
     1e4:	de b7       	in	r29, 0x3e	; 62
	return AnalogGetCh(1, 4); //Y op PA1 & PinNeg op PA4 = GND
     1e6:	64 e0       	ldi	r22, 0x04	; 4
     1e8:	70 e0       	ldi	r23, 0x00	; 0
     1ea:	81 e0       	ldi	r24, 0x01	; 1
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	0e 94 4a 01 	call	0x294	; 0x294 <AnalogGetCh>
}
     1f2:	df 91       	pop	r29
     1f4:	cf 91       	pop	r28
     1f6:	08 95       	ret

000001f8 <AccGetZAxisRaw>:
unsigned int AccGetZAxisRaw(void)
{
     1f8:	cf 93       	push	r28
     1fa:	df 93       	push	r29
     1fc:	cd b7       	in	r28, 0x3d	; 61
     1fe:	de b7       	in	r29, 0x3e	; 62
	return AnalogGetCh(2, 4); //Z op PA2 & PinNeg op PA4 = GND
     200:	64 e0       	ldi	r22, 0x04	; 4
     202:	70 e0       	ldi	r23, 0x00	; 0
     204:	82 e0       	ldi	r24, 0x02	; 2
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	0e 94 4a 01 	call	0x294	; 0x294 <AnalogGetCh>
}
     20c:	df 91       	pop	r29
     20e:	cf 91       	pop	r28
     210:	08 95       	ret

00000212 <AccGetXAxis>:

int AccGetXAxis(unsigned int AccRaw)
{
     212:	cf 93       	push	r28
     214:	df 93       	push	r29
     216:	00 d0       	rcall	.+0      	; 0x218 <AccGetXAxis+0x6>
     218:	cd b7       	in	r28, 0x3d	; 61
     21a:	de b7       	in	r29, 0x3e	; 62
     21c:	89 83       	std	Y+1, r24	; 0x01
     21e:	9a 83       	std	Y+2, r25	; 0x02
	return 0;
     220:	80 e0       	ldi	r24, 0x00	; 0
     222:	90 e0       	ldi	r25, 0x00	; 0
}
     224:	0f 90       	pop	r0
     226:	0f 90       	pop	r0
     228:	df 91       	pop	r29
     22a:	cf 91       	pop	r28
     22c:	08 95       	ret

0000022e <AccGetYAxis>:

int AccGetYAxis(unsigned int AccRaw)
{
     22e:	cf 93       	push	r28
     230:	df 93       	push	r29
     232:	00 d0       	rcall	.+0      	; 0x234 <AccGetYAxis+0x6>
     234:	cd b7       	in	r28, 0x3d	; 61
     236:	de b7       	in	r29, 0x3e	; 62
     238:	89 83       	std	Y+1, r24	; 0x01
     23a:	9a 83       	std	Y+2, r25	; 0x02
	return 0;
     23c:	80 e0       	ldi	r24, 0x00	; 0
     23e:	90 e0       	ldi	r25, 0x00	; 0
}
     240:	0f 90       	pop	r0
     242:	0f 90       	pop	r0
     244:	df 91       	pop	r29
     246:	cf 91       	pop	r28
     248:	08 95       	ret

0000024a <AccGetZAxis>:

int AccGetZAxis(unsigned int AccRaw)
{
     24a:	cf 93       	push	r28
     24c:	df 93       	push	r29
     24e:	00 d0       	rcall	.+0      	; 0x250 <AccGetZAxis+0x6>
     250:	cd b7       	in	r28, 0x3d	; 61
     252:	de b7       	in	r29, 0x3e	; 62
     254:	89 83       	std	Y+1, r24	; 0x01
     256:	9a 83       	std	Y+2, r25	; 0x02
	return 0;
     258:	80 e0       	ldi	r24, 0x00	; 0
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	0f 90       	pop	r0
     25e:	0f 90       	pop	r0
     260:	df 91       	pop	r29
     262:	cf 91       	pop	r28
     264:	08 95       	ret

00000266 <AnalogInit>:
#include "Analog.h"
#include <avr/io.h>

void AnalogInit(void)
{
     266:	cf 93       	push	r28
     268:	df 93       	push	r29
     26a:	cd b7       	in	r28, 0x3d	; 61
     26c:	de b7       	in	r29, 0x3e	; 62
	ADCA.REFCTRL = 0b0000010; // 0 - 000 (INT1V: referentie 1V) - 0 - 1 bandgap enable: 'verboden zone' - 0 (temp sensor uit)
     26e:	80 e0       	ldi	r24, 0x00	; 0
     270:	92 e0       	ldi	r25, 0x02	; 2
     272:	22 e0       	ldi	r18, 0x02	; 2
     274:	fc 01       	movw	r30, r24
     276:	22 83       	std	Z+2, r18	; 0x02
	ADCA.PRESCALER = 0b00000010; // 010 = DIV16 = divide by 16 --> 16 MHz (clock) / 16 = 1 MHz, ADC max 1.4 mHz
     278:	80 e0       	ldi	r24, 0x00	; 0
     27a:	92 e0       	ldi	r25, 0x02	; 2
     27c:	22 e0       	ldi	r18, 0x02	; 2
     27e:	fc 01       	movw	r30, r24
     280:	24 83       	std	Z+4, r18	; 0x04
	ADCA.CTRLB = 0b00010000; // 0 momenteel unused - 00 current limiet uit - 1 Conversion Mode: configured for signed mode - 0 geen freerunning - 00 conversion op 12-bit, right adjusted - 0 
     282:	80 e0       	ldi	r24, 0x00	; 0
     284:	92 e0       	ldi	r25, 0x02	; 2
     286:	20 e1       	ldi	r18, 0x10	; 16
     288:	fc 01       	movw	r30, r24
     28a:	21 83       	std	Z+1, r18	; 0x01

}
     28c:	00 00       	nop
     28e:	df 91       	pop	r29
     290:	cf 91       	pop	r28
     292:	08 95       	ret

00000294 <AnalogGetCh>:
int AnalogGetCh(int PinPos,int PinNeg)
{
     294:	cf 93       	push	r28
     296:	df 93       	push	r29
     298:	00 d0       	rcall	.+0      	; 0x29a <AnalogGetCh+0x6>
     29a:	00 d0       	rcall	.+0      	; 0x29c <AnalogGetCh+0x8>
     29c:	cd b7       	in	r28, 0x3d	; 61
     29e:	de b7       	in	r29, 0x3e	; 62
     2a0:	89 83       	std	Y+1, r24	; 0x01
     2a2:	9a 83       	std	Y+2, r25	; 0x02
     2a4:	6b 83       	std	Y+3, r22	; 0x03
     2a6:	7c 83       	std	Y+4, r23	; 0x04
	//Get analog channel value
	ADCA.CH0.MUXCTRL = ((PinPos & 0b00000111) << 3) | (PinNeg & 0b00000111); // 1e bit reserved - 4 bits MUXPOS[3:0] niet boven 15 - 3 bits MUXNEG[2:0] niet boven 7
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	92 e0       	ldi	r25, 0x02	; 2
     2ac:	29 81       	ldd	r18, Y+1	; 0x01
     2ae:	3a 81       	ldd	r19, Y+2	; 0x02
     2b0:	27 70       	andi	r18, 0x07	; 7
     2b2:	33 27       	eor	r19, r19
     2b4:	22 0f       	add	r18, r18
     2b6:	33 1f       	adc	r19, r19
     2b8:	22 0f       	add	r18, r18
     2ba:	33 1f       	adc	r19, r19
     2bc:	22 0f       	add	r18, r18
     2be:	33 1f       	adc	r19, r19
     2c0:	32 2f       	mov	r19, r18
     2c2:	2b 81       	ldd	r18, Y+3	; 0x03
     2c4:	27 70       	andi	r18, 0x07	; 7
     2c6:	23 2b       	or	r18, r19
     2c8:	fc 01       	movw	r30, r24
     2ca:	21 a3       	std	Z+33, r18	; 0x21

	if(PinNeg == -1){
     2cc:	8b 81       	ldd	r24, Y+3	; 0x03
     2ce:	9c 81       	ldd	r25, Y+4	; 0x04
     2d0:	01 96       	adiw	r24, 0x01	; 1
     2d2:	31 f4       	brne	.+12     	; 0x2e0 <AnalogGetCh+0x4c>
		//Single ended mode: input pin (0 to 15)
		ADCA.CH0.CTRL = 0b10000001; // 1 Start - 00 reserved - 00 gain - 10 inputmode single ended
     2d4:	80 e0       	ldi	r24, 0x00	; 0
     2d6:	92 e0       	ldi	r25, 0x02	; 2
     2d8:	21 e8       	ldi	r18, 0x81	; 129
     2da:	fc 01       	movw	r30, r24
     2dc:	20 a3       	std	Z+32, r18	; 0x20
     2de:	0f c0       	rjmp	.+30     	; 0x2fe <AnalogGetCh+0x6a>
	} else if(PinNeg > 3) {
     2e0:	8b 81       	ldd	r24, Y+3	; 0x03
     2e2:	9c 81       	ldd	r25, Y+4	; 0x04
     2e4:	04 97       	sbiw	r24, 0x04	; 4
     2e6:	34 f0       	brlt	.+12     	; 0x2f4 <AnalogGetCh+0x60>
		//Differential mode: GAIN
		ADCA.CH0.CTRL = 0b10000011; // 1 Start - 00 reserved - 00 gain - 10 inputmode differential
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	92 e0       	ldi	r25, 0x02	; 2
     2ec:	23 e8       	ldi	r18, 0x83	; 131
     2ee:	fc 01       	movw	r30, r24
     2f0:	20 a3       	std	Z+32, r18	; 0x20
     2f2:	05 c0       	rjmp	.+10     	; 0x2fe <AnalogGetCh+0x6a>
	} else {
		//Differential mode: no Gain
		ADCA.CH0.CTRL = 0b10000010; // 1 Start - 00 reserved - 00 gain - 10 inputmode differential 
     2f4:	80 e0       	ldi	r24, 0x00	; 0
     2f6:	92 e0       	ldi	r25, 0x02	; 2
     2f8:	22 e8       	ldi	r18, 0x82	; 130
     2fa:	fc 01       	movw	r30, r24
     2fc:	20 a3       	std	Z+32, r18	; 0x20
	}

	ADCA.INTFLAGS = 0b00000001;	//Reset interrupt flag
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	92 e0       	ldi	r25, 0x02	; 2
     302:	21 e0       	ldi	r18, 0x01	; 1
     304:	fc 01       	movw	r30, r24
     306:	26 83       	std	Z+6, r18	; 0x06
	ADCA.CTRLA = 0b00000101; // 00000 = reserved - 1 CH0(ADC) start - 0 pipeline flush - 1 enable ADC
     308:	80 e0       	ldi	r24, 0x00	; 0
     30a:	92 e0       	ldi	r25, 0x02	; 2
     30c:	25 e0       	ldi	r18, 0x05	; 5
     30e:	fc 01       	movw	r30, r24
     310:	20 83       	st	Z, r18
	while(ADCA.INTFLAGS == (0x00)); // wait until laatste bit is set = ADC conversion complete
     312:	00 00       	nop
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	92 e0       	ldi	r25, 0x02	; 2
     318:	fc 01       	movw	r30, r24
     31a:	86 81       	ldd	r24, Z+6	; 0x06
     31c:	88 23       	and	r24, r24
     31e:	d1 f3       	breq	.-12     	; 0x314 <AnalogGetCh+0x80>

	return ADCA.CH0RES; // return Channel 0 Result register
     320:	80 e0       	ldi	r24, 0x00	; 0
     322:	92 e0       	ldi	r25, 0x02	; 2
     324:	fc 01       	movw	r30, r24
     326:	80 89       	ldd	r24, Z+16	; 0x10
     328:	91 89       	ldd	r25, Z+17	; 0x11
     32a:	24 96       	adiw	r28, 0x04	; 4
     32c:	cd bf       	out	0x3d, r28	; 61
     32e:	de bf       	out	0x3e, r29	; 62
     330:	df 91       	pop	r29
     332:	cf 91       	pop	r28
     334:	08 95       	ret

00000336 <ClockInit>:
#pragma GCC push_options
#pragma GCC optimize ("O2") //This function must be optimized to avoid too long time interval betwee CCP write and CLK.CTRL write (4 CLK CYC max)

void ClockInit(void)
{
	OSC.XOSCCTRL=0b11001011; //Clock<=16MHz	
     336:	8b ec       	ldi	r24, 0xCB	; 203
     338:	80 93 52 00 	sts	0x0052, r24	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
	OSC.CTRL=0b01000; //Enable oscillator	
     33c:	88 e0       	ldi	r24, 0x08	; 8
     33e:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
	while (!(OSC.STATUS&0b1000)); //Wait until XTAL osc is ready
     342:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
     346:	83 ff       	sbrs	r24, 3
     348:	fc cf       	rjmp	.-8      	; 0x342 <ClockInit+0xc>
	
	//Select XTAL osc as system CLK source
	CCP=0xd8;
     34a:	88 ed       	ldi	r24, 0xD8	; 216
     34c:	84 bf       	out	0x34, r24	; 52
    CLK.CTRL=0b0011;
     34e:	83 e0       	ldi	r24, 0x03	; 3
     350:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
     354:	08 95       	ret

00000356 <EncoderInit>:
#include <util/delay.h>
#include <stdio.h>
#include "encoder.h"

void EncoderInit(void)
{
     356:	cf 93       	push	r28
     358:	df 93       	push	r29
     35a:	cd b7       	in	r28, 0x3d	; 61
     35c:	de b7       	in	r29, 0x3e	; 62

}
     35e:	00 00       	nop
     360:	df 91       	pop	r29
     362:	cf 91       	pop	r28
     364:	08 95       	ret

00000366 <main>:
	{
		//The variable text had the same address throughout the execution of the program.
		sprintf(text[a],"Counter:%d\r",a);
		puts(text[a]);
	}
}
     366:	cf 93       	push	r28
     368:	df 93       	push	r29
     36a:	cd b7       	in	r28, 0x3d	; 61
     36c:	de b7       	in	r29, 0x3e	; 62
     36e:	2e 97       	sbiw	r28, 0x0e	; 14
     370:	cd bf       	out	0x3d, r28	; 61
     372:	de bf       	out	0x3e, r29	; 62
     374:	0e 94 9b 01 	call	0x336	; 0x336 <ClockInit>
     378:	0e 94 02 04 	call	0x804	; 0x804 <USARTInit>
     37c:	0e 94 33 01 	call	0x266	; 0x266 <AnalogInit>
     380:	0e 94 d5 00 	call	0x1aa	; 0x1aa <AccInit>
     384:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <LEDInit>
     388:	0e 94 b9 03 	call	0x772	; 0x772 <SwitchInit>
     38c:	0e 94 ab 01 	call	0x356	; 0x356 <EncoderInit>
     390:	0e 94 b1 03 	call	0x762	; 0x762 <SpeakerInit>
     394:	80 ea       	ldi	r24, 0xA0	; 160
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	20 ea       	ldi	r18, 0xA0	; 160
     39a:	30 e0       	ldi	r19, 0x00	; 0
     39c:	f9 01       	movw	r30, r18
     39e:	22 81       	ldd	r18, Z+2	; 0x02
     3a0:	27 60       	ori	r18, 0x07	; 7
     3a2:	fc 01       	movw	r30, r24
     3a4:	22 83       	std	Z+2, r18	; 0x02
     3a6:	8f e3       	ldi	r24, 0x3F	; 63
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	2f e3       	ldi	r18, 0x3F	; 63
     3ac:	30 e0       	ldi	r19, 0x00	; 0
     3ae:	f9 01       	movw	r30, r18
     3b0:	20 81       	ld	r18, Z
     3b2:	20 68       	ori	r18, 0x80	; 128
     3b4:	fc 01       	movw	r30, r24
     3b6:	20 83       	st	Z, r18
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	aa ef       	ldi	r26, 0xFA	; 250
     3be:	b3 e4       	ldi	r27, 0x43	; 67
     3c0:	89 83       	std	Y+1, r24	; 0x01
     3c2:	9a 83       	std	Y+2, r25	; 0x02
     3c4:	ab 83       	std	Y+3, r26	; 0x03
     3c6:	bc 83       	std	Y+4, r27	; 0x04
     3c8:	20 e0       	ldi	r18, 0x00	; 0
     3ca:	30 e0       	ldi	r19, 0x00	; 0
     3cc:	4a e7       	ldi	r20, 0x7A	; 122
     3ce:	55 e4       	ldi	r21, 0x45	; 69
     3d0:	69 81       	ldd	r22, Y+1	; 0x01
     3d2:	7a 81       	ldd	r23, Y+2	; 0x02
     3d4:	8b 81       	ldd	r24, Y+3	; 0x03
     3d6:	9c 81       	ldd	r25, Y+4	; 0x04
     3d8:	0e 94 fd 04 	call	0x9fa	; 0x9fa <__mulsf3>
     3dc:	dc 01       	movw	r26, r24
     3de:	cb 01       	movw	r24, r22
     3e0:	8d 83       	std	Y+5, r24	; 0x05
     3e2:	9e 83       	std	Y+6, r25	; 0x06
     3e4:	af 83       	std	Y+7, r26	; 0x07
     3e6:	b8 87       	std	Y+8, r27	; 0x08
     3e8:	20 e0       	ldi	r18, 0x00	; 0
     3ea:	30 e0       	ldi	r19, 0x00	; 0
     3ec:	40 e8       	ldi	r20, 0x80	; 128
     3ee:	5f e3       	ldi	r21, 0x3F	; 63
     3f0:	6d 81       	ldd	r22, Y+5	; 0x05
     3f2:	7e 81       	ldd	r23, Y+6	; 0x06
     3f4:	8f 81       	ldd	r24, Y+7	; 0x07
     3f6:	98 85       	ldd	r25, Y+8	; 0x08
     3f8:	0e 94 77 04 	call	0x8ee	; 0x8ee <__cmpsf2>
     3fc:	88 23       	and	r24, r24
     3fe:	2c f4       	brge	.+10     	; 0x40a <__FUSE_REGION_LENGTH__+0xa>
     400:	81 e0       	ldi	r24, 0x01	; 1
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	89 87       	std	Y+9, r24	; 0x09
     406:	9a 87       	std	Y+10, r25	; 0x0a
     408:	3f c0       	rjmp	.+126    	; 0x488 <__FUSE_REGION_LENGTH__+0x88>
     40a:	20 e0       	ldi	r18, 0x00	; 0
     40c:	3f ef       	ldi	r19, 0xFF	; 255
     40e:	4f e7       	ldi	r20, 0x7F	; 127
     410:	57 e4       	ldi	r21, 0x47	; 71
     412:	6d 81       	ldd	r22, Y+5	; 0x05
     414:	7e 81       	ldd	r23, Y+6	; 0x06
     416:	8f 81       	ldd	r24, Y+7	; 0x07
     418:	98 85       	ldd	r25, Y+8	; 0x08
     41a:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <__gesf2>
     41e:	18 16       	cp	r1, r24
     420:	4c f5       	brge	.+82     	; 0x474 <__FUSE_REGION_LENGTH__+0x74>
     422:	20 e0       	ldi	r18, 0x00	; 0
     424:	30 e0       	ldi	r19, 0x00	; 0
     426:	40 e2       	ldi	r20, 0x20	; 32
     428:	51 e4       	ldi	r21, 0x41	; 65
     42a:	69 81       	ldd	r22, Y+1	; 0x01
     42c:	7a 81       	ldd	r23, Y+2	; 0x02
     42e:	8b 81       	ldd	r24, Y+3	; 0x03
     430:	9c 81       	ldd	r25, Y+4	; 0x04
     432:	0e 94 fd 04 	call	0x9fa	; 0x9fa <__mulsf3>
     436:	dc 01       	movw	r26, r24
     438:	cb 01       	movw	r24, r22
     43a:	bc 01       	movw	r22, r24
     43c:	cd 01       	movw	r24, r26
     43e:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <__fixunssfsi>
     442:	dc 01       	movw	r26, r24
     444:	cb 01       	movw	r24, r22
     446:	89 87       	std	Y+9, r24	; 0x09
     448:	9a 87       	std	Y+10, r25	; 0x0a
     44a:	0f c0       	rjmp	.+30     	; 0x46a <__FUSE_REGION_LENGTH__+0x6a>
     44c:	80 e9       	ldi	r24, 0x90	; 144
     44e:	91 e0       	ldi	r25, 0x01	; 1
     450:	8b 87       	std	Y+11, r24	; 0x0b
     452:	9c 87       	std	Y+12, r25	; 0x0c
     454:	8b 85       	ldd	r24, Y+11	; 0x0b
     456:	9c 85       	ldd	r25, Y+12	; 0x0c
     458:	01 97       	sbiw	r24, 0x01	; 1
     45a:	f1 f7       	brne	.-4      	; 0x458 <__FUSE_REGION_LENGTH__+0x58>
     45c:	8b 87       	std	Y+11, r24	; 0x0b
     45e:	9c 87       	std	Y+12, r25	; 0x0c
     460:	89 85       	ldd	r24, Y+9	; 0x09
     462:	9a 85       	ldd	r25, Y+10	; 0x0a
     464:	01 97       	sbiw	r24, 0x01	; 1
     466:	89 87       	std	Y+9, r24	; 0x09
     468:	9a 87       	std	Y+10, r25	; 0x0a
     46a:	89 85       	ldd	r24, Y+9	; 0x09
     46c:	9a 85       	ldd	r25, Y+10	; 0x0a
     46e:	89 2b       	or	r24, r25
     470:	69 f7       	brne	.-38     	; 0x44c <__FUSE_REGION_LENGTH__+0x4c>
     472:	14 c0       	rjmp	.+40     	; 0x49c <__FUSE_REGION_LENGTH__+0x9c>
     474:	6d 81       	ldd	r22, Y+5	; 0x05
     476:	7e 81       	ldd	r23, Y+6	; 0x06
     478:	8f 81       	ldd	r24, Y+7	; 0x07
     47a:	98 85       	ldd	r25, Y+8	; 0x08
     47c:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <__fixunssfsi>
     480:	dc 01       	movw	r26, r24
     482:	cb 01       	movw	r24, r22
     484:	89 87       	std	Y+9, r24	; 0x09
     486:	9a 87       	std	Y+10, r25	; 0x0a
     488:	89 85       	ldd	r24, Y+9	; 0x09
     48a:	9a 85       	ldd	r25, Y+10	; 0x0a
     48c:	8d 87       	std	Y+13, r24	; 0x0d
     48e:	9e 87       	std	Y+14, r25	; 0x0e
     490:	8d 85       	ldd	r24, Y+13	; 0x0d
     492:	9e 85       	ldd	r25, Y+14	; 0x0e
     494:	01 97       	sbiw	r24, 0x01	; 1
     496:	f1 f7       	brne	.-4      	; 0x494 <__FUSE_REGION_LENGTH__+0x94>
     498:	8d 87       	std	Y+13, r24	; 0x0d
     49a:	9e 87       	std	Y+14, r25	; 0x0e
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	80 93 ae 20 	sts	0x20AE, r24	; 0x8020ae <bitmask>
     4a2:	0e 94 58 02 	call	0x4b0	; 0x4b0 <LightLoop>
     4a6:	0e 94 ed 02 	call	0x5da	; 0x5da <SwitchPrint>
     4aa:	0e 94 09 03 	call	0x612	; 0x612 <AccPrint>
     4ae:	f9 cf       	rjmp	.-14     	; 0x4a2 <__FUSE_REGION_LENGTH__+0xa2>

000004b0 <LightLoop>:

void LightLoop(void)
{
     4b0:	cf 93       	push	r28
     4b2:	df 93       	push	r29
     4b4:	cd b7       	in	r28, 0x3d	; 61
     4b6:	de b7       	in	r29, 0x3e	; 62
     4b8:	2e 97       	sbiw	r28, 0x0e	; 14
     4ba:	cd bf       	out	0x3d, r28	; 61
     4bc:	de bf       	out	0x3e, r29	; 62
	LEDSet(bitmask);
     4be:	80 91 ae 20 	lds	r24, 0x20AE	; 0x8020ae <bitmask>
     4c2:	0e 94 91 03 	call	0x722	; 0x722 <LEDSet>
	if(bitmask == 0b00001000){
     4c6:	80 91 ae 20 	lds	r24, 0x20AE	; 0x8020ae <bitmask>
     4ca:	88 30       	cpi	r24, 0x08	; 8
     4cc:	41 f4       	brne	.+16     	; 0x4de <LightLoop+0x2e>
		bitmask >>= 3; //first led
     4ce:	80 91 ae 20 	lds	r24, 0x20AE	; 0x8020ae <bitmask>
     4d2:	86 95       	lsr	r24
     4d4:	86 95       	lsr	r24
     4d6:	86 95       	lsr	r24
     4d8:	80 93 ae 20 	sts	0x20AE, r24	; 0x8020ae <bitmask>
     4dc:	05 c0       	rjmp	.+10     	; 0x4e8 <LightLoop+0x38>
	} else {
		bitmask <<= 1; //bitshift to next led
     4de:	80 91 ae 20 	lds	r24, 0x20AE	; 0x8020ae <bitmask>
     4e2:	88 0f       	add	r24, r24
     4e4:	80 93 ae 20 	sts	0x20AE, r24	; 0x8020ae <bitmask>
     4e8:	80 e0       	ldi	r24, 0x00	; 0
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	aa ef       	ldi	r26, 0xFA	; 250
     4ee:	b3 e4       	ldi	r27, 0x43	; 67
     4f0:	89 83       	std	Y+1, r24	; 0x01
     4f2:	9a 83       	std	Y+2, r25	; 0x02
     4f4:	ab 83       	std	Y+3, r26	; 0x03
     4f6:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     4f8:	20 e0       	ldi	r18, 0x00	; 0
     4fa:	30 e0       	ldi	r19, 0x00	; 0
     4fc:	4a e7       	ldi	r20, 0x7A	; 122
     4fe:	55 e4       	ldi	r21, 0x45	; 69
     500:	69 81       	ldd	r22, Y+1	; 0x01
     502:	7a 81       	ldd	r23, Y+2	; 0x02
     504:	8b 81       	ldd	r24, Y+3	; 0x03
     506:	9c 81       	ldd	r25, Y+4	; 0x04
     508:	0e 94 fd 04 	call	0x9fa	; 0x9fa <__mulsf3>
     50c:	dc 01       	movw	r26, r24
     50e:	cb 01       	movw	r24, r22
     510:	8d 83       	std	Y+5, r24	; 0x05
     512:	9e 83       	std	Y+6, r25	; 0x06
     514:	af 83       	std	Y+7, r26	; 0x07
     516:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     518:	20 e0       	ldi	r18, 0x00	; 0
     51a:	30 e0       	ldi	r19, 0x00	; 0
     51c:	40 e8       	ldi	r20, 0x80	; 128
     51e:	5f e3       	ldi	r21, 0x3F	; 63
     520:	6d 81       	ldd	r22, Y+5	; 0x05
     522:	7e 81       	ldd	r23, Y+6	; 0x06
     524:	8f 81       	ldd	r24, Y+7	; 0x07
     526:	98 85       	ldd	r25, Y+8	; 0x08
     528:	0e 94 77 04 	call	0x8ee	; 0x8ee <__cmpsf2>
     52c:	88 23       	and	r24, r24
     52e:	2c f4       	brge	.+10     	; 0x53a <LightLoop+0x8a>
		__ticks = 1;
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	89 87       	std	Y+9, r24	; 0x09
     536:	9a 87       	std	Y+10, r25	; 0x0a
     538:	3f c0       	rjmp	.+126    	; 0x5b8 <LightLoop+0x108>
	else if (__tmp > 65535)
     53a:	20 e0       	ldi	r18, 0x00	; 0
     53c:	3f ef       	ldi	r19, 0xFF	; 255
     53e:	4f e7       	ldi	r20, 0x7F	; 127
     540:	57 e4       	ldi	r21, 0x47	; 71
     542:	6d 81       	ldd	r22, Y+5	; 0x05
     544:	7e 81       	ldd	r23, Y+6	; 0x06
     546:	8f 81       	ldd	r24, Y+7	; 0x07
     548:	98 85       	ldd	r25, Y+8	; 0x08
     54a:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <__gesf2>
     54e:	18 16       	cp	r1, r24
     550:	4c f5       	brge	.+82     	; 0x5a4 <LightLoop+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     552:	20 e0       	ldi	r18, 0x00	; 0
     554:	30 e0       	ldi	r19, 0x00	; 0
     556:	40 e2       	ldi	r20, 0x20	; 32
     558:	51 e4       	ldi	r21, 0x41	; 65
     55a:	69 81       	ldd	r22, Y+1	; 0x01
     55c:	7a 81       	ldd	r23, Y+2	; 0x02
     55e:	8b 81       	ldd	r24, Y+3	; 0x03
     560:	9c 81       	ldd	r25, Y+4	; 0x04
     562:	0e 94 fd 04 	call	0x9fa	; 0x9fa <__mulsf3>
     566:	dc 01       	movw	r26, r24
     568:	cb 01       	movw	r24, r22
     56a:	bc 01       	movw	r22, r24
     56c:	cd 01       	movw	r24, r26
     56e:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <__fixunssfsi>
     572:	dc 01       	movw	r26, r24
     574:	cb 01       	movw	r24, r22
     576:	89 87       	std	Y+9, r24	; 0x09
     578:	9a 87       	std	Y+10, r25	; 0x0a
     57a:	0f c0       	rjmp	.+30     	; 0x59a <LightLoop+0xea>
     57c:	80 e9       	ldi	r24, 0x90	; 144
     57e:	91 e0       	ldi	r25, 0x01	; 1
     580:	8b 87       	std	Y+11, r24	; 0x0b
     582:	9c 87       	std	Y+12, r25	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     584:	8b 85       	ldd	r24, Y+11	; 0x0b
     586:	9c 85       	ldd	r25, Y+12	; 0x0c
     588:	01 97       	sbiw	r24, 0x01	; 1
     58a:	f1 f7       	brne	.-4      	; 0x588 <LightLoop+0xd8>
     58c:	8b 87       	std	Y+11, r24	; 0x0b
     58e:	9c 87       	std	Y+12, r25	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     590:	89 85       	ldd	r24, Y+9	; 0x09
     592:	9a 85       	ldd	r25, Y+10	; 0x0a
     594:	01 97       	sbiw	r24, 0x01	; 1
     596:	89 87       	std	Y+9, r24	; 0x09
     598:	9a 87       	std	Y+10, r25	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     59a:	89 85       	ldd	r24, Y+9	; 0x09
     59c:	9a 85       	ldd	r25, Y+10	; 0x0a
     59e:	89 2b       	or	r24, r25
     5a0:	69 f7       	brne	.-38     	; 0x57c <LightLoop+0xcc>
	}
	_delay_ms(500);
}
     5a2:	14 c0       	rjmp	.+40     	; 0x5cc <LightLoop+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5a4:	6d 81       	ldd	r22, Y+5	; 0x05
     5a6:	7e 81       	ldd	r23, Y+6	; 0x06
     5a8:	8f 81       	ldd	r24, Y+7	; 0x07
     5aa:	98 85       	ldd	r25, Y+8	; 0x08
     5ac:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <__fixunssfsi>
     5b0:	dc 01       	movw	r26, r24
     5b2:	cb 01       	movw	r24, r22
     5b4:	89 87       	std	Y+9, r24	; 0x09
     5b6:	9a 87       	std	Y+10, r25	; 0x0a
     5b8:	89 85       	ldd	r24, Y+9	; 0x09
     5ba:	9a 85       	ldd	r25, Y+10	; 0x0a
     5bc:	8d 87       	std	Y+13, r24	; 0x0d
     5be:	9e 87       	std	Y+14, r25	; 0x0e
     5c0:	8d 85       	ldd	r24, Y+13	; 0x0d
     5c2:	9e 85       	ldd	r25, Y+14	; 0x0e
     5c4:	01 97       	sbiw	r24, 0x01	; 1
     5c6:	f1 f7       	brne	.-4      	; 0x5c4 <LightLoop+0x114>
     5c8:	8d 87       	std	Y+13, r24	; 0x0d
     5ca:	9e 87       	std	Y+14, r25	; 0x0e
     5cc:	00 00       	nop
     5ce:	2e 96       	adiw	r28, 0x0e	; 14
     5d0:	cd bf       	out	0x3d, r28	; 61
     5d2:	de bf       	out	0x3e, r29	; 62
     5d4:	df 91       	pop	r29
     5d6:	cf 91       	pop	r28
     5d8:	08 95       	ret

000005da <SwitchPrint>:

void SwitchPrint(void)
{
     5da:	cf 93       	push	r28
     5dc:	df 93       	push	r29
     5de:	cd b7       	in	r28, 0x3d	; 61
     5e0:	de b7       	in	r29, 0x3e	; 62
	printf("$SWITCH %d\r\n", SwitchGet());
     5e2:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <SwitchGet>
     5e6:	88 2f       	mov	r24, r24
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	29 2f       	mov	r18, r25
     5ec:	2f 93       	push	r18
     5ee:	8f 93       	push	r24
     5f0:	8a e1       	ldi	r24, 0x1A	; 26
     5f2:	90 e2       	ldi	r25, 0x20	; 32
     5f4:	89 2f       	mov	r24, r25
     5f6:	8f 93       	push	r24
     5f8:	8a e1       	ldi	r24, 0x1A	; 26
     5fa:	90 e2       	ldi	r25, 0x20	; 32
     5fc:	8f 93       	push	r24
     5fe:	0e 94 92 05 	call	0xb24	; 0xb24 <printf>
     602:	0f 90       	pop	r0
     604:	0f 90       	pop	r0
     606:	0f 90       	pop	r0
     608:	0f 90       	pop	r0
}
     60a:	00 00       	nop
     60c:	df 91       	pop	r29
     60e:	cf 91       	pop	r28
     610:	08 95       	ret

00000612 <AccPrint>:

void AccPrint(void)
{
     612:	ef 92       	push	r14
     614:	ff 92       	push	r15
     616:	0f 93       	push	r16
     618:	1f 93       	push	r17
     61a:	cf 93       	push	r28
     61c:	df 93       	push	r29
     61e:	cd b7       	in	r28, 0x3d	; 61
     620:	de b7       	in	r29, 0x3e	; 62
     622:	26 97       	sbiw	r28, 0x06	; 6
     624:	cd bf       	out	0x3d, r28	; 61
     626:	de bf       	out	0x3e, r29	; 62
	int accXRaw = AccGetXAxisRaw();
     628:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <AccGetXAxisRaw>
     62c:	89 83       	std	Y+1, r24	; 0x01
     62e:	9a 83       	std	Y+2, r25	; 0x02
	int accYRaw = AccGetYAxisRaw();
     630:	0e 94 ef 00 	call	0x1de	; 0x1de <AccGetYAxisRaw>
     634:	8b 83       	std	Y+3, r24	; 0x03
     636:	9c 83       	std	Y+4, r25	; 0x04
	int accZRaw = AccGetZAxisRaw();
     638:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <AccGetZAxisRaw>
     63c:	8d 83       	std	Y+5, r24	; 0x05
     63e:	9e 83       	std	Y+6, r25	; 0x06
	printf("$ACCRAW %d %d %d\r\n", accXRaw, accYRaw, accZRaw); // print uncalibrated X Y Z of ACC
     640:	8e 81       	ldd	r24, Y+6	; 0x06
     642:	8f 93       	push	r24
     644:	8d 81       	ldd	r24, Y+5	; 0x05
     646:	8f 93       	push	r24
     648:	8c 81       	ldd	r24, Y+4	; 0x04
     64a:	8f 93       	push	r24
     64c:	8b 81       	ldd	r24, Y+3	; 0x03
     64e:	8f 93       	push	r24
     650:	8a 81       	ldd	r24, Y+2	; 0x02
     652:	8f 93       	push	r24
     654:	89 81       	ldd	r24, Y+1	; 0x01
     656:	8f 93       	push	r24
     658:	87 e2       	ldi	r24, 0x27	; 39
     65a:	90 e2       	ldi	r25, 0x20	; 32
     65c:	89 2f       	mov	r24, r25
     65e:	8f 93       	push	r24
     660:	87 e2       	ldi	r24, 0x27	; 39
     662:	90 e2       	ldi	r25, 0x20	; 32
     664:	8f 93       	push	r24
     666:	0e 94 92 05 	call	0xb24	; 0xb24 <printf>
     66a:	8d b7       	in	r24, 0x3d	; 61
     66c:	9e b7       	in	r25, 0x3e	; 62
     66e:	08 96       	adiw	r24, 0x08	; 8
     670:	cd bf       	out	0x3d, r28	; 61
     672:	de bf       	out	0x3e, r29	; 62
	printf("$ACC %d %d %d\r\n", AccGetXAxis(accXRaw), AccGetYAxis(accYRaw), AccGetZAxis(accZRaw));
     674:	8d 81       	ldd	r24, Y+5	; 0x05
     676:	9e 81       	ldd	r25, Y+6	; 0x06
     678:	0e 94 25 01 	call	0x24a	; 0x24a <AccGetZAxis>
     67c:	7c 01       	movw	r14, r24
     67e:	8b 81       	ldd	r24, Y+3	; 0x03
     680:	9c 81       	ldd	r25, Y+4	; 0x04
     682:	0e 94 17 01 	call	0x22e	; 0x22e <AccGetYAxis>
     686:	8c 01       	movw	r16, r24
     688:	89 81       	ldd	r24, Y+1	; 0x01
     68a:	9a 81       	ldd	r25, Y+2	; 0x02
     68c:	0e 94 09 01 	call	0x212	; 0x212 <AccGetXAxis>
     690:	2f 2d       	mov	r18, r15
     692:	2f 93       	push	r18
     694:	2e 2d       	mov	r18, r14
     696:	2f 93       	push	r18
     698:	21 2f       	mov	r18, r17
     69a:	2f 93       	push	r18
     69c:	20 2f       	mov	r18, r16
     69e:	2f 93       	push	r18
     6a0:	29 2f       	mov	r18, r25
     6a2:	2f 93       	push	r18
     6a4:	8f 93       	push	r24
     6a6:	8a e3       	ldi	r24, 0x3A	; 58
     6a8:	90 e2       	ldi	r25, 0x20	; 32
     6aa:	89 2f       	mov	r24, r25
     6ac:	8f 93       	push	r24
     6ae:	8a e3       	ldi	r24, 0x3A	; 58
     6b0:	90 e2       	ldi	r25, 0x20	; 32
     6b2:	8f 93       	push	r24
     6b4:	0e 94 92 05 	call	0xb24	; 0xb24 <printf>
     6b8:	8d b7       	in	r24, 0x3d	; 61
     6ba:	9e b7       	in	r25, 0x3e	; 62
     6bc:	08 96       	adiw	r24, 0x08	; 8
     6be:	cd bf       	out	0x3d, r28	; 61
     6c0:	de bf       	out	0x3e, r29	; 62
     6c2:	00 00       	nop
     6c4:	26 96       	adiw	r28, 0x06	; 6
     6c6:	cd bf       	out	0x3d, r28	; 61
     6c8:	de bf       	out	0x3e, r29	; 62
     6ca:	df 91       	pop	r29
     6cc:	cf 91       	pop	r28
     6ce:	1f 91       	pop	r17
     6d0:	0f 91       	pop	r16
     6d2:	ff 90       	pop	r15
     6d4:	ef 90       	pop	r14
     6d6:	08 95       	ret

000006d8 <LEDInit>:
#include "LED.h"
#include <avr/io.h>

void LEDInit(void)
{
     6d8:	cf 93       	push	r28
     6da:	df 93       	push	r29
     6dc:	cd b7       	in	r28, 0x3d	; 61
     6de:	de b7       	in	r29, 0x3e	; 62
	PORTE.DIRSET |= 0b00001111; //dir = 1 --> output
     6e0:	80 e8       	ldi	r24, 0x80	; 128
     6e2:	96 e0       	ldi	r25, 0x06	; 6
     6e4:	20 e8       	ldi	r18, 0x80	; 128
     6e6:	36 e0       	ldi	r19, 0x06	; 6
     6e8:	f9 01       	movw	r30, r18
     6ea:	21 81       	ldd	r18, Z+1	; 0x01
     6ec:	2f 60       	ori	r18, 0x0F	; 15
     6ee:	fc 01       	movw	r30, r24
     6f0:	21 83       	std	Z+1, r18	; 0x01
	PORTE.PIN0CTRL=PORT_OPC_PULLUP_gc; //enkel belangrijk on input
     6f2:	80 e8       	ldi	r24, 0x80	; 128
     6f4:	96 e0       	ldi	r25, 0x06	; 6
     6f6:	28 e1       	ldi	r18, 0x18	; 24
     6f8:	fc 01       	movw	r30, r24
     6fa:	20 8b       	std	Z+16, r18	; 0x10
	PORTE.PIN1CTRL=PORT_OPC_PULLUP_gc;
     6fc:	80 e8       	ldi	r24, 0x80	; 128
     6fe:	96 e0       	ldi	r25, 0x06	; 6
     700:	28 e1       	ldi	r18, 0x18	; 24
     702:	fc 01       	movw	r30, r24
     704:	21 8b       	std	Z+17, r18	; 0x11
	PORTE.PIN2CTRL=PORT_OPC_PULLUP_gc;
     706:	80 e8       	ldi	r24, 0x80	; 128
     708:	96 e0       	ldi	r25, 0x06	; 6
     70a:	28 e1       	ldi	r18, 0x18	; 24
     70c:	fc 01       	movw	r30, r24
     70e:	22 8b       	std	Z+18, r18	; 0x12
	PORTE.PIN3CTRL=PORT_OPC_PULLUP_gc;
     710:	80 e8       	ldi	r24, 0x80	; 128
     712:	96 e0       	ldi	r25, 0x06	; 6
     714:	28 e1       	ldi	r18, 0x18	; 24
     716:	fc 01       	movw	r30, r24
     718:	23 8b       	std	Z+19, r18	; 0x13
}
     71a:	00 00       	nop
     71c:	df 91       	pop	r29
     71e:	cf 91       	pop	r28
     720:	08 95       	ret

00000722 <LEDSet>:

void LEDSet(char bitmask)
{
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
     726:	1f 92       	push	r1
     728:	cd b7       	in	r28, 0x3d	; 61
     72a:	de b7       	in	r29, 0x3e	; 62
     72c:	89 83       	std	Y+1, r24	; 0x01
	PORTE.OUT &= 0b11110000; //4 ledbits op 0, rest blijft ongewijzigd
     72e:	80 e8       	ldi	r24, 0x80	; 128
     730:	96 e0       	ldi	r25, 0x06	; 6
     732:	20 e8       	ldi	r18, 0x80	; 128
     734:	36 e0       	ldi	r19, 0x06	; 6
     736:	f9 01       	movw	r30, r18
     738:	24 81       	ldd	r18, Z+4	; 0x04
     73a:	20 7f       	andi	r18, 0xF0	; 240
     73c:	fc 01       	movw	r30, r24
     73e:	24 83       	std	Z+4, r18	; 0x04
	PORTE.OUT |= ~bitmask; //juiste ledbit wordt op 1 gezet
     740:	80 e8       	ldi	r24, 0x80	; 128
     742:	96 e0       	ldi	r25, 0x06	; 6
     744:	20 e8       	ldi	r18, 0x80	; 128
     746:	36 e0       	ldi	r19, 0x06	; 6
     748:	f9 01       	movw	r30, r18
     74a:	24 81       	ldd	r18, Z+4	; 0x04
     74c:	32 2f       	mov	r19, r18
     74e:	29 81       	ldd	r18, Y+1	; 0x01
     750:	20 95       	com	r18
     752:	23 2b       	or	r18, r19
     754:	fc 01       	movw	r30, r24
     756:	24 83       	std	Z+4, r18	; 0x04
     758:	00 00       	nop
     75a:	0f 90       	pop	r0
     75c:	df 91       	pop	r29
     75e:	cf 91       	pop	r28
     760:	08 95       	ret

00000762 <SpeakerInit>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "speaker.h"

void SpeakerInit(void)
{
     762:	cf 93       	push	r28
     764:	df 93       	push	r29
     766:	cd b7       	in	r28, 0x3d	; 61
     768:	de b7       	in	r29, 0x3e	; 62
		//TCC1.CTRLB=
		//TCC1.CTRLC=
		//TCC1.CTRLD=
		//TCC1.CTRLE=
		
}
     76a:	00 00       	nop
     76c:	df 91       	pop	r29
     76e:	cf 91       	pop	r28
     770:	08 95       	ret

00000772 <SwitchInit>:
#include "switch.h"
#include <avr/io.h>

void SwitchInit(void)
{
     772:	cf 93       	push	r28
     774:	df 93       	push	r29
     776:	cd b7       	in	r28, 0x3d	; 61
     778:	de b7       	in	r29, 0x3e	; 62
	
	//This register sets the data direction for the individual pins of the port. If DIRn is written to one,
	//pin n is configured as an output pin. If DIRn is written to zero, pin n is configured as an input pin
	//PORTD.DIR &= 0b00001110; 
	PORTD.DIRSET |= 0b00001110; 
     77a:	80 e6       	ldi	r24, 0x60	; 96
     77c:	96 e0       	ldi	r25, 0x06	; 6
     77e:	20 e6       	ldi	r18, 0x60	; 96
     780:	36 e0       	ldi	r19, 0x06	; 6
     782:	f9 01       	movw	r30, r18
     784:	21 81       	ldd	r18, Z+1	; 0x01
     786:	2e 60       	ori	r18, 0x0E	; 14
     788:	fc 01       	movw	r30, r24
     78a:	21 83       	std	Z+1, r18	; 0x01

	//11.13.15 p124
	PORTD.PIN0CTRL= 0b01011001;		//Center
     78c:	80 e6       	ldi	r24, 0x60	; 96
     78e:	96 e0       	ldi	r25, 0x06	; 6
     790:	29 e5       	ldi	r18, 0x59	; 89
     792:	fc 01       	movw	r30, r24
     794:	20 8b       	std	Z+16, r18	; 0x10
	PORTD.PIN4CTRL= 0b01011001;		//Right
     796:	80 e6       	ldi	r24, 0x60	; 96
     798:	96 e0       	ldi	r25, 0x06	; 6
     79a:	29 e5       	ldi	r18, 0x59	; 89
     79c:	fc 01       	movw	r30, r24
     79e:	24 8b       	std	Z+20, r18	; 0x14
	PORTD.PIN5CTRL= 0b01011001;		//Down
     7a0:	80 e6       	ldi	r24, 0x60	; 96
     7a2:	96 e0       	ldi	r25, 0x06	; 6
     7a4:	29 e5       	ldi	r18, 0x59	; 89
     7a6:	fc 01       	movw	r30, r24
     7a8:	25 8b       	std	Z+21, r18	; 0x15
	PORTD.PIN6CTRL= 0b01011001;		//Left
     7aa:	80 e6       	ldi	r24, 0x60	; 96
     7ac:	96 e0       	ldi	r25, 0x06	; 6
     7ae:	29 e5       	ldi	r18, 0x59	; 89
     7b0:	fc 01       	movw	r30, r24
     7b2:	26 8b       	std	Z+22, r18	; 0x16
	PORTD.PIN7CTRL= 0b01011001;		//Up
     7b4:	80 e6       	ldi	r24, 0x60	; 96
     7b6:	96 e0       	ldi	r25, 0x06	; 6
     7b8:	29 e5       	ldi	r18, 0x59	; 89
     7ba:	fc 01       	movw	r30, r24
     7bc:	27 8b       	std	Z+23, r18	; 0x17
}
     7be:	00 00       	nop
     7c0:	df 91       	pop	r29
     7c2:	cf 91       	pop	r28
     7c4:	08 95       	ret

000007c6 <SwitchGet>:


char SwitchGet(void)
{
     7c6:	cf 93       	push	r28
     7c8:	df 93       	push	r29
     7ca:	1f 92       	push	r1
     7cc:	cd b7       	in	r28, 0x3d	; 61
     7ce:	de b7       	in	r29, 0x3e	; 62
	char input = PORTD.IN; 
     7d0:	80 e6       	ldi	r24, 0x60	; 96
     7d2:	96 e0       	ldi	r25, 0x06	; 6
     7d4:	fc 01       	movw	r30, r24
     7d6:	80 85       	ldd	r24, Z+8	; 0x08
     7d8:	89 83       	std	Y+1, r24	; 0x01
	//PORTDIN looks like 11110001 'if everything would be pressed', the wanted format for ex.: xxx11111
	//To achieve this bitshift first 4 bits , 3 to the right and the bit on the right stays at the same place
	input = ((input & 0b11110000) >> 3) | (input & 0b00000001);
     7da:	89 81       	ldd	r24, Y+1	; 0x01
     7dc:	88 2f       	mov	r24, r24
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	80 7f       	andi	r24, 0xF0	; 240
     7e2:	99 27       	eor	r25, r25
     7e4:	95 95       	asr	r25
     7e6:	87 95       	ror	r24
     7e8:	95 95       	asr	r25
     7ea:	87 95       	ror	r24
     7ec:	95 95       	asr	r25
     7ee:	87 95       	ror	r24
     7f0:	98 2f       	mov	r25, r24
     7f2:	89 81       	ldd	r24, Y+1	; 0x01
     7f4:	81 70       	andi	r24, 0x01	; 1
     7f6:	89 2b       	or	r24, r25
     7f8:	89 83       	std	Y+1, r24	; 0x01
	return input;
     7fa:	89 81       	ldd	r24, Y+1	; 0x01
}
     7fc:	0f 90       	pop	r0
     7fe:	df 91       	pop	r29
     800:	cf 91       	pop	r28
     802:	08 95       	ret

00000804 <USARTInit>:
static int stdio_putchar(char c, FILE * stream);
static int stdio_getchar(FILE *stream);
static FILE UsartStdio = FDEV_SETUP_STREAM(stdio_putchar, stdio_getchar,_FDEV_SETUP_WRITE);

void USARTInit(void)
{
     804:	cf 93       	push	r28
     806:	df 93       	push	r29
     808:	cd b7       	in	r28, 0x3d	; 61
     80a:	de b7       	in	r29, 0x3e	; 62
	USART_PORT.DIRSET=0b00001000;	//transmitlijn als output, receive lijn als input
     80c:	80 e6       	ldi	r24, 0x60	; 96
     80e:	96 e0       	ldi	r25, 0x06	; 6
     810:	28 e0       	ldi	r18, 0x08	; 8
     812:	fc 01       	movw	r30, r24
     814:	21 83       	std	Z+1, r18	; 0x01
	USART_PORT.DIRCLR=0b00000100;
     816:	80 e6       	ldi	r24, 0x60	; 96
     818:	96 e0       	ldi	r25, 0x06	; 6
     81a:	24 e0       	ldi	r18, 0x04	; 4
     81c:	fc 01       	movw	r30, r24
     81e:	22 83       	std	Z+2, r18	; 0x02
	
	USART.CTRLA=0b00000000; //polled mode = interrupts uitgeschakeld
     820:	80 ea       	ldi	r24, 0xA0	; 160
     822:	99 e0       	ldi	r25, 0x09	; 9
     824:	fc 01       	movw	r30, r24
     826:	13 82       	std	Z+3, r1	; 0x03
	USART.CTRLB=0b00011000; //transmitter en reveicer aan, double speed comm uit
     828:	80 ea       	ldi	r24, 0xA0	; 160
     82a:	99 e0       	ldi	r25, 0x09	; 9
     82c:	28 e1       	ldi	r18, 0x18	; 24
     82e:	fc 01       	movw	r30, r24
     830:	24 83       	std	Z+4, r18	; 0x04
	USART.CTRLC=0b00000011; // USART in async mode
     832:	80 ea       	ldi	r24, 0xA0	; 160
     834:	99 e0       	ldi	r25, 0x09	; 9
     836:	23 e0       	ldi	r18, 0x03	; 3
     838:	fc 01       	movw	r30, r24
     83a:	25 83       	std	Z+5, r18	; 0x05
	
	//USART.BAUDCTRLA=0xE5; //BSEL=3301, BSCALE=-5 9600 baud
	//USART.BAUDCTRLB=0xBC; 

	//BSEL=983=0011 1101 0111, BSCALE=-7=1001 --> 115200 baud [afwijking: 115211 baud]
	USART.BAUDCTRLA=0xD7; //1101 0111
     83c:	80 ea       	ldi	r24, 0xA0	; 160
     83e:	99 e0       	ldi	r25, 0x09	; 9
     840:	27 ed       	ldi	r18, 0xD7	; 215
     842:	fc 01       	movw	r30, r24
     844:	26 83       	std	Z+6, r18	; 0x06
	USART.BAUDCTRLB=0x93; //1001 0011
     846:	80 ea       	ldi	r24, 0xA0	; 160
     848:	99 e0       	ldi	r25, 0x09	; 9
     84a:	23 e9       	ldi	r18, 0x93	; 147
     84c:	fc 01       	movw	r30, r24
     84e:	27 83       	std	Z+7, r18	; 0x07
	
	stdout=&UsartStdio; // koppeling tussen drivercode en stdio lib
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	90 e2       	ldi	r25, 0x20	; 32
     854:	80 93 b3 20 	sts	0x20B3, r24	; 0x8020b3 <__iob+0x2>
     858:	90 93 b4 20 	sts	0x20B4, r25	; 0x8020b4 <__iob+0x3>
	stdin=&UsartStdio;
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	90 e2       	ldi	r25, 0x20	; 32
     860:	80 93 b1 20 	sts	0x20B1, r24	; 0x8020b1 <__iob>
     864:	90 93 b2 20 	sts	0x20B2, r25	; 0x8020b2 <__iob+0x1>
}
     868:	00 00       	nop
     86a:	df 91       	pop	r29
     86c:	cf 91       	pop	r28
     86e:	08 95       	ret

00000870 <stdio_putchar>:

//vormt onderste laag van stdio lib
static int stdio_putchar(char c, FILE * stream) //1 byte over USART
{
     870:	cf 93       	push	r28
     872:	df 93       	push	r29
     874:	00 d0       	rcall	.+0      	; 0x876 <stdio_putchar+0x6>
     876:	1f 92       	push	r1
     878:	cd b7       	in	r28, 0x3d	; 61
     87a:	de b7       	in	r29, 0x3e	; 62
     87c:	89 83       	std	Y+1, r24	; 0x01
     87e:	6a 83       	std	Y+2, r22	; 0x02
     880:	7b 83       	std	Y+3, r23	; 0x03
	USART.DATA = c;
     882:	80 ea       	ldi	r24, 0xA0	; 160
     884:	99 e0       	ldi	r25, 0x09	; 9
     886:	29 81       	ldd	r18, Y+1	; 0x01
     888:	fc 01       	movw	r30, r24
     88a:	20 83       	st	Z, r18
	while (!(USART.STATUS & 0b01000000)); //wachten op TXCIF (Transmit Complete interrupt flag) = byte verzonden
     88c:	00 00       	nop
     88e:	80 ea       	ldi	r24, 0xA0	; 160
     890:	99 e0       	ldi	r25, 0x09	; 9
     892:	fc 01       	movw	r30, r24
     894:	81 81       	ldd	r24, Z+1	; 0x01
     896:	88 2f       	mov	r24, r24
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	80 74       	andi	r24, 0x40	; 64
     89c:	99 27       	eor	r25, r25
     89e:	89 2b       	or	r24, r25
     8a0:	b1 f3       	breq	.-20     	; 0x88e <stdio_putchar+0x1e>
	USART.STATUS=0b01000000; //vlag op 0 voor volgende datatransfer
     8a2:	80 ea       	ldi	r24, 0xA0	; 160
     8a4:	99 e0       	ldi	r25, 0x09	; 9
     8a6:	20 e4       	ldi	r18, 0x40	; 64
     8a8:	fc 01       	movw	r30, r24
     8aa:	21 83       	std	Z+1, r18	; 0x01
	return 0;
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	90 e0       	ldi	r25, 0x00	; 0
}
     8b0:	23 96       	adiw	r28, 0x03	; 3
     8b2:	cd bf       	out	0x3d, r28	; 61
     8b4:	de bf       	out	0x3e, r29	; 62
     8b6:	df 91       	pop	r29
     8b8:	cf 91       	pop	r28
     8ba:	08 95       	ret

000008bc <stdio_getchar>:
	
static int stdio_getchar(FILE *stream)
{
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	00 d0       	rcall	.+0      	; 0x8c2 <stdio_getchar+0x6>
     8c2:	cd b7       	in	r28, 0x3d	; 61
     8c4:	de b7       	in	r29, 0x3e	; 62
     8c6:	89 83       	std	Y+1, r24	; 0x01
     8c8:	9a 83       	std	Y+2, r25	; 0x02
	while (!(USART.STATUS & 0b10000000)); //wacht tot er een byte in de receive buffer zit
     8ca:	00 00       	nop
     8cc:	80 ea       	ldi	r24, 0xA0	; 160
     8ce:	99 e0       	ldi	r25, 0x09	; 9
     8d0:	fc 01       	movw	r30, r24
     8d2:	81 81       	ldd	r24, Z+1	; 0x01
     8d4:	88 23       	and	r24, r24
     8d6:	d4 f7       	brge	.-12     	; 0x8cc <stdio_getchar+0x10>
	return USART.DATA;
     8d8:	80 ea       	ldi	r24, 0xA0	; 160
     8da:	99 e0       	ldi	r25, 0x09	; 9
     8dc:	fc 01       	movw	r30, r24
     8de:	80 81       	ld	r24, Z
     8e0:	88 2f       	mov	r24, r24
     8e2:	90 e0       	ldi	r25, 0x00	; 0
}
     8e4:	0f 90       	pop	r0
     8e6:	0f 90       	pop	r0
     8e8:	df 91       	pop	r29
     8ea:	cf 91       	pop	r28
     8ec:	08 95       	ret

000008ee <__cmpsf2>:
     8ee:	0e 94 ab 04 	call	0x956	; 0x956 <__fp_cmp>
     8f2:	08 f4       	brcc	.+2      	; 0x8f6 <__cmpsf2+0x8>
     8f4:	81 e0       	ldi	r24, 0x01	; 1
     8f6:	08 95       	ret

000008f8 <__fixunssfsi>:
     8f8:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__fp_splitA>
     8fc:	88 f0       	brcs	.+34     	; 0x920 <__fixunssfsi+0x28>
     8fe:	9f 57       	subi	r25, 0x7F	; 127
     900:	98 f0       	brcs	.+38     	; 0x928 <__fixunssfsi+0x30>
     902:	b9 2f       	mov	r27, r25
     904:	99 27       	eor	r25, r25
     906:	b7 51       	subi	r27, 0x17	; 23
     908:	b0 f0       	brcs	.+44     	; 0x936 <__fixunssfsi+0x3e>
     90a:	e1 f0       	breq	.+56     	; 0x944 <__fixunssfsi+0x4c>
     90c:	66 0f       	add	r22, r22
     90e:	77 1f       	adc	r23, r23
     910:	88 1f       	adc	r24, r24
     912:	99 1f       	adc	r25, r25
     914:	1a f0       	brmi	.+6      	; 0x91c <__fixunssfsi+0x24>
     916:	ba 95       	dec	r27
     918:	c9 f7       	brne	.-14     	; 0x90c <__fixunssfsi+0x14>
     91a:	14 c0       	rjmp	.+40     	; 0x944 <__fixunssfsi+0x4c>
     91c:	b1 30       	cpi	r27, 0x01	; 1
     91e:	91 f0       	breq	.+36     	; 0x944 <__fixunssfsi+0x4c>
     920:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <__fp_zero>
     924:	b1 e0       	ldi	r27, 0x01	; 1
     926:	08 95       	ret
     928:	0c 94 f1 04 	jmp	0x9e2	; 0x9e2 <__fp_zero>
     92c:	67 2f       	mov	r22, r23
     92e:	78 2f       	mov	r23, r24
     930:	88 27       	eor	r24, r24
     932:	b8 5f       	subi	r27, 0xF8	; 248
     934:	39 f0       	breq	.+14     	; 0x944 <__fixunssfsi+0x4c>
     936:	b9 3f       	cpi	r27, 0xF9	; 249
     938:	cc f3       	brlt	.-14     	; 0x92c <__fixunssfsi+0x34>
     93a:	86 95       	lsr	r24
     93c:	77 95       	ror	r23
     93e:	67 95       	ror	r22
     940:	b3 95       	inc	r27
     942:	d9 f7       	brne	.-10     	; 0x93a <__fixunssfsi+0x42>
     944:	3e f4       	brtc	.+14     	; 0x954 <__fixunssfsi+0x5c>
     946:	90 95       	com	r25
     948:	80 95       	com	r24
     94a:	70 95       	com	r23
     94c:	61 95       	neg	r22
     94e:	7f 4f       	sbci	r23, 0xFF	; 255
     950:	8f 4f       	sbci	r24, 0xFF	; 255
     952:	9f 4f       	sbci	r25, 0xFF	; 255
     954:	08 95       	ret

00000956 <__fp_cmp>:
     956:	99 0f       	add	r25, r25
     958:	00 08       	sbc	r0, r0
     95a:	55 0f       	add	r21, r21
     95c:	aa 0b       	sbc	r26, r26
     95e:	e0 e8       	ldi	r30, 0x80	; 128
     960:	fe ef       	ldi	r31, 0xFE	; 254
     962:	16 16       	cp	r1, r22
     964:	17 06       	cpc	r1, r23
     966:	e8 07       	cpc	r30, r24
     968:	f9 07       	cpc	r31, r25
     96a:	c0 f0       	brcs	.+48     	; 0x99c <__fp_cmp+0x46>
     96c:	12 16       	cp	r1, r18
     96e:	13 06       	cpc	r1, r19
     970:	e4 07       	cpc	r30, r20
     972:	f5 07       	cpc	r31, r21
     974:	98 f0       	brcs	.+38     	; 0x99c <__fp_cmp+0x46>
     976:	62 1b       	sub	r22, r18
     978:	73 0b       	sbc	r23, r19
     97a:	84 0b       	sbc	r24, r20
     97c:	95 0b       	sbc	r25, r21
     97e:	39 f4       	brne	.+14     	; 0x98e <__fp_cmp+0x38>
     980:	0a 26       	eor	r0, r26
     982:	61 f0       	breq	.+24     	; 0x99c <__fp_cmp+0x46>
     984:	23 2b       	or	r18, r19
     986:	24 2b       	or	r18, r20
     988:	25 2b       	or	r18, r21
     98a:	21 f4       	brne	.+8      	; 0x994 <__fp_cmp+0x3e>
     98c:	08 95       	ret
     98e:	0a 26       	eor	r0, r26
     990:	09 f4       	brne	.+2      	; 0x994 <__fp_cmp+0x3e>
     992:	a1 40       	sbci	r26, 0x01	; 1
     994:	a6 95       	lsr	r26
     996:	8f ef       	ldi	r24, 0xFF	; 255
     998:	81 1d       	adc	r24, r1
     99a:	81 1d       	adc	r24, r1
     99c:	08 95       	ret

0000099e <__fp_split3>:
     99e:	57 fd       	sbrc	r21, 7
     9a0:	90 58       	subi	r25, 0x80	; 128
     9a2:	44 0f       	add	r20, r20
     9a4:	55 1f       	adc	r21, r21
     9a6:	59 f0       	breq	.+22     	; 0x9be <__fp_splitA+0x10>
     9a8:	5f 3f       	cpi	r21, 0xFF	; 255
     9aa:	71 f0       	breq	.+28     	; 0x9c8 <__fp_splitA+0x1a>
     9ac:	47 95       	ror	r20

000009ae <__fp_splitA>:
     9ae:	88 0f       	add	r24, r24
     9b0:	97 fb       	bst	r25, 7
     9b2:	99 1f       	adc	r25, r25
     9b4:	61 f0       	breq	.+24     	; 0x9ce <__fp_splitA+0x20>
     9b6:	9f 3f       	cpi	r25, 0xFF	; 255
     9b8:	79 f0       	breq	.+30     	; 0x9d8 <__fp_splitA+0x2a>
     9ba:	87 95       	ror	r24
     9bc:	08 95       	ret
     9be:	12 16       	cp	r1, r18
     9c0:	13 06       	cpc	r1, r19
     9c2:	14 06       	cpc	r1, r20
     9c4:	55 1f       	adc	r21, r21
     9c6:	f2 cf       	rjmp	.-28     	; 0x9ac <__fp_split3+0xe>
     9c8:	46 95       	lsr	r20
     9ca:	f1 df       	rcall	.-30     	; 0x9ae <__fp_splitA>
     9cc:	08 c0       	rjmp	.+16     	; 0x9de <__fp_splitA+0x30>
     9ce:	16 16       	cp	r1, r22
     9d0:	17 06       	cpc	r1, r23
     9d2:	18 06       	cpc	r1, r24
     9d4:	99 1f       	adc	r25, r25
     9d6:	f1 cf       	rjmp	.-30     	; 0x9ba <__fp_splitA+0xc>
     9d8:	86 95       	lsr	r24
     9da:	71 05       	cpc	r23, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	08 94       	sec
     9e0:	08 95       	ret

000009e2 <__fp_zero>:
     9e2:	e8 94       	clt

000009e4 <__fp_szero>:
     9e4:	bb 27       	eor	r27, r27
     9e6:	66 27       	eor	r22, r22
     9e8:	77 27       	eor	r23, r23
     9ea:	cb 01       	movw	r24, r22
     9ec:	97 f9       	bld	r25, 7
     9ee:	08 95       	ret

000009f0 <__gesf2>:
     9f0:	0e 94 ab 04 	call	0x956	; 0x956 <__fp_cmp>
     9f4:	08 f4       	brcc	.+2      	; 0x9f8 <__gesf2+0x8>
     9f6:	8f ef       	ldi	r24, 0xFF	; 255
     9f8:	08 95       	ret

000009fa <__mulsf3>:
     9fa:	0e 94 10 05 	call	0xa20	; 0xa20 <__mulsf3x>
     9fe:	0c 94 81 05 	jmp	0xb02	; 0xb02 <__fp_round>
     a02:	0e 94 73 05 	call	0xae6	; 0xae6 <__fp_pscA>
     a06:	38 f0       	brcs	.+14     	; 0xa16 <__mulsf3+0x1c>
     a08:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__fp_pscB>
     a0c:	20 f0       	brcs	.+8      	; 0xa16 <__mulsf3+0x1c>
     a0e:	95 23       	and	r25, r21
     a10:	11 f0       	breq	.+4      	; 0xa16 <__mulsf3+0x1c>
     a12:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__fp_inf>
     a16:	0c 94 70 05 	jmp	0xae0	; 0xae0 <__fp_nan>
     a1a:	11 24       	eor	r1, r1
     a1c:	0c 94 f2 04 	jmp	0x9e4	; 0x9e4 <__fp_szero>

00000a20 <__mulsf3x>:
     a20:	0e 94 cf 04 	call	0x99e	; 0x99e <__fp_split3>
     a24:	70 f3       	brcs	.-36     	; 0xa02 <__mulsf3+0x8>

00000a26 <__mulsf3_pse>:
     a26:	95 9f       	mul	r25, r21
     a28:	c1 f3       	breq	.-16     	; 0xa1a <__mulsf3+0x20>
     a2a:	95 0f       	add	r25, r21
     a2c:	50 e0       	ldi	r21, 0x00	; 0
     a2e:	55 1f       	adc	r21, r21
     a30:	62 9f       	mul	r22, r18
     a32:	f0 01       	movw	r30, r0
     a34:	72 9f       	mul	r23, r18
     a36:	bb 27       	eor	r27, r27
     a38:	f0 0d       	add	r31, r0
     a3a:	b1 1d       	adc	r27, r1
     a3c:	63 9f       	mul	r22, r19
     a3e:	aa 27       	eor	r26, r26
     a40:	f0 0d       	add	r31, r0
     a42:	b1 1d       	adc	r27, r1
     a44:	aa 1f       	adc	r26, r26
     a46:	64 9f       	mul	r22, r20
     a48:	66 27       	eor	r22, r22
     a4a:	b0 0d       	add	r27, r0
     a4c:	a1 1d       	adc	r26, r1
     a4e:	66 1f       	adc	r22, r22
     a50:	82 9f       	mul	r24, r18
     a52:	22 27       	eor	r18, r18
     a54:	b0 0d       	add	r27, r0
     a56:	a1 1d       	adc	r26, r1
     a58:	62 1f       	adc	r22, r18
     a5a:	73 9f       	mul	r23, r19
     a5c:	b0 0d       	add	r27, r0
     a5e:	a1 1d       	adc	r26, r1
     a60:	62 1f       	adc	r22, r18
     a62:	83 9f       	mul	r24, r19
     a64:	a0 0d       	add	r26, r0
     a66:	61 1d       	adc	r22, r1
     a68:	22 1f       	adc	r18, r18
     a6a:	74 9f       	mul	r23, r20
     a6c:	33 27       	eor	r19, r19
     a6e:	a0 0d       	add	r26, r0
     a70:	61 1d       	adc	r22, r1
     a72:	23 1f       	adc	r18, r19
     a74:	84 9f       	mul	r24, r20
     a76:	60 0d       	add	r22, r0
     a78:	21 1d       	adc	r18, r1
     a7a:	82 2f       	mov	r24, r18
     a7c:	76 2f       	mov	r23, r22
     a7e:	6a 2f       	mov	r22, r26
     a80:	11 24       	eor	r1, r1
     a82:	9f 57       	subi	r25, 0x7F	; 127
     a84:	50 40       	sbci	r21, 0x00	; 0
     a86:	9a f0       	brmi	.+38     	; 0xaae <__mulsf3_pse+0x88>
     a88:	f1 f0       	breq	.+60     	; 0xac6 <__mulsf3_pse+0xa0>
     a8a:	88 23       	and	r24, r24
     a8c:	4a f0       	brmi	.+18     	; 0xaa0 <__mulsf3_pse+0x7a>
     a8e:	ee 0f       	add	r30, r30
     a90:	ff 1f       	adc	r31, r31
     a92:	bb 1f       	adc	r27, r27
     a94:	66 1f       	adc	r22, r22
     a96:	77 1f       	adc	r23, r23
     a98:	88 1f       	adc	r24, r24
     a9a:	91 50       	subi	r25, 0x01	; 1
     a9c:	50 40       	sbci	r21, 0x00	; 0
     a9e:	a9 f7       	brne	.-22     	; 0xa8a <__mulsf3_pse+0x64>
     aa0:	9e 3f       	cpi	r25, 0xFE	; 254
     aa2:	51 05       	cpc	r21, r1
     aa4:	80 f0       	brcs	.+32     	; 0xac6 <__mulsf3_pse+0xa0>
     aa6:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__fp_inf>
     aaa:	0c 94 f2 04 	jmp	0x9e4	; 0x9e4 <__fp_szero>
     aae:	5f 3f       	cpi	r21, 0xFF	; 255
     ab0:	e4 f3       	brlt	.-8      	; 0xaaa <__mulsf3_pse+0x84>
     ab2:	98 3e       	cpi	r25, 0xE8	; 232
     ab4:	d4 f3       	brlt	.-12     	; 0xaaa <__mulsf3_pse+0x84>
     ab6:	86 95       	lsr	r24
     ab8:	77 95       	ror	r23
     aba:	67 95       	ror	r22
     abc:	b7 95       	ror	r27
     abe:	f7 95       	ror	r31
     ac0:	e7 95       	ror	r30
     ac2:	9f 5f       	subi	r25, 0xFF	; 255
     ac4:	c1 f7       	brne	.-16     	; 0xab6 <__mulsf3_pse+0x90>
     ac6:	fe 2b       	or	r31, r30
     ac8:	88 0f       	add	r24, r24
     aca:	91 1d       	adc	r25, r1
     acc:	96 95       	lsr	r25
     ace:	87 95       	ror	r24
     ad0:	97 f9       	bld	r25, 7
     ad2:	08 95       	ret

00000ad4 <__fp_inf>:
     ad4:	97 f9       	bld	r25, 7
     ad6:	9f 67       	ori	r25, 0x7F	; 127
     ad8:	80 e8       	ldi	r24, 0x80	; 128
     ada:	70 e0       	ldi	r23, 0x00	; 0
     adc:	60 e0       	ldi	r22, 0x00	; 0
     ade:	08 95       	ret

00000ae0 <__fp_nan>:
     ae0:	9f ef       	ldi	r25, 0xFF	; 255
     ae2:	80 ec       	ldi	r24, 0xC0	; 192
     ae4:	08 95       	ret

00000ae6 <__fp_pscA>:
     ae6:	00 24       	eor	r0, r0
     ae8:	0a 94       	dec	r0
     aea:	16 16       	cp	r1, r22
     aec:	17 06       	cpc	r1, r23
     aee:	18 06       	cpc	r1, r24
     af0:	09 06       	cpc	r0, r25
     af2:	08 95       	ret

00000af4 <__fp_pscB>:
     af4:	00 24       	eor	r0, r0
     af6:	0a 94       	dec	r0
     af8:	12 16       	cp	r1, r18
     afa:	13 06       	cpc	r1, r19
     afc:	14 06       	cpc	r1, r20
     afe:	05 06       	cpc	r0, r21
     b00:	08 95       	ret

00000b02 <__fp_round>:
     b02:	09 2e       	mov	r0, r25
     b04:	03 94       	inc	r0
     b06:	00 0c       	add	r0, r0
     b08:	11 f4       	brne	.+4      	; 0xb0e <__fp_round+0xc>
     b0a:	88 23       	and	r24, r24
     b0c:	52 f0       	brmi	.+20     	; 0xb22 <__fp_round+0x20>
     b0e:	bb 0f       	add	r27, r27
     b10:	40 f4       	brcc	.+16     	; 0xb22 <__fp_round+0x20>
     b12:	bf 2b       	or	r27, r31
     b14:	11 f4       	brne	.+4      	; 0xb1a <__fp_round+0x18>
     b16:	60 ff       	sbrs	r22, 0
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <__fp_round+0x20>
     b1a:	6f 5f       	subi	r22, 0xFF	; 255
     b1c:	7f 4f       	sbci	r23, 0xFF	; 255
     b1e:	8f 4f       	sbci	r24, 0xFF	; 255
     b20:	9f 4f       	sbci	r25, 0xFF	; 255
     b22:	08 95       	ret

00000b24 <printf>:
     b24:	a0 e0       	ldi	r26, 0x00	; 0
     b26:	b0 e0       	ldi	r27, 0x00	; 0
     b28:	e8 e9       	ldi	r30, 0x98	; 152
     b2a:	f5 e0       	ldi	r31, 0x05	; 5
     b2c:	0c 94 49 08 	jmp	0x1092	; 0x1092 <__prologue_saves__+0x20>
     b30:	ae 01       	movw	r20, r28
     b32:	4b 5f       	subi	r20, 0xFB	; 251
     b34:	5f 4f       	sbci	r21, 0xFF	; 255
     b36:	fa 01       	movw	r30, r20
     b38:	61 91       	ld	r22, Z+
     b3a:	71 91       	ld	r23, Z+
     b3c:	af 01       	movw	r20, r30
     b3e:	80 91 b3 20 	lds	r24, 0x20B3	; 0x8020b3 <__iob+0x2>
     b42:	90 91 b4 20 	lds	r25, 0x20B4	; 0x8020b4 <__iob+0x3>
     b46:	0e 94 a8 05 	call	0xb50	; 0xb50 <vfprintf>
     b4a:	e2 e0       	ldi	r30, 0x02	; 2
     b4c:	0c 94 62 08 	jmp	0x10c4	; 0x10c4 <__epilogue_restores__+0x20>

00000b50 <vfprintf>:
     b50:	ab e0       	ldi	r26, 0x0B	; 11
     b52:	b0 e0       	ldi	r27, 0x00	; 0
     b54:	ee ea       	ldi	r30, 0xAE	; 174
     b56:	f5 e0       	ldi	r31, 0x05	; 5
     b58:	0c 94 39 08 	jmp	0x1072	; 0x1072 <__prologue_saves__>
     b5c:	6c 01       	movw	r12, r24
     b5e:	7b 01       	movw	r14, r22
     b60:	8a 01       	movw	r16, r20
     b62:	fc 01       	movw	r30, r24
     b64:	16 82       	std	Z+6, r1	; 0x06
     b66:	17 82       	std	Z+7, r1	; 0x07
     b68:	83 81       	ldd	r24, Z+3	; 0x03
     b6a:	81 ff       	sbrs	r24, 1
     b6c:	cc c1       	rjmp	.+920    	; 0xf06 <vfprintf+0x3b6>
     b6e:	ce 01       	movw	r24, r28
     b70:	01 96       	adiw	r24, 0x01	; 1
     b72:	3c 01       	movw	r6, r24
     b74:	f6 01       	movw	r30, r12
     b76:	93 81       	ldd	r25, Z+3	; 0x03
     b78:	f7 01       	movw	r30, r14
     b7a:	93 fd       	sbrc	r25, 3
     b7c:	85 91       	lpm	r24, Z+
     b7e:	93 ff       	sbrs	r25, 3
     b80:	81 91       	ld	r24, Z+
     b82:	7f 01       	movw	r14, r30
     b84:	88 23       	and	r24, r24
     b86:	09 f4       	brne	.+2      	; 0xb8a <vfprintf+0x3a>
     b88:	ba c1       	rjmp	.+884    	; 0xefe <vfprintf+0x3ae>
     b8a:	85 32       	cpi	r24, 0x25	; 37
     b8c:	39 f4       	brne	.+14     	; 0xb9c <vfprintf+0x4c>
     b8e:	93 fd       	sbrc	r25, 3
     b90:	85 91       	lpm	r24, Z+
     b92:	93 ff       	sbrs	r25, 3
     b94:	81 91       	ld	r24, Z+
     b96:	7f 01       	movw	r14, r30
     b98:	85 32       	cpi	r24, 0x25	; 37
     b9a:	29 f4       	brne	.+10     	; 0xba6 <vfprintf+0x56>
     b9c:	b6 01       	movw	r22, r12
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	0e 94 9f 07 	call	0xf3e	; 0xf3e <fputc>
     ba4:	e7 cf       	rjmp	.-50     	; 0xb74 <vfprintf+0x24>
     ba6:	91 2c       	mov	r9, r1
     ba8:	21 2c       	mov	r2, r1
     baa:	31 2c       	mov	r3, r1
     bac:	ff e1       	ldi	r31, 0x1F	; 31
     bae:	f3 15       	cp	r31, r3
     bb0:	d8 f0       	brcs	.+54     	; 0xbe8 <vfprintf+0x98>
     bb2:	8b 32       	cpi	r24, 0x2B	; 43
     bb4:	79 f0       	breq	.+30     	; 0xbd4 <vfprintf+0x84>
     bb6:	38 f4       	brcc	.+14     	; 0xbc6 <vfprintf+0x76>
     bb8:	80 32       	cpi	r24, 0x20	; 32
     bba:	79 f0       	breq	.+30     	; 0xbda <vfprintf+0x8a>
     bbc:	83 32       	cpi	r24, 0x23	; 35
     bbe:	a1 f4       	brne	.+40     	; 0xbe8 <vfprintf+0x98>
     bc0:	23 2d       	mov	r18, r3
     bc2:	20 61       	ori	r18, 0x10	; 16
     bc4:	1d c0       	rjmp	.+58     	; 0xc00 <vfprintf+0xb0>
     bc6:	8d 32       	cpi	r24, 0x2D	; 45
     bc8:	61 f0       	breq	.+24     	; 0xbe2 <vfprintf+0x92>
     bca:	80 33       	cpi	r24, 0x30	; 48
     bcc:	69 f4       	brne	.+26     	; 0xbe8 <vfprintf+0x98>
     bce:	23 2d       	mov	r18, r3
     bd0:	21 60       	ori	r18, 0x01	; 1
     bd2:	16 c0       	rjmp	.+44     	; 0xc00 <vfprintf+0xb0>
     bd4:	83 2d       	mov	r24, r3
     bd6:	82 60       	ori	r24, 0x02	; 2
     bd8:	38 2e       	mov	r3, r24
     bda:	e3 2d       	mov	r30, r3
     bdc:	e4 60       	ori	r30, 0x04	; 4
     bde:	3e 2e       	mov	r3, r30
     be0:	2a c0       	rjmp	.+84     	; 0xc36 <vfprintf+0xe6>
     be2:	f3 2d       	mov	r31, r3
     be4:	f8 60       	ori	r31, 0x08	; 8
     be6:	1d c0       	rjmp	.+58     	; 0xc22 <vfprintf+0xd2>
     be8:	37 fc       	sbrc	r3, 7
     bea:	2d c0       	rjmp	.+90     	; 0xc46 <vfprintf+0xf6>
     bec:	20 ed       	ldi	r18, 0xD0	; 208
     bee:	28 0f       	add	r18, r24
     bf0:	2a 30       	cpi	r18, 0x0A	; 10
     bf2:	40 f0       	brcs	.+16     	; 0xc04 <vfprintf+0xb4>
     bf4:	8e 32       	cpi	r24, 0x2E	; 46
     bf6:	b9 f4       	brne	.+46     	; 0xc26 <vfprintf+0xd6>
     bf8:	36 fc       	sbrc	r3, 6
     bfa:	81 c1       	rjmp	.+770    	; 0xefe <vfprintf+0x3ae>
     bfc:	23 2d       	mov	r18, r3
     bfe:	20 64       	ori	r18, 0x40	; 64
     c00:	32 2e       	mov	r3, r18
     c02:	19 c0       	rjmp	.+50     	; 0xc36 <vfprintf+0xe6>
     c04:	36 fe       	sbrs	r3, 6
     c06:	06 c0       	rjmp	.+12     	; 0xc14 <vfprintf+0xc4>
     c08:	8a e0       	ldi	r24, 0x0A	; 10
     c0a:	98 9e       	mul	r9, r24
     c0c:	20 0d       	add	r18, r0
     c0e:	11 24       	eor	r1, r1
     c10:	92 2e       	mov	r9, r18
     c12:	11 c0       	rjmp	.+34     	; 0xc36 <vfprintf+0xe6>
     c14:	ea e0       	ldi	r30, 0x0A	; 10
     c16:	2e 9e       	mul	r2, r30
     c18:	20 0d       	add	r18, r0
     c1a:	11 24       	eor	r1, r1
     c1c:	22 2e       	mov	r2, r18
     c1e:	f3 2d       	mov	r31, r3
     c20:	f0 62       	ori	r31, 0x20	; 32
     c22:	3f 2e       	mov	r3, r31
     c24:	08 c0       	rjmp	.+16     	; 0xc36 <vfprintf+0xe6>
     c26:	8c 36       	cpi	r24, 0x6C	; 108
     c28:	21 f4       	brne	.+8      	; 0xc32 <vfprintf+0xe2>
     c2a:	83 2d       	mov	r24, r3
     c2c:	80 68       	ori	r24, 0x80	; 128
     c2e:	38 2e       	mov	r3, r24
     c30:	02 c0       	rjmp	.+4      	; 0xc36 <vfprintf+0xe6>
     c32:	88 36       	cpi	r24, 0x68	; 104
     c34:	41 f4       	brne	.+16     	; 0xc46 <vfprintf+0xf6>
     c36:	f7 01       	movw	r30, r14
     c38:	93 fd       	sbrc	r25, 3
     c3a:	85 91       	lpm	r24, Z+
     c3c:	93 ff       	sbrs	r25, 3
     c3e:	81 91       	ld	r24, Z+
     c40:	7f 01       	movw	r14, r30
     c42:	81 11       	cpse	r24, r1
     c44:	b3 cf       	rjmp	.-154    	; 0xbac <vfprintf+0x5c>
     c46:	98 2f       	mov	r25, r24
     c48:	9f 7d       	andi	r25, 0xDF	; 223
     c4a:	95 54       	subi	r25, 0x45	; 69
     c4c:	93 30       	cpi	r25, 0x03	; 3
     c4e:	28 f4       	brcc	.+10     	; 0xc5a <vfprintf+0x10a>
     c50:	0c 5f       	subi	r16, 0xFC	; 252
     c52:	1f 4f       	sbci	r17, 0xFF	; 255
     c54:	9f e3       	ldi	r25, 0x3F	; 63
     c56:	99 83       	std	Y+1, r25	; 0x01
     c58:	0d c0       	rjmp	.+26     	; 0xc74 <vfprintf+0x124>
     c5a:	83 36       	cpi	r24, 0x63	; 99
     c5c:	31 f0       	breq	.+12     	; 0xc6a <vfprintf+0x11a>
     c5e:	83 37       	cpi	r24, 0x73	; 115
     c60:	71 f0       	breq	.+28     	; 0xc7e <vfprintf+0x12e>
     c62:	83 35       	cpi	r24, 0x53	; 83
     c64:	09 f0       	breq	.+2      	; 0xc68 <vfprintf+0x118>
     c66:	59 c0       	rjmp	.+178    	; 0xd1a <vfprintf+0x1ca>
     c68:	21 c0       	rjmp	.+66     	; 0xcac <vfprintf+0x15c>
     c6a:	f8 01       	movw	r30, r16
     c6c:	80 81       	ld	r24, Z
     c6e:	89 83       	std	Y+1, r24	; 0x01
     c70:	0e 5f       	subi	r16, 0xFE	; 254
     c72:	1f 4f       	sbci	r17, 0xFF	; 255
     c74:	88 24       	eor	r8, r8
     c76:	83 94       	inc	r8
     c78:	91 2c       	mov	r9, r1
     c7a:	53 01       	movw	r10, r6
     c7c:	13 c0       	rjmp	.+38     	; 0xca4 <vfprintf+0x154>
     c7e:	28 01       	movw	r4, r16
     c80:	f2 e0       	ldi	r31, 0x02	; 2
     c82:	4f 0e       	add	r4, r31
     c84:	51 1c       	adc	r5, r1
     c86:	f8 01       	movw	r30, r16
     c88:	a0 80       	ld	r10, Z
     c8a:	b1 80       	ldd	r11, Z+1	; 0x01
     c8c:	36 fe       	sbrs	r3, 6
     c8e:	03 c0       	rjmp	.+6      	; 0xc96 <vfprintf+0x146>
     c90:	69 2d       	mov	r22, r9
     c92:	70 e0       	ldi	r23, 0x00	; 0
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <vfprintf+0x14a>
     c96:	6f ef       	ldi	r22, 0xFF	; 255
     c98:	7f ef       	ldi	r23, 0xFF	; 255
     c9a:	c5 01       	movw	r24, r10
     c9c:	0e 94 94 07 	call	0xf28	; 0xf28 <strnlen>
     ca0:	4c 01       	movw	r8, r24
     ca2:	82 01       	movw	r16, r4
     ca4:	f3 2d       	mov	r31, r3
     ca6:	ff 77       	andi	r31, 0x7F	; 127
     ca8:	3f 2e       	mov	r3, r31
     caa:	16 c0       	rjmp	.+44     	; 0xcd8 <vfprintf+0x188>
     cac:	28 01       	movw	r4, r16
     cae:	22 e0       	ldi	r18, 0x02	; 2
     cb0:	42 0e       	add	r4, r18
     cb2:	51 1c       	adc	r5, r1
     cb4:	f8 01       	movw	r30, r16
     cb6:	a0 80       	ld	r10, Z
     cb8:	b1 80       	ldd	r11, Z+1	; 0x01
     cba:	36 fe       	sbrs	r3, 6
     cbc:	03 c0       	rjmp	.+6      	; 0xcc4 <vfprintf+0x174>
     cbe:	69 2d       	mov	r22, r9
     cc0:	70 e0       	ldi	r23, 0x00	; 0
     cc2:	02 c0       	rjmp	.+4      	; 0xcc8 <vfprintf+0x178>
     cc4:	6f ef       	ldi	r22, 0xFF	; 255
     cc6:	7f ef       	ldi	r23, 0xFF	; 255
     cc8:	c5 01       	movw	r24, r10
     cca:	0e 94 89 07 	call	0xf12	; 0xf12 <strnlen_P>
     cce:	4c 01       	movw	r8, r24
     cd0:	f3 2d       	mov	r31, r3
     cd2:	f0 68       	ori	r31, 0x80	; 128
     cd4:	3f 2e       	mov	r3, r31
     cd6:	82 01       	movw	r16, r4
     cd8:	33 fc       	sbrc	r3, 3
     cda:	1b c0       	rjmp	.+54     	; 0xd12 <vfprintf+0x1c2>
     cdc:	82 2d       	mov	r24, r2
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	88 16       	cp	r8, r24
     ce2:	99 06       	cpc	r9, r25
     ce4:	b0 f4       	brcc	.+44     	; 0xd12 <vfprintf+0x1c2>
     ce6:	b6 01       	movw	r22, r12
     ce8:	80 e2       	ldi	r24, 0x20	; 32
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	0e 94 9f 07 	call	0xf3e	; 0xf3e <fputc>
     cf0:	2a 94       	dec	r2
     cf2:	f4 cf       	rjmp	.-24     	; 0xcdc <vfprintf+0x18c>
     cf4:	f5 01       	movw	r30, r10
     cf6:	37 fc       	sbrc	r3, 7
     cf8:	85 91       	lpm	r24, Z+
     cfa:	37 fe       	sbrs	r3, 7
     cfc:	81 91       	ld	r24, Z+
     cfe:	5f 01       	movw	r10, r30
     d00:	b6 01       	movw	r22, r12
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	0e 94 9f 07 	call	0xf3e	; 0xf3e <fputc>
     d08:	21 10       	cpse	r2, r1
     d0a:	2a 94       	dec	r2
     d0c:	21 e0       	ldi	r18, 0x01	; 1
     d0e:	82 1a       	sub	r8, r18
     d10:	91 08       	sbc	r9, r1
     d12:	81 14       	cp	r8, r1
     d14:	91 04       	cpc	r9, r1
     d16:	71 f7       	brne	.-36     	; 0xcf4 <vfprintf+0x1a4>
     d18:	e8 c0       	rjmp	.+464    	; 0xeea <vfprintf+0x39a>
     d1a:	84 36       	cpi	r24, 0x64	; 100
     d1c:	11 f0       	breq	.+4      	; 0xd22 <vfprintf+0x1d2>
     d1e:	89 36       	cpi	r24, 0x69	; 105
     d20:	41 f5       	brne	.+80     	; 0xd72 <vfprintf+0x222>
     d22:	f8 01       	movw	r30, r16
     d24:	37 fe       	sbrs	r3, 7
     d26:	07 c0       	rjmp	.+14     	; 0xd36 <vfprintf+0x1e6>
     d28:	60 81       	ld	r22, Z
     d2a:	71 81       	ldd	r23, Z+1	; 0x01
     d2c:	82 81       	ldd	r24, Z+2	; 0x02
     d2e:	93 81       	ldd	r25, Z+3	; 0x03
     d30:	0c 5f       	subi	r16, 0xFC	; 252
     d32:	1f 4f       	sbci	r17, 0xFF	; 255
     d34:	08 c0       	rjmp	.+16     	; 0xd46 <vfprintf+0x1f6>
     d36:	60 81       	ld	r22, Z
     d38:	71 81       	ldd	r23, Z+1	; 0x01
     d3a:	07 2e       	mov	r0, r23
     d3c:	00 0c       	add	r0, r0
     d3e:	88 0b       	sbc	r24, r24
     d40:	99 0b       	sbc	r25, r25
     d42:	0e 5f       	subi	r16, 0xFE	; 254
     d44:	1f 4f       	sbci	r17, 0xFF	; 255
     d46:	f3 2d       	mov	r31, r3
     d48:	ff 76       	andi	r31, 0x6F	; 111
     d4a:	3f 2e       	mov	r3, r31
     d4c:	97 ff       	sbrs	r25, 7
     d4e:	09 c0       	rjmp	.+18     	; 0xd62 <vfprintf+0x212>
     d50:	90 95       	com	r25
     d52:	80 95       	com	r24
     d54:	70 95       	com	r23
     d56:	61 95       	neg	r22
     d58:	7f 4f       	sbci	r23, 0xFF	; 255
     d5a:	8f 4f       	sbci	r24, 0xFF	; 255
     d5c:	9f 4f       	sbci	r25, 0xFF	; 255
     d5e:	f0 68       	ori	r31, 0x80	; 128
     d60:	3f 2e       	mov	r3, r31
     d62:	2a e0       	ldi	r18, 0x0A	; 10
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	a3 01       	movw	r20, r6
     d68:	0e 94 db 07 	call	0xfb6	; 0xfb6 <__ultoa_invert>
     d6c:	88 2e       	mov	r8, r24
     d6e:	86 18       	sub	r8, r6
     d70:	45 c0       	rjmp	.+138    	; 0xdfc <vfprintf+0x2ac>
     d72:	85 37       	cpi	r24, 0x75	; 117
     d74:	31 f4       	brne	.+12     	; 0xd82 <vfprintf+0x232>
     d76:	23 2d       	mov	r18, r3
     d78:	2f 7e       	andi	r18, 0xEF	; 239
     d7a:	b2 2e       	mov	r11, r18
     d7c:	2a e0       	ldi	r18, 0x0A	; 10
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	25 c0       	rjmp	.+74     	; 0xdcc <vfprintf+0x27c>
     d82:	93 2d       	mov	r25, r3
     d84:	99 7f       	andi	r25, 0xF9	; 249
     d86:	b9 2e       	mov	r11, r25
     d88:	8f 36       	cpi	r24, 0x6F	; 111
     d8a:	c1 f0       	breq	.+48     	; 0xdbc <vfprintf+0x26c>
     d8c:	18 f4       	brcc	.+6      	; 0xd94 <vfprintf+0x244>
     d8e:	88 35       	cpi	r24, 0x58	; 88
     d90:	79 f0       	breq	.+30     	; 0xdb0 <vfprintf+0x260>
     d92:	b5 c0       	rjmp	.+362    	; 0xefe <vfprintf+0x3ae>
     d94:	80 37       	cpi	r24, 0x70	; 112
     d96:	19 f0       	breq	.+6      	; 0xd9e <vfprintf+0x24e>
     d98:	88 37       	cpi	r24, 0x78	; 120
     d9a:	21 f0       	breq	.+8      	; 0xda4 <vfprintf+0x254>
     d9c:	b0 c0       	rjmp	.+352    	; 0xefe <vfprintf+0x3ae>
     d9e:	e9 2f       	mov	r30, r25
     da0:	e0 61       	ori	r30, 0x10	; 16
     da2:	be 2e       	mov	r11, r30
     da4:	b4 fe       	sbrs	r11, 4
     da6:	0d c0       	rjmp	.+26     	; 0xdc2 <vfprintf+0x272>
     da8:	fb 2d       	mov	r31, r11
     daa:	f4 60       	ori	r31, 0x04	; 4
     dac:	bf 2e       	mov	r11, r31
     dae:	09 c0       	rjmp	.+18     	; 0xdc2 <vfprintf+0x272>
     db0:	34 fe       	sbrs	r3, 4
     db2:	0a c0       	rjmp	.+20     	; 0xdc8 <vfprintf+0x278>
     db4:	29 2f       	mov	r18, r25
     db6:	26 60       	ori	r18, 0x06	; 6
     db8:	b2 2e       	mov	r11, r18
     dba:	06 c0       	rjmp	.+12     	; 0xdc8 <vfprintf+0x278>
     dbc:	28 e0       	ldi	r18, 0x08	; 8
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	05 c0       	rjmp	.+10     	; 0xdcc <vfprintf+0x27c>
     dc2:	20 e1       	ldi	r18, 0x10	; 16
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	02 c0       	rjmp	.+4      	; 0xdcc <vfprintf+0x27c>
     dc8:	20 e1       	ldi	r18, 0x10	; 16
     dca:	32 e0       	ldi	r19, 0x02	; 2
     dcc:	f8 01       	movw	r30, r16
     dce:	b7 fe       	sbrs	r11, 7
     dd0:	07 c0       	rjmp	.+14     	; 0xde0 <vfprintf+0x290>
     dd2:	60 81       	ld	r22, Z
     dd4:	71 81       	ldd	r23, Z+1	; 0x01
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	0c 5f       	subi	r16, 0xFC	; 252
     ddc:	1f 4f       	sbci	r17, 0xFF	; 255
     dde:	06 c0       	rjmp	.+12     	; 0xdec <vfprintf+0x29c>
     de0:	60 81       	ld	r22, Z
     de2:	71 81       	ldd	r23, Z+1	; 0x01
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	0e 5f       	subi	r16, 0xFE	; 254
     dea:	1f 4f       	sbci	r17, 0xFF	; 255
     dec:	a3 01       	movw	r20, r6
     dee:	0e 94 db 07 	call	0xfb6	; 0xfb6 <__ultoa_invert>
     df2:	88 2e       	mov	r8, r24
     df4:	86 18       	sub	r8, r6
     df6:	fb 2d       	mov	r31, r11
     df8:	ff 77       	andi	r31, 0x7F	; 127
     dfa:	3f 2e       	mov	r3, r31
     dfc:	36 fe       	sbrs	r3, 6
     dfe:	0d c0       	rjmp	.+26     	; 0xe1a <vfprintf+0x2ca>
     e00:	23 2d       	mov	r18, r3
     e02:	2e 7f       	andi	r18, 0xFE	; 254
     e04:	a2 2e       	mov	r10, r18
     e06:	89 14       	cp	r8, r9
     e08:	58 f4       	brcc	.+22     	; 0xe20 <vfprintf+0x2d0>
     e0a:	34 fe       	sbrs	r3, 4
     e0c:	0b c0       	rjmp	.+22     	; 0xe24 <vfprintf+0x2d4>
     e0e:	32 fc       	sbrc	r3, 2
     e10:	09 c0       	rjmp	.+18     	; 0xe24 <vfprintf+0x2d4>
     e12:	83 2d       	mov	r24, r3
     e14:	8e 7e       	andi	r24, 0xEE	; 238
     e16:	a8 2e       	mov	r10, r24
     e18:	05 c0       	rjmp	.+10     	; 0xe24 <vfprintf+0x2d4>
     e1a:	b8 2c       	mov	r11, r8
     e1c:	a3 2c       	mov	r10, r3
     e1e:	03 c0       	rjmp	.+6      	; 0xe26 <vfprintf+0x2d6>
     e20:	b8 2c       	mov	r11, r8
     e22:	01 c0       	rjmp	.+2      	; 0xe26 <vfprintf+0x2d6>
     e24:	b9 2c       	mov	r11, r9
     e26:	a4 fe       	sbrs	r10, 4
     e28:	0f c0       	rjmp	.+30     	; 0xe48 <vfprintf+0x2f8>
     e2a:	fe 01       	movw	r30, r28
     e2c:	e8 0d       	add	r30, r8
     e2e:	f1 1d       	adc	r31, r1
     e30:	80 81       	ld	r24, Z
     e32:	80 33       	cpi	r24, 0x30	; 48
     e34:	21 f4       	brne	.+8      	; 0xe3e <vfprintf+0x2ee>
     e36:	9a 2d       	mov	r25, r10
     e38:	99 7e       	andi	r25, 0xE9	; 233
     e3a:	a9 2e       	mov	r10, r25
     e3c:	09 c0       	rjmp	.+18     	; 0xe50 <vfprintf+0x300>
     e3e:	a2 fe       	sbrs	r10, 2
     e40:	06 c0       	rjmp	.+12     	; 0xe4e <vfprintf+0x2fe>
     e42:	b3 94       	inc	r11
     e44:	b3 94       	inc	r11
     e46:	04 c0       	rjmp	.+8      	; 0xe50 <vfprintf+0x300>
     e48:	8a 2d       	mov	r24, r10
     e4a:	86 78       	andi	r24, 0x86	; 134
     e4c:	09 f0       	breq	.+2      	; 0xe50 <vfprintf+0x300>
     e4e:	b3 94       	inc	r11
     e50:	a3 fc       	sbrc	r10, 3
     e52:	11 c0       	rjmp	.+34     	; 0xe76 <vfprintf+0x326>
     e54:	a0 fe       	sbrs	r10, 0
     e56:	06 c0       	rjmp	.+12     	; 0xe64 <vfprintf+0x314>
     e58:	b2 14       	cp	r11, r2
     e5a:	88 f4       	brcc	.+34     	; 0xe7e <vfprintf+0x32e>
     e5c:	28 0c       	add	r2, r8
     e5e:	92 2c       	mov	r9, r2
     e60:	9b 18       	sub	r9, r11
     e62:	0e c0       	rjmp	.+28     	; 0xe80 <vfprintf+0x330>
     e64:	b2 14       	cp	r11, r2
     e66:	60 f4       	brcc	.+24     	; 0xe80 <vfprintf+0x330>
     e68:	b6 01       	movw	r22, r12
     e6a:	80 e2       	ldi	r24, 0x20	; 32
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	0e 94 9f 07 	call	0xf3e	; 0xf3e <fputc>
     e72:	b3 94       	inc	r11
     e74:	f7 cf       	rjmp	.-18     	; 0xe64 <vfprintf+0x314>
     e76:	b2 14       	cp	r11, r2
     e78:	18 f4       	brcc	.+6      	; 0xe80 <vfprintf+0x330>
     e7a:	2b 18       	sub	r2, r11
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <vfprintf+0x332>
     e7e:	98 2c       	mov	r9, r8
     e80:	21 2c       	mov	r2, r1
     e82:	a4 fe       	sbrs	r10, 4
     e84:	10 c0       	rjmp	.+32     	; 0xea6 <vfprintf+0x356>
     e86:	b6 01       	movw	r22, r12
     e88:	80 e3       	ldi	r24, 0x30	; 48
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	0e 94 9f 07 	call	0xf3e	; 0xf3e <fputc>
     e90:	a2 fe       	sbrs	r10, 2
     e92:	17 c0       	rjmp	.+46     	; 0xec2 <vfprintf+0x372>
     e94:	a1 fc       	sbrc	r10, 1
     e96:	03 c0       	rjmp	.+6      	; 0xe9e <vfprintf+0x34e>
     e98:	88 e7       	ldi	r24, 0x78	; 120
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	02 c0       	rjmp	.+4      	; 0xea2 <vfprintf+0x352>
     e9e:	88 e5       	ldi	r24, 0x58	; 88
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	b6 01       	movw	r22, r12
     ea4:	0c c0       	rjmp	.+24     	; 0xebe <vfprintf+0x36e>
     ea6:	8a 2d       	mov	r24, r10
     ea8:	86 78       	andi	r24, 0x86	; 134
     eaa:	59 f0       	breq	.+22     	; 0xec2 <vfprintf+0x372>
     eac:	a1 fe       	sbrs	r10, 1
     eae:	02 c0       	rjmp	.+4      	; 0xeb4 <vfprintf+0x364>
     eb0:	8b e2       	ldi	r24, 0x2B	; 43
     eb2:	01 c0       	rjmp	.+2      	; 0xeb6 <vfprintf+0x366>
     eb4:	80 e2       	ldi	r24, 0x20	; 32
     eb6:	a7 fc       	sbrc	r10, 7
     eb8:	8d e2       	ldi	r24, 0x2D	; 45
     eba:	b6 01       	movw	r22, r12
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	0e 94 9f 07 	call	0xf3e	; 0xf3e <fputc>
     ec2:	89 14       	cp	r8, r9
     ec4:	38 f4       	brcc	.+14     	; 0xed4 <vfprintf+0x384>
     ec6:	b6 01       	movw	r22, r12
     ec8:	80 e3       	ldi	r24, 0x30	; 48
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	0e 94 9f 07 	call	0xf3e	; 0xf3e <fputc>
     ed0:	9a 94       	dec	r9
     ed2:	f7 cf       	rjmp	.-18     	; 0xec2 <vfprintf+0x372>
     ed4:	8a 94       	dec	r8
     ed6:	f3 01       	movw	r30, r6
     ed8:	e8 0d       	add	r30, r8
     eda:	f1 1d       	adc	r31, r1
     edc:	80 81       	ld	r24, Z
     ede:	b6 01       	movw	r22, r12
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	0e 94 9f 07 	call	0xf3e	; 0xf3e <fputc>
     ee6:	81 10       	cpse	r8, r1
     ee8:	f5 cf       	rjmp	.-22     	; 0xed4 <vfprintf+0x384>
     eea:	22 20       	and	r2, r2
     eec:	09 f4       	brne	.+2      	; 0xef0 <vfprintf+0x3a0>
     eee:	42 ce       	rjmp	.-892    	; 0xb74 <vfprintf+0x24>
     ef0:	b6 01       	movw	r22, r12
     ef2:	80 e2       	ldi	r24, 0x20	; 32
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	0e 94 9f 07 	call	0xf3e	; 0xf3e <fputc>
     efa:	2a 94       	dec	r2
     efc:	f6 cf       	rjmp	.-20     	; 0xeea <vfprintf+0x39a>
     efe:	f6 01       	movw	r30, r12
     f00:	86 81       	ldd	r24, Z+6	; 0x06
     f02:	97 81       	ldd	r25, Z+7	; 0x07
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <vfprintf+0x3ba>
     f06:	8f ef       	ldi	r24, 0xFF	; 255
     f08:	9f ef       	ldi	r25, 0xFF	; 255
     f0a:	2b 96       	adiw	r28, 0x0b	; 11
     f0c:	e2 e1       	ldi	r30, 0x12	; 18
     f0e:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__epilogue_restores__>

00000f12 <strnlen_P>:
     f12:	fc 01       	movw	r30, r24
     f14:	05 90       	lpm	r0, Z+
     f16:	61 50       	subi	r22, 0x01	; 1
     f18:	70 40       	sbci	r23, 0x00	; 0
     f1a:	01 10       	cpse	r0, r1
     f1c:	d8 f7       	brcc	.-10     	; 0xf14 <strnlen_P+0x2>
     f1e:	80 95       	com	r24
     f20:	90 95       	com	r25
     f22:	8e 0f       	add	r24, r30
     f24:	9f 1f       	adc	r25, r31
     f26:	08 95       	ret

00000f28 <strnlen>:
     f28:	fc 01       	movw	r30, r24
     f2a:	61 50       	subi	r22, 0x01	; 1
     f2c:	70 40       	sbci	r23, 0x00	; 0
     f2e:	01 90       	ld	r0, Z+
     f30:	01 10       	cpse	r0, r1
     f32:	d8 f7       	brcc	.-10     	; 0xf2a <strnlen+0x2>
     f34:	80 95       	com	r24
     f36:	90 95       	com	r25
     f38:	8e 0f       	add	r24, r30
     f3a:	9f 1f       	adc	r25, r31
     f3c:	08 95       	ret

00000f3e <fputc>:
     f3e:	0f 93       	push	r16
     f40:	1f 93       	push	r17
     f42:	cf 93       	push	r28
     f44:	df 93       	push	r29
     f46:	fb 01       	movw	r30, r22
     f48:	23 81       	ldd	r18, Z+3	; 0x03
     f4a:	21 fd       	sbrc	r18, 1
     f4c:	03 c0       	rjmp	.+6      	; 0xf54 <fputc+0x16>
     f4e:	8f ef       	ldi	r24, 0xFF	; 255
     f50:	9f ef       	ldi	r25, 0xFF	; 255
     f52:	2c c0       	rjmp	.+88     	; 0xfac <fputc+0x6e>
     f54:	22 ff       	sbrs	r18, 2
     f56:	16 c0       	rjmp	.+44     	; 0xf84 <fputc+0x46>
     f58:	46 81       	ldd	r20, Z+6	; 0x06
     f5a:	57 81       	ldd	r21, Z+7	; 0x07
     f5c:	24 81       	ldd	r18, Z+4	; 0x04
     f5e:	35 81       	ldd	r19, Z+5	; 0x05
     f60:	42 17       	cp	r20, r18
     f62:	53 07       	cpc	r21, r19
     f64:	44 f4       	brge	.+16     	; 0xf76 <fputc+0x38>
     f66:	a0 81       	ld	r26, Z
     f68:	b1 81       	ldd	r27, Z+1	; 0x01
     f6a:	9d 01       	movw	r18, r26
     f6c:	2f 5f       	subi	r18, 0xFF	; 255
     f6e:	3f 4f       	sbci	r19, 0xFF	; 255
     f70:	20 83       	st	Z, r18
     f72:	31 83       	std	Z+1, r19	; 0x01
     f74:	8c 93       	st	X, r24
     f76:	26 81       	ldd	r18, Z+6	; 0x06
     f78:	37 81       	ldd	r19, Z+7	; 0x07
     f7a:	2f 5f       	subi	r18, 0xFF	; 255
     f7c:	3f 4f       	sbci	r19, 0xFF	; 255
     f7e:	26 83       	std	Z+6, r18	; 0x06
     f80:	37 83       	std	Z+7, r19	; 0x07
     f82:	14 c0       	rjmp	.+40     	; 0xfac <fputc+0x6e>
     f84:	8b 01       	movw	r16, r22
     f86:	ec 01       	movw	r28, r24
     f88:	fb 01       	movw	r30, r22
     f8a:	00 84       	ldd	r0, Z+8	; 0x08
     f8c:	f1 85       	ldd	r31, Z+9	; 0x09
     f8e:	e0 2d       	mov	r30, r0
     f90:	09 95       	icall
     f92:	89 2b       	or	r24, r25
     f94:	e1 f6       	brne	.-72     	; 0xf4e <fputc+0x10>
     f96:	d8 01       	movw	r26, r16
     f98:	16 96       	adiw	r26, 0x06	; 6
     f9a:	8d 91       	ld	r24, X+
     f9c:	9c 91       	ld	r25, X
     f9e:	17 97       	sbiw	r26, 0x07	; 7
     fa0:	01 96       	adiw	r24, 0x01	; 1
     fa2:	16 96       	adiw	r26, 0x06	; 6
     fa4:	8d 93       	st	X+, r24
     fa6:	9c 93       	st	X, r25
     fa8:	17 97       	sbiw	r26, 0x07	; 7
     faa:	ce 01       	movw	r24, r28
     fac:	df 91       	pop	r29
     fae:	cf 91       	pop	r28
     fb0:	1f 91       	pop	r17
     fb2:	0f 91       	pop	r16
     fb4:	08 95       	ret

00000fb6 <__ultoa_invert>:
     fb6:	fa 01       	movw	r30, r20
     fb8:	aa 27       	eor	r26, r26
     fba:	28 30       	cpi	r18, 0x08	; 8
     fbc:	51 f1       	breq	.+84     	; 0x1012 <__ultoa_invert+0x5c>
     fbe:	20 31       	cpi	r18, 0x10	; 16
     fc0:	81 f1       	breq	.+96     	; 0x1022 <__ultoa_invert+0x6c>
     fc2:	e8 94       	clt
     fc4:	6f 93       	push	r22
     fc6:	6e 7f       	andi	r22, 0xFE	; 254
     fc8:	6e 5f       	subi	r22, 0xFE	; 254
     fca:	7f 4f       	sbci	r23, 0xFF	; 255
     fcc:	8f 4f       	sbci	r24, 0xFF	; 255
     fce:	9f 4f       	sbci	r25, 0xFF	; 255
     fd0:	af 4f       	sbci	r26, 0xFF	; 255
     fd2:	b1 e0       	ldi	r27, 0x01	; 1
     fd4:	3e d0       	rcall	.+124    	; 0x1052 <__ultoa_invert+0x9c>
     fd6:	b4 e0       	ldi	r27, 0x04	; 4
     fd8:	3c d0       	rcall	.+120    	; 0x1052 <__ultoa_invert+0x9c>
     fda:	67 0f       	add	r22, r23
     fdc:	78 1f       	adc	r23, r24
     fde:	89 1f       	adc	r24, r25
     fe0:	9a 1f       	adc	r25, r26
     fe2:	a1 1d       	adc	r26, r1
     fe4:	68 0f       	add	r22, r24
     fe6:	79 1f       	adc	r23, r25
     fe8:	8a 1f       	adc	r24, r26
     fea:	91 1d       	adc	r25, r1
     fec:	a1 1d       	adc	r26, r1
     fee:	6a 0f       	add	r22, r26
     ff0:	71 1d       	adc	r23, r1
     ff2:	81 1d       	adc	r24, r1
     ff4:	91 1d       	adc	r25, r1
     ff6:	a1 1d       	adc	r26, r1
     ff8:	20 d0       	rcall	.+64     	; 0x103a <__ultoa_invert+0x84>
     ffa:	09 f4       	brne	.+2      	; 0xffe <__ultoa_invert+0x48>
     ffc:	68 94       	set
     ffe:	3f 91       	pop	r19
    1000:	2a e0       	ldi	r18, 0x0A	; 10
    1002:	26 9f       	mul	r18, r22
    1004:	11 24       	eor	r1, r1
    1006:	30 19       	sub	r19, r0
    1008:	30 5d       	subi	r19, 0xD0	; 208
    100a:	31 93       	st	Z+, r19
    100c:	de f6       	brtc	.-74     	; 0xfc4 <__ultoa_invert+0xe>
    100e:	cf 01       	movw	r24, r30
    1010:	08 95       	ret
    1012:	46 2f       	mov	r20, r22
    1014:	47 70       	andi	r20, 0x07	; 7
    1016:	40 5d       	subi	r20, 0xD0	; 208
    1018:	41 93       	st	Z+, r20
    101a:	b3 e0       	ldi	r27, 0x03	; 3
    101c:	0f d0       	rcall	.+30     	; 0x103c <__ultoa_invert+0x86>
    101e:	c9 f7       	brne	.-14     	; 0x1012 <__ultoa_invert+0x5c>
    1020:	f6 cf       	rjmp	.-20     	; 0x100e <__ultoa_invert+0x58>
    1022:	46 2f       	mov	r20, r22
    1024:	4f 70       	andi	r20, 0x0F	; 15
    1026:	40 5d       	subi	r20, 0xD0	; 208
    1028:	4a 33       	cpi	r20, 0x3A	; 58
    102a:	18 f0       	brcs	.+6      	; 0x1032 <__ultoa_invert+0x7c>
    102c:	49 5d       	subi	r20, 0xD9	; 217
    102e:	31 fd       	sbrc	r19, 1
    1030:	40 52       	subi	r20, 0x20	; 32
    1032:	41 93       	st	Z+, r20
    1034:	02 d0       	rcall	.+4      	; 0x103a <__ultoa_invert+0x84>
    1036:	a9 f7       	brne	.-22     	; 0x1022 <__ultoa_invert+0x6c>
    1038:	ea cf       	rjmp	.-44     	; 0x100e <__ultoa_invert+0x58>
    103a:	b4 e0       	ldi	r27, 0x04	; 4
    103c:	a6 95       	lsr	r26
    103e:	97 95       	ror	r25
    1040:	87 95       	ror	r24
    1042:	77 95       	ror	r23
    1044:	67 95       	ror	r22
    1046:	ba 95       	dec	r27
    1048:	c9 f7       	brne	.-14     	; 0x103c <__ultoa_invert+0x86>
    104a:	00 97       	sbiw	r24, 0x00	; 0
    104c:	61 05       	cpc	r22, r1
    104e:	71 05       	cpc	r23, r1
    1050:	08 95       	ret
    1052:	9b 01       	movw	r18, r22
    1054:	ac 01       	movw	r20, r24
    1056:	0a 2e       	mov	r0, r26
    1058:	06 94       	lsr	r0
    105a:	57 95       	ror	r21
    105c:	47 95       	ror	r20
    105e:	37 95       	ror	r19
    1060:	27 95       	ror	r18
    1062:	ba 95       	dec	r27
    1064:	c9 f7       	brne	.-14     	; 0x1058 <__ultoa_invert+0xa2>
    1066:	62 0f       	add	r22, r18
    1068:	73 1f       	adc	r23, r19
    106a:	84 1f       	adc	r24, r20
    106c:	95 1f       	adc	r25, r21
    106e:	a0 1d       	adc	r26, r0
    1070:	08 95       	ret

00001072 <__prologue_saves__>:
    1072:	2f 92       	push	r2
    1074:	3f 92       	push	r3
    1076:	4f 92       	push	r4
    1078:	5f 92       	push	r5
    107a:	6f 92       	push	r6
    107c:	7f 92       	push	r7
    107e:	8f 92       	push	r8
    1080:	9f 92       	push	r9
    1082:	af 92       	push	r10
    1084:	bf 92       	push	r11
    1086:	cf 92       	push	r12
    1088:	df 92       	push	r13
    108a:	ef 92       	push	r14
    108c:	ff 92       	push	r15
    108e:	0f 93       	push	r16
    1090:	1f 93       	push	r17
    1092:	cf 93       	push	r28
    1094:	df 93       	push	r29
    1096:	cd b7       	in	r28, 0x3d	; 61
    1098:	de b7       	in	r29, 0x3e	; 62
    109a:	ca 1b       	sub	r28, r26
    109c:	db 0b       	sbc	r29, r27
    109e:	cd bf       	out	0x3d, r28	; 61
    10a0:	de bf       	out	0x3e, r29	; 62
    10a2:	09 94       	ijmp

000010a4 <__epilogue_restores__>:
    10a4:	2a 88       	ldd	r2, Y+18	; 0x12
    10a6:	39 88       	ldd	r3, Y+17	; 0x11
    10a8:	48 88       	ldd	r4, Y+16	; 0x10
    10aa:	5f 84       	ldd	r5, Y+15	; 0x0f
    10ac:	6e 84       	ldd	r6, Y+14	; 0x0e
    10ae:	7d 84       	ldd	r7, Y+13	; 0x0d
    10b0:	8c 84       	ldd	r8, Y+12	; 0x0c
    10b2:	9b 84       	ldd	r9, Y+11	; 0x0b
    10b4:	aa 84       	ldd	r10, Y+10	; 0x0a
    10b6:	b9 84       	ldd	r11, Y+9	; 0x09
    10b8:	c8 84       	ldd	r12, Y+8	; 0x08
    10ba:	df 80       	ldd	r13, Y+7	; 0x07
    10bc:	ee 80       	ldd	r14, Y+6	; 0x06
    10be:	fd 80       	ldd	r15, Y+5	; 0x05
    10c0:	0c 81       	ldd	r16, Y+4	; 0x04
    10c2:	1b 81       	ldd	r17, Y+3	; 0x03
    10c4:	aa 81       	ldd	r26, Y+2	; 0x02
    10c6:	b9 81       	ldd	r27, Y+1	; 0x01
    10c8:	ce 0f       	add	r28, r30
    10ca:	d1 1d       	adc	r29, r1
    10cc:	cd bf       	out	0x3d, r28	; 61
    10ce:	de bf       	out	0x3e, r29	; 62
    10d0:	ed 01       	movw	r28, r26
    10d2:	08 95       	ret

000010d4 <_exit>:
    10d4:	f8 94       	cli

000010d6 <__stop_program>:
    10d6:	ff cf       	rjmp	.-2      	; 0x10d6 <__stop_program>
