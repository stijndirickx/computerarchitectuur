
gamecontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001360  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004a  00802000  00001360  000013f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006d  0080204a  0080204a  0000143e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000143e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000149c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  000014dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001992  00000000  00000000  00001684  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000821  00000000  00000000  00003016  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001aa0  00000000  00000000  00003837  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003f8  00000000  00000000  000052d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00011f4e  00000000  00000000  000056d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000681  00000000  00000000  0001761e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00017c9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000058d5  00000000  00000000  00017db7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__ctors_end>
       4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
       8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
       c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      10:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      14:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      18:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      1c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      20:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      24:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      28:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      2c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      30:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      34:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      38:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      3c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      40:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      44:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      48:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      4c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      50:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      54:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      58:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      5c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      60:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      64:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      68:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      6c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      70:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      74:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      78:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      7c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      80:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      84:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      88:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      8c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      90:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      94:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      98:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      9c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      a0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      a4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      a8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      ac:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      b0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      b4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      b8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      bc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      c0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      c4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      c8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      cc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      d0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      d4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      d8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      dc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      e0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      e4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      e8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      ec:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      f0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      f4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      f8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      fc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     100:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     104:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     108:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     10c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     110:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     114:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     118:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     11c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     120:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     124:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     128:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     12c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     130:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     134:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     138:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     13c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     140:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     144:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     148:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     14c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     150:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     154:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     158:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     15c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     160:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     164:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     168:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>

0000016c <__ctors_end>:
     16c:	11 24       	eor	r1, r1
     16e:	1f be       	out	0x3f, r1	; 63
     170:	cf ef       	ldi	r28, 0xFF	; 255
     172:	cd bf       	out	0x3d, r28	; 61
     174:	d7 e2       	ldi	r29, 0x27	; 39
     176:	de bf       	out	0x3e, r29	; 62

00000178 <__do_copy_data>:
     178:	10 e2       	ldi	r17, 0x20	; 32
     17a:	a0 e0       	ldi	r26, 0x00	; 0
     17c:	b0 e2       	ldi	r27, 0x20	; 32
     17e:	e0 e6       	ldi	r30, 0x60	; 96
     180:	f3 e1       	ldi	r31, 0x13	; 19
     182:	02 c0       	rjmp	.+4      	; 0x188 <__do_copy_data+0x10>
     184:	05 90       	lpm	r0, Z+
     186:	0d 92       	st	X+, r0
     188:	aa 34       	cpi	r26, 0x4A	; 74
     18a:	b1 07       	cpc	r27, r17
     18c:	d9 f7       	brne	.-10     	; 0x184 <__do_copy_data+0xc>

0000018e <__do_clear_bss>:
     18e:	20 e2       	ldi	r18, 0x20	; 32
     190:	aa e4       	ldi	r26, 0x4A	; 74
     192:	b0 e2       	ldi	r27, 0x20	; 32
     194:	01 c0       	rjmp	.+2      	; 0x198 <.do_clear_bss_start>

00000196 <.do_clear_bss_loop>:
     196:	1d 92       	st	X+, r1

00000198 <.do_clear_bss_start>:
     198:	a7 3b       	cpi	r26, 0xB7	; 183
     19a:	b2 07       	cpc	r27, r18
     19c:	e1 f7       	brne	.-8      	; 0x196 <.do_clear_bss_loop>
     19e:	0e 94 47 02 	call	0x48e	; 0x48e <main>
     1a2:	0c 94 ae 09 	jmp	0x135c	; 0x135c <_exit>

000001a6 <__bad_interrupt>:
     1a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001aa <AccInit>:
#include "acc.h"



void AccInit(void)
{
     1aa:	cf 93       	push	r28
     1ac:	df 93       	push	r29
     1ae:	cd b7       	in	r28, 0x3d	; 61
     1b0:	de b7       	in	r29, 0x3e	; 62
	//De accelerometer dient geïnitialiseerd te worden.
	//Dit houdt in dat de accelerometer uit slaaptoestand moet gehaald worden. 

	//accelerometer uit slaaptoestand
	// PC6 = ACC_SLEEP
	PORTC.DIRSET = 0b01000000;
     1b2:	80 e4       	ldi	r24, 0x40	; 64
     1b4:	96 e0       	ldi	r25, 0x06	; 6
     1b6:	20 e4       	ldi	r18, 0x40	; 64
     1b8:	fc 01       	movw	r30, r24
     1ba:	21 83       	std	Z+1, r18	; 0x01
	PORTC.PIN6CTRL = 0b00010001; // 0 reserved - 0 inverted IO enable - 010 Pull-down (on input) - 001 Sense rising edge
     1bc:	80 e4       	ldi	r24, 0x40	; 64
     1be:	96 e0       	ldi	r25, 0x06	; 6
     1c0:	21 e1       	ldi	r18, 0x11	; 17
     1c2:	fc 01       	movw	r30, r24
     1c4:	26 8b       	std	Z+22, r18	; 0x16

	//accelerometer actief zetten
	PORTC.OUTSET = 0b01000000; //driven high
     1c6:	80 e4       	ldi	r24, 0x40	; 64
     1c8:	96 e0       	ldi	r25, 0x06	; 6
     1ca:	20 e4       	ldi	r18, 0x40	; 64
     1cc:	fc 01       	movw	r30, r24
     1ce:	25 83       	std	Z+5, r18	; 0x05
	
}
     1d0:	00 00       	nop
     1d2:	df 91       	pop	r29
     1d4:	cf 91       	pop	r28
     1d6:	08 95       	ret

000001d8 <AccGetXAxisRaw>:
unsigned int AccGetXAxisRaw(void)
{
     1d8:	cf 93       	push	r28
     1da:	df 93       	push	r29
     1dc:	cd b7       	in	r28, 0x3d	; 61
     1de:	de b7       	in	r29, 0x3e	; 62
	return AnalogGetCh(0, 4); //X op PA0 & PinNeg op PA4 = GND
     1e0:	64 e0       	ldi	r22, 0x04	; 4
     1e2:	70 e0       	ldi	r23, 0x00	; 0
     1e4:	80 e0       	ldi	r24, 0x00	; 0
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	0e 94 de 01 	call	0x3bc	; 0x3bc <AnalogGetCh>
}
     1ec:	df 91       	pop	r29
     1ee:	cf 91       	pop	r28
     1f0:	08 95       	ret

000001f2 <AccGetYAxisRaw>:
unsigned int AccGetYAxisRaw(void)
{
     1f2:	cf 93       	push	r28
     1f4:	df 93       	push	r29
     1f6:	cd b7       	in	r28, 0x3d	; 61
     1f8:	de b7       	in	r29, 0x3e	; 62
	return AnalogGetCh(1, 4); //Y op PA1 & PinNeg op PA4 = GND
     1fa:	64 e0       	ldi	r22, 0x04	; 4
     1fc:	70 e0       	ldi	r23, 0x00	; 0
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	0e 94 de 01 	call	0x3bc	; 0x3bc <AnalogGetCh>
}
     206:	df 91       	pop	r29
     208:	cf 91       	pop	r28
     20a:	08 95       	ret

0000020c <AccGetZAxisRaw>:
unsigned int AccGetZAxisRaw(void)
{
     20c:	cf 93       	push	r28
     20e:	df 93       	push	r29
     210:	cd b7       	in	r28, 0x3d	; 61
     212:	de b7       	in	r29, 0x3e	; 62
	return AnalogGetCh(2, 4); //Z op PA2 & PinNeg op PA4 = GND
     214:	64 e0       	ldi	r22, 0x04	; 4
     216:	70 e0       	ldi	r23, 0x00	; 0
     218:	82 e0       	ldi	r24, 0x02	; 2
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	0e 94 de 01 	call	0x3bc	; 0x3bc <AnalogGetCh>
}
     220:	df 91       	pop	r29
     222:	cf 91       	pop	r28
     224:	08 95       	ret

00000226 <AccGetXAxis>:
//min -1000
//neutral 0 
//max  1000

int AccGetXAxis(unsigned int AccRaw)
{
     226:	cf 93       	push	r28
     228:	df 93       	push	r29
     22a:	cd b7       	in	r28, 0x3d	; 61
     22c:	de b7       	in	r29, 0x3e	; 62
     22e:	26 97       	sbiw	r28, 0x06	; 6
     230:	cd bf       	out	0x3d, r28	; 61
     232:	de bf       	out	0x3e, r29	; 62
     234:	8d 83       	std	Y+5, r24	; 0x05
     236:	9e 83       	std	Y+6, r25	; 0x06
	//original - bord 3
	//min - neutral - max
	//420 - 820 - 1200
	double schaalfactor = 2.56; //(2000/(1200-420))
     238:	8a e0       	ldi	r24, 0x0A	; 10
     23a:	97 ed       	ldi	r25, 0xD7	; 215
     23c:	a3 e2       	ldi	r26, 0x23	; 35
     23e:	b0 e4       	ldi	r27, 0x40	; 64
     240:	89 83       	std	Y+1, r24	; 0x01
     242:	9a 83       	std	Y+2, r25	; 0x02
     244:	ab 83       	std	Y+3, r26	; 0x03
     246:	bc 83       	std	Y+4, r27	; 0x04
	return (schaalfactor * AccRaw) - 2080;
     248:	8d 81       	ldd	r24, Y+5	; 0x05
     24a:	9e 81       	ldd	r25, Y+6	; 0x06
     24c:	cc 01       	movw	r24, r24
     24e:	a0 e0       	ldi	r26, 0x00	; 0
     250:	b0 e0       	ldi	r27, 0x00	; 0
     252:	bc 01       	movw	r22, r24
     254:	cd 01       	movw	r24, r26
     256:	0e 94 b2 05 	call	0xb64	; 0xb64 <__floatunsisf>
     25a:	dc 01       	movw	r26, r24
     25c:	cb 01       	movw	r24, r22
     25e:	29 81       	ldd	r18, Y+1	; 0x01
     260:	3a 81       	ldd	r19, Y+2	; 0x02
     262:	4b 81       	ldd	r20, Y+3	; 0x03
     264:	5c 81       	ldd	r21, Y+4	; 0x04
     266:	bc 01       	movw	r22, r24
     268:	cd 01       	movw	r24, r26
     26a:	0e 94 69 06 	call	0xcd2	; 0xcd2 <__mulsf3>
     26e:	dc 01       	movw	r26, r24
     270:	cb 01       	movw	r24, r22
     272:	20 e0       	ldi	r18, 0x00	; 0
     274:	30 e0       	ldi	r19, 0x00	; 0
     276:	42 e0       	ldi	r20, 0x02	; 2
     278:	55 e4       	ldi	r21, 0x45	; 69
     27a:	bc 01       	movw	r22, r24
     27c:	cd 01       	movw	r24, r26
     27e:	0e 94 0a 05 	call	0xa14	; 0xa14 <__subsf3>
     282:	dc 01       	movw	r26, r24
     284:	cb 01       	movw	r24, r22
     286:	bc 01       	movw	r22, r24
     288:	cd 01       	movw	r24, r26
     28a:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <__fixsfsi>
     28e:	dc 01       	movw	r26, r24
     290:	cb 01       	movw	r24, r22
}
     292:	26 96       	adiw	r28, 0x06	; 6
     294:	cd bf       	out	0x3d, r28	; 61
     296:	de bf       	out	0x3e, r29	; 62
     298:	df 91       	pop	r29
     29a:	cf 91       	pop	r28
     29c:	08 95       	ret

0000029e <AccGetYAxis>:

int AccGetYAxis(unsigned int AccRaw)
{
     29e:	cf 93       	push	r28
     2a0:	df 93       	push	r29
     2a2:	cd b7       	in	r28, 0x3d	; 61
     2a4:	de b7       	in	r29, 0x3e	; 62
     2a6:	26 97       	sbiw	r28, 0x06	; 6
     2a8:	cd bf       	out	0x3d, r28	; 61
     2aa:	de bf       	out	0x3e, r29	; 62
     2ac:	8d 83       	std	Y+5, r24	; 0x05
     2ae:	9e 83       	std	Y+6, r25	; 0x06
	//original - bord 3
	//min - neutral - max
	//450 - 850 - 1250
	double schaalfactor = 2.5; //(2000/(1250-450))
     2b0:	80 e0       	ldi	r24, 0x00	; 0
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	a0 e2       	ldi	r26, 0x20	; 32
     2b6:	b0 e4       	ldi	r27, 0x40	; 64
     2b8:	89 83       	std	Y+1, r24	; 0x01
     2ba:	9a 83       	std	Y+2, r25	; 0x02
     2bc:	ab 83       	std	Y+3, r26	; 0x03
     2be:	bc 83       	std	Y+4, r27	; 0x04
	return (schaalfactor * AccRaw) - 2135;
     2c0:	8d 81       	ldd	r24, Y+5	; 0x05
     2c2:	9e 81       	ldd	r25, Y+6	; 0x06
     2c4:	cc 01       	movw	r24, r24
     2c6:	a0 e0       	ldi	r26, 0x00	; 0
     2c8:	b0 e0       	ldi	r27, 0x00	; 0
     2ca:	bc 01       	movw	r22, r24
     2cc:	cd 01       	movw	r24, r26
     2ce:	0e 94 b2 05 	call	0xb64	; 0xb64 <__floatunsisf>
     2d2:	dc 01       	movw	r26, r24
     2d4:	cb 01       	movw	r24, r22
     2d6:	29 81       	ldd	r18, Y+1	; 0x01
     2d8:	3a 81       	ldd	r19, Y+2	; 0x02
     2da:	4b 81       	ldd	r20, Y+3	; 0x03
     2dc:	5c 81       	ldd	r21, Y+4	; 0x04
     2de:	bc 01       	movw	r22, r24
     2e0:	cd 01       	movw	r24, r26
     2e2:	0e 94 69 06 	call	0xcd2	; 0xcd2 <__mulsf3>
     2e6:	dc 01       	movw	r26, r24
     2e8:	cb 01       	movw	r24, r22
     2ea:	20 e0       	ldi	r18, 0x00	; 0
     2ec:	30 e7       	ldi	r19, 0x70	; 112
     2ee:	45 e0       	ldi	r20, 0x05	; 5
     2f0:	55 e4       	ldi	r21, 0x45	; 69
     2f2:	bc 01       	movw	r22, r24
     2f4:	cd 01       	movw	r24, r26
     2f6:	0e 94 0a 05 	call	0xa14	; 0xa14 <__subsf3>
     2fa:	dc 01       	movw	r26, r24
     2fc:	cb 01       	movw	r24, r22
     2fe:	bc 01       	movw	r22, r24
     300:	cd 01       	movw	r24, r26
     302:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <__fixsfsi>
     306:	dc 01       	movw	r26, r24
     308:	cb 01       	movw	r24, r22
}
     30a:	26 96       	adiw	r28, 0x06	; 6
     30c:	cd bf       	out	0x3d, r28	; 61
     30e:	de bf       	out	0x3e, r29	; 62
     310:	df 91       	pop	r29
     312:	cf 91       	pop	r28
     314:	08 95       	ret

00000316 <AccGetZAxis>:

int AccGetZAxis(unsigned int AccRaw)
{
     316:	cf 93       	push	r28
     318:	df 93       	push	r29
     31a:	cd b7       	in	r28, 0x3d	; 61
     31c:	de b7       	in	r29, 0x3e	; 62
     31e:	26 97       	sbiw	r28, 0x06	; 6
     320:	cd bf       	out	0x3d, r28	; 61
     322:	de bf       	out	0x3e, r29	; 62
     324:	8d 83       	std	Y+5, r24	; 0x05
     326:	9e 83       	std	Y+6, r25	; 0x06
	//original - bord 3
	//min - neutral - max
	//300 - 700 - 1075
	double schaalfactor = 2.58; //(2000/(1075-300))
     328:	88 eb       	ldi	r24, 0xB8	; 184
     32a:	9e e1       	ldi	r25, 0x1E	; 30
     32c:	a5 e2       	ldi	r26, 0x25	; 37
     32e:	b0 e4       	ldi	r27, 0x40	; 64
     330:	89 83       	std	Y+1, r24	; 0x01
     332:	9a 83       	std	Y+2, r25	; 0x02
     334:	ab 83       	std	Y+3, r26	; 0x03
     336:	bc 83       	std	Y+4, r27	; 0x04
	return (schaalfactor * AccRaw) - 1770;
     338:	8d 81       	ldd	r24, Y+5	; 0x05
     33a:	9e 81       	ldd	r25, Y+6	; 0x06
     33c:	cc 01       	movw	r24, r24
     33e:	a0 e0       	ldi	r26, 0x00	; 0
     340:	b0 e0       	ldi	r27, 0x00	; 0
     342:	bc 01       	movw	r22, r24
     344:	cd 01       	movw	r24, r26
     346:	0e 94 b2 05 	call	0xb64	; 0xb64 <__floatunsisf>
     34a:	dc 01       	movw	r26, r24
     34c:	cb 01       	movw	r24, r22
     34e:	29 81       	ldd	r18, Y+1	; 0x01
     350:	3a 81       	ldd	r19, Y+2	; 0x02
     352:	4b 81       	ldd	r20, Y+3	; 0x03
     354:	5c 81       	ldd	r21, Y+4	; 0x04
     356:	bc 01       	movw	r22, r24
     358:	cd 01       	movw	r24, r26
     35a:	0e 94 69 06 	call	0xcd2	; 0xcd2 <__mulsf3>
     35e:	dc 01       	movw	r26, r24
     360:	cb 01       	movw	r24, r22
     362:	20 e0       	ldi	r18, 0x00	; 0
     364:	30 e4       	ldi	r19, 0x40	; 64
     366:	4d ed       	ldi	r20, 0xDD	; 221
     368:	54 e4       	ldi	r21, 0x44	; 68
     36a:	bc 01       	movw	r22, r24
     36c:	cd 01       	movw	r24, r26
     36e:	0e 94 0a 05 	call	0xa14	; 0xa14 <__subsf3>
     372:	dc 01       	movw	r26, r24
     374:	cb 01       	movw	r24, r22
     376:	bc 01       	movw	r22, r24
     378:	cd 01       	movw	r24, r26
     37a:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <__fixsfsi>
     37e:	dc 01       	movw	r26, r24
     380:	cb 01       	movw	r24, r22
     382:	26 96       	adiw	r28, 0x06	; 6
     384:	cd bf       	out	0x3d, r28	; 61
     386:	de bf       	out	0x3e, r29	; 62
     388:	df 91       	pop	r29
     38a:	cf 91       	pop	r28
     38c:	08 95       	ret

0000038e <AnalogInit>:
#include "Analog.h"
#include <avr/io.h>

void AnalogInit(void)
{
     38e:	cf 93       	push	r28
     390:	df 93       	push	r29
     392:	cd b7       	in	r28, 0x3d	; 61
     394:	de b7       	in	r29, 0x3e	; 62
	ADCA.REFCTRL = 0b0000010; // 0 - 000 (INT1V: referentie 1V) - 0 - 1 bandgap enable: 'verboden zone' - 0 (temp sensor uit)
     396:	80 e0       	ldi	r24, 0x00	; 0
     398:	92 e0       	ldi	r25, 0x02	; 2
     39a:	22 e0       	ldi	r18, 0x02	; 2
     39c:	fc 01       	movw	r30, r24
     39e:	22 83       	std	Z+2, r18	; 0x02
	ADCA.PRESCALER = 0b00000010; // 010 = DIV16 = divide by 16 --> 16 MHz (clock) / 16 = 1 MHz, ADC max 1.4 mHz
     3a0:	80 e0       	ldi	r24, 0x00	; 0
     3a2:	92 e0       	ldi	r25, 0x02	; 2
     3a4:	22 e0       	ldi	r18, 0x02	; 2
     3a6:	fc 01       	movw	r30, r24
     3a8:	24 83       	std	Z+4, r18	; 0x04
	ADCA.CTRLB = 0b00010000; // 0 momenteel unused - 00 current limiet uit - 1 Conversion Mode: configured for signed mode - 0 geen freerunning - 00 conversion op 12-bit, right adjusted - 0 
     3aa:	80 e0       	ldi	r24, 0x00	; 0
     3ac:	92 e0       	ldi	r25, 0x02	; 2
     3ae:	20 e1       	ldi	r18, 0x10	; 16
     3b0:	fc 01       	movw	r30, r24
     3b2:	21 83       	std	Z+1, r18	; 0x01

}
     3b4:	00 00       	nop
     3b6:	df 91       	pop	r29
     3b8:	cf 91       	pop	r28
     3ba:	08 95       	ret

000003bc <AnalogGetCh>:
int AnalogGetCh(int PinPos,int PinNeg)
{
     3bc:	cf 93       	push	r28
     3be:	df 93       	push	r29
     3c0:	00 d0       	rcall	.+0      	; 0x3c2 <AnalogGetCh+0x6>
     3c2:	00 d0       	rcall	.+0      	; 0x3c4 <AnalogGetCh+0x8>
     3c4:	cd b7       	in	r28, 0x3d	; 61
     3c6:	de b7       	in	r29, 0x3e	; 62
     3c8:	89 83       	std	Y+1, r24	; 0x01
     3ca:	9a 83       	std	Y+2, r25	; 0x02
     3cc:	6b 83       	std	Y+3, r22	; 0x03
     3ce:	7c 83       	std	Y+4, r23	; 0x04
	//Get analog channel value
	ADCA.CH0.MUXCTRL = ((PinPos & 0b00000111) << 3) | (PinNeg & 0b00000111); // 1e bit reserved - 4 bits MUXPOS[3:0] niet boven 15 - 3 bits MUXNEG[2:0] niet boven 7
     3d0:	80 e0       	ldi	r24, 0x00	; 0
     3d2:	92 e0       	ldi	r25, 0x02	; 2
     3d4:	29 81       	ldd	r18, Y+1	; 0x01
     3d6:	3a 81       	ldd	r19, Y+2	; 0x02
     3d8:	27 70       	andi	r18, 0x07	; 7
     3da:	33 27       	eor	r19, r19
     3dc:	22 0f       	add	r18, r18
     3de:	33 1f       	adc	r19, r19
     3e0:	22 0f       	add	r18, r18
     3e2:	33 1f       	adc	r19, r19
     3e4:	22 0f       	add	r18, r18
     3e6:	33 1f       	adc	r19, r19
     3e8:	32 2f       	mov	r19, r18
     3ea:	2b 81       	ldd	r18, Y+3	; 0x03
     3ec:	27 70       	andi	r18, 0x07	; 7
     3ee:	23 2b       	or	r18, r19
     3f0:	fc 01       	movw	r30, r24
     3f2:	21 a3       	std	Z+33, r18	; 0x21

	if(PinNeg == -1){
     3f4:	8b 81       	ldd	r24, Y+3	; 0x03
     3f6:	9c 81       	ldd	r25, Y+4	; 0x04
     3f8:	01 96       	adiw	r24, 0x01	; 1
     3fa:	31 f4       	brne	.+12     	; 0x408 <__FUSE_REGION_LENGTH__+0x8>
		//Single ended mode: input pin (0 to 15)
		ADCA.CH0.CTRL = 0b10000001; // 1 Start - 00 reserved - 00 gain - 10 inputmode single ended
     3fc:	80 e0       	ldi	r24, 0x00	; 0
     3fe:	92 e0       	ldi	r25, 0x02	; 2
     400:	21 e8       	ldi	r18, 0x81	; 129
     402:	fc 01       	movw	r30, r24
     404:	20 a3       	std	Z+32, r18	; 0x20
     406:	0f c0       	rjmp	.+30     	; 0x426 <__FUSE_REGION_LENGTH__+0x26>
	} else if(PinNeg > 3) {
     408:	8b 81       	ldd	r24, Y+3	; 0x03
     40a:	9c 81       	ldd	r25, Y+4	; 0x04
     40c:	04 97       	sbiw	r24, 0x04	; 4
     40e:	34 f0       	brlt	.+12     	; 0x41c <__FUSE_REGION_LENGTH__+0x1c>
		//Differential mode: GAIN
		ADCA.CH0.CTRL = 0b10000011; // 1 Start - 00 reserved - 00 gain - 10 inputmode differential
     410:	80 e0       	ldi	r24, 0x00	; 0
     412:	92 e0       	ldi	r25, 0x02	; 2
     414:	23 e8       	ldi	r18, 0x83	; 131
     416:	fc 01       	movw	r30, r24
     418:	20 a3       	std	Z+32, r18	; 0x20
     41a:	05 c0       	rjmp	.+10     	; 0x426 <__FUSE_REGION_LENGTH__+0x26>
	} else {
		//Differential mode: no Gain
		ADCA.CH0.CTRL = 0b10000010; // 1 Start - 00 reserved - 00 gain - 10 inputmode differential 
     41c:	80 e0       	ldi	r24, 0x00	; 0
     41e:	92 e0       	ldi	r25, 0x02	; 2
     420:	22 e8       	ldi	r18, 0x82	; 130
     422:	fc 01       	movw	r30, r24
     424:	20 a3       	std	Z+32, r18	; 0x20
	}

	ADCA.INTFLAGS = 0b00000001;	//Reset interrupt flag
     426:	80 e0       	ldi	r24, 0x00	; 0
     428:	92 e0       	ldi	r25, 0x02	; 2
     42a:	21 e0       	ldi	r18, 0x01	; 1
     42c:	fc 01       	movw	r30, r24
     42e:	26 83       	std	Z+6, r18	; 0x06
	ADCA.CTRLA = 0b00000101; // 00000 = reserved - 1 CH0(ADC) start - 0 pipeline flush - 1 enable ADC
     430:	80 e0       	ldi	r24, 0x00	; 0
     432:	92 e0       	ldi	r25, 0x02	; 2
     434:	25 e0       	ldi	r18, 0x05	; 5
     436:	fc 01       	movw	r30, r24
     438:	20 83       	st	Z, r18
	while(ADCA.INTFLAGS == (0x00)); // wait until last bit is set = ADC conversion complete
     43a:	00 00       	nop
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	92 e0       	ldi	r25, 0x02	; 2
     440:	fc 01       	movw	r30, r24
     442:	86 81       	ldd	r24, Z+6	; 0x06
     444:	88 23       	and	r24, r24
     446:	d1 f3       	breq	.-12     	; 0x43c <__FUSE_REGION_LENGTH__+0x3c>

	return ADCA.CH0.RES; // return Channel 0 Result register
     448:	80 e0       	ldi	r24, 0x00	; 0
     44a:	92 e0       	ldi	r25, 0x02	; 2
     44c:	fc 01       	movw	r30, r24
     44e:	84 a1       	ldd	r24, Z+36	; 0x24
     450:	95 a1       	ldd	r25, Z+37	; 0x25
     452:	24 96       	adiw	r28, 0x04	; 4
     454:	cd bf       	out	0x3d, r28	; 61
     456:	de bf       	out	0x3e, r29	; 62
     458:	df 91       	pop	r29
     45a:	cf 91       	pop	r28
     45c:	08 95       	ret

0000045e <ClockInit>:
#pragma GCC push_options
#pragma GCC optimize ("O2") //This function must be optimized to avoid too long time interval betwee CCP write and CLK.CTRL write (4 CLK CYC max)

void ClockInit(void)
{
	OSC.XOSCCTRL=0b11001011; //Clock<=16MHz	
     45e:	8b ec       	ldi	r24, 0xCB	; 203
     460:	80 93 52 00 	sts	0x0052, r24	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
	OSC.CTRL=0b01000; //Enable oscillator	
     464:	88 e0       	ldi	r24, 0x08	; 8
     466:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
	while (!(OSC.STATUS&0b1000)); //Wait until XTAL osc is ready
     46a:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
     46e:	83 ff       	sbrs	r24, 3
     470:	fc cf       	rjmp	.-8      	; 0x46a <ClockInit+0xc>
	
	//Select XTAL osc as system CLK source
	CCP=0xd8;
     472:	88 ed       	ldi	r24, 0xD8	; 216
     474:	84 bf       	out	0x34, r24	; 52
    CLK.CTRL=0b0011;
     476:	83 e0       	ldi	r24, 0x03	; 3
     478:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
     47c:	08 95       	ret

0000047e <EncoderInit>:
#include <util/delay.h>
#include <stdio.h>
#include "encoder.h"

void EncoderInit(void)
{
     47e:	cf 93       	push	r28
     480:	df 93       	push	r29
     482:	cd b7       	in	r28, 0x3d	; 61
     484:	de b7       	in	r29, 0x3e	; 62

}
     486:	00 00       	nop
     488:	df 91       	pop	r29
     48a:	cf 91       	pop	r28
     48c:	08 95       	ret

0000048e <main>:
	{
		//The variable text had the same address throughout the execution of the program.
		sprintf(text[a],"Counter:%d\r",a);
		puts(text[a]);
	}
}
     48e:	cf 93       	push	r28
     490:	df 93       	push	r29
     492:	cd b7       	in	r28, 0x3d	; 61
     494:	de b7       	in	r29, 0x3e	; 62
     496:	6c 97       	sbiw	r28, 0x1c	; 28
     498:	cd bf       	out	0x3d, r28	; 61
     49a:	de bf       	out	0x3e, r29	; 62
     49c:	0e 94 2f 02 	call	0x45e	; 0x45e <ClockInit>
     4a0:	0e 94 95 04 	call	0x92a	; 0x92a <USARTInit>
     4a4:	0e 94 c7 01 	call	0x38e	; 0x38e <AnalogInit>
     4a8:	0e 94 d5 00 	call	0x1aa	; 0x1aa <AccInit>
     4ac:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LEDInit>
     4b0:	0e 94 4c 04 	call	0x898	; 0x898 <SwitchInit>
     4b4:	0e 94 3f 02 	call	0x47e	; 0x47e <EncoderInit>
     4b8:	0e 94 3f 04 	call	0x87e	; 0x87e <SpeakerInit>
     4bc:	80 ea       	ldi	r24, 0xA0	; 160
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	20 ea       	ldi	r18, 0xA0	; 160
     4c2:	30 e0       	ldi	r19, 0x00	; 0
     4c4:	f9 01       	movw	r30, r18
     4c6:	22 81       	ldd	r18, Z+2	; 0x02
     4c8:	27 60       	ori	r18, 0x07	; 7
     4ca:	fc 01       	movw	r30, r24
     4cc:	22 83       	std	Z+2, r18	; 0x02
     4ce:	8f e3       	ldi	r24, 0x3F	; 63
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	2f e3       	ldi	r18, 0x3F	; 63
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	f9 01       	movw	r30, r18
     4d8:	20 81       	ld	r18, Z
     4da:	20 68       	ori	r18, 0x80	; 128
     4dc:	fc 01       	movw	r30, r24
     4de:	20 83       	st	Z, r18
     4e0:	80 e0       	ldi	r24, 0x00	; 0
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	aa ef       	ldi	r26, 0xFA	; 250
     4e6:	b3 e4       	ldi	r27, 0x43	; 67
     4e8:	8d 83       	std	Y+5, r24	; 0x05
     4ea:	9e 83       	std	Y+6, r25	; 0x06
     4ec:	af 83       	std	Y+7, r26	; 0x07
     4ee:	b8 87       	std	Y+8, r27	; 0x08
     4f0:	20 e0       	ldi	r18, 0x00	; 0
     4f2:	30 e0       	ldi	r19, 0x00	; 0
     4f4:	4a e7       	ldi	r20, 0x7A	; 122
     4f6:	55 e4       	ldi	r21, 0x45	; 69
     4f8:	6d 81       	ldd	r22, Y+5	; 0x05
     4fa:	7e 81       	ldd	r23, Y+6	; 0x06
     4fc:	8f 81       	ldd	r24, Y+7	; 0x07
     4fe:	98 85       	ldd	r25, Y+8	; 0x08
     500:	0e 94 69 06 	call	0xcd2	; 0xcd2 <__mulsf3>
     504:	dc 01       	movw	r26, r24
     506:	cb 01       	movw	r24, r22
     508:	89 87       	std	Y+9, r24	; 0x09
     50a:	9a 87       	std	Y+10, r25	; 0x0a
     50c:	ab 87       	std	Y+11, r26	; 0x0b
     50e:	bc 87       	std	Y+12, r27	; 0x0c
     510:	20 e0       	ldi	r18, 0x00	; 0
     512:	30 e0       	ldi	r19, 0x00	; 0
     514:	40 e8       	ldi	r20, 0x80	; 128
     516:	5f e3       	ldi	r21, 0x3F	; 63
     518:	69 85       	ldd	r22, Y+9	; 0x09
     51a:	7a 85       	ldd	r23, Y+10	; 0x0a
     51c:	8b 85       	ldd	r24, Y+11	; 0x0b
     51e:	9c 85       	ldd	r25, Y+12	; 0x0c
     520:	0e 94 77 05 	call	0xaee	; 0xaee <__cmpsf2>
     524:	88 23       	and	r24, r24
     526:	2c f4       	brge	.+10     	; 0x532 <main+0xa4>
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	8d 87       	std	Y+13, r24	; 0x0d
     52e:	9e 87       	std	Y+14, r25	; 0x0e
     530:	3f c0       	rjmp	.+126    	; 0x5b0 <main+0x122>
     532:	20 e0       	ldi	r18, 0x00	; 0
     534:	3f ef       	ldi	r19, 0xFF	; 255
     536:	4f e7       	ldi	r20, 0x7F	; 127
     538:	57 e4       	ldi	r21, 0x47	; 71
     53a:	69 85       	ldd	r22, Y+9	; 0x09
     53c:	7a 85       	ldd	r23, Y+10	; 0x0a
     53e:	8b 85       	ldd	r24, Y+11	; 0x0b
     540:	9c 85       	ldd	r25, Y+12	; 0x0c
     542:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__gesf2>
     546:	18 16       	cp	r1, r24
     548:	4c f5       	brge	.+82     	; 0x59c <main+0x10e>
     54a:	20 e0       	ldi	r18, 0x00	; 0
     54c:	30 e0       	ldi	r19, 0x00	; 0
     54e:	40 e2       	ldi	r20, 0x20	; 32
     550:	51 e4       	ldi	r21, 0x41	; 65
     552:	6d 81       	ldd	r22, Y+5	; 0x05
     554:	7e 81       	ldd	r23, Y+6	; 0x06
     556:	8f 81       	ldd	r24, Y+7	; 0x07
     558:	98 85       	ldd	r25, Y+8	; 0x08
     55a:	0e 94 69 06 	call	0xcd2	; 0xcd2 <__mulsf3>
     55e:	dc 01       	movw	r26, r24
     560:	cb 01       	movw	r24, r22
     562:	bc 01       	movw	r22, r24
     564:	cd 01       	movw	r24, r26
     566:	0e 94 83 05 	call	0xb06	; 0xb06 <__fixunssfsi>
     56a:	dc 01       	movw	r26, r24
     56c:	cb 01       	movw	r24, r22
     56e:	8d 87       	std	Y+13, r24	; 0x0d
     570:	9e 87       	std	Y+14, r25	; 0x0e
     572:	0f c0       	rjmp	.+30     	; 0x592 <main+0x104>
     574:	80 e9       	ldi	r24, 0x90	; 144
     576:	91 e0       	ldi	r25, 0x01	; 1
     578:	8f 87       	std	Y+15, r24	; 0x0f
     57a:	98 8b       	std	Y+16, r25	; 0x10
     57c:	8f 85       	ldd	r24, Y+15	; 0x0f
     57e:	98 89       	ldd	r25, Y+16	; 0x10
     580:	01 97       	sbiw	r24, 0x01	; 1
     582:	f1 f7       	brne	.-4      	; 0x580 <main+0xf2>
     584:	8f 87       	std	Y+15, r24	; 0x0f
     586:	98 8b       	std	Y+16, r25	; 0x10
     588:	8d 85       	ldd	r24, Y+13	; 0x0d
     58a:	9e 85       	ldd	r25, Y+14	; 0x0e
     58c:	01 97       	sbiw	r24, 0x01	; 1
     58e:	8d 87       	std	Y+13, r24	; 0x0d
     590:	9e 87       	std	Y+14, r25	; 0x0e
     592:	8d 85       	ldd	r24, Y+13	; 0x0d
     594:	9e 85       	ldd	r25, Y+14	; 0x0e
     596:	89 2b       	or	r24, r25
     598:	69 f7       	brne	.-38     	; 0x574 <main+0xe6>
     59a:	14 c0       	rjmp	.+40     	; 0x5c4 <main+0x136>
     59c:	69 85       	ldd	r22, Y+9	; 0x09
     59e:	7a 85       	ldd	r23, Y+10	; 0x0a
     5a0:	8b 85       	ldd	r24, Y+11	; 0x0b
     5a2:	9c 85       	ldd	r25, Y+12	; 0x0c
     5a4:	0e 94 83 05 	call	0xb06	; 0xb06 <__fixunssfsi>
     5a8:	dc 01       	movw	r26, r24
     5aa:	cb 01       	movw	r24, r22
     5ac:	8d 87       	std	Y+13, r24	; 0x0d
     5ae:	9e 87       	std	Y+14, r25	; 0x0e
     5b0:	8d 85       	ldd	r24, Y+13	; 0x0d
     5b2:	9e 85       	ldd	r25, Y+14	; 0x0e
     5b4:	89 8b       	std	Y+17, r24	; 0x11
     5b6:	9a 8b       	std	Y+18, r25	; 0x12
     5b8:	89 89       	ldd	r24, Y+17	; 0x11
     5ba:	9a 89       	ldd	r25, Y+18	; 0x12
     5bc:	01 97       	sbiw	r24, 0x01	; 1
     5be:	f1 f7       	brne	.-4      	; 0x5bc <main+0x12e>
     5c0:	89 8b       	std	Y+17, r24	; 0x11
     5c2:	9a 8b       	std	Y+18, r25	; 0x12
     5c4:	81 e0       	ldi	r24, 0x01	; 1
     5c6:	80 93 ae 20 	sts	0x20AE, r24	; 0x8020ae <bitmask>
     5ca:	0e 94 5e 03 	call	0x6bc	; 0x6bc <LightLoop>
     5ce:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <SwitchPrint>
     5d2:	0e 94 97 03 	call	0x72e	; 0x72e <AccPrint>
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	aa ef       	ldi	r26, 0xFA	; 250
     5dc:	b3 e4       	ldi	r27, 0x43	; 67
     5de:	89 83       	std	Y+1, r24	; 0x01
     5e0:	9a 83       	std	Y+2, r25	; 0x02
     5e2:	ab 83       	std	Y+3, r26	; 0x03
     5e4:	bc 83       	std	Y+4, r27	; 0x04
     5e6:	20 e0       	ldi	r18, 0x00	; 0
     5e8:	30 e0       	ldi	r19, 0x00	; 0
     5ea:	4a e7       	ldi	r20, 0x7A	; 122
     5ec:	55 e4       	ldi	r21, 0x45	; 69
     5ee:	69 81       	ldd	r22, Y+1	; 0x01
     5f0:	7a 81       	ldd	r23, Y+2	; 0x02
     5f2:	8b 81       	ldd	r24, Y+3	; 0x03
     5f4:	9c 81       	ldd	r25, Y+4	; 0x04
     5f6:	0e 94 69 06 	call	0xcd2	; 0xcd2 <__mulsf3>
     5fa:	dc 01       	movw	r26, r24
     5fc:	cb 01       	movw	r24, r22
     5fe:	8b 8b       	std	Y+19, r24	; 0x13
     600:	9c 8b       	std	Y+20, r25	; 0x14
     602:	ad 8b       	std	Y+21, r26	; 0x15
     604:	be 8b       	std	Y+22, r27	; 0x16
     606:	20 e0       	ldi	r18, 0x00	; 0
     608:	30 e0       	ldi	r19, 0x00	; 0
     60a:	40 e8       	ldi	r20, 0x80	; 128
     60c:	5f e3       	ldi	r21, 0x3F	; 63
     60e:	6b 89       	ldd	r22, Y+19	; 0x13
     610:	7c 89       	ldd	r23, Y+20	; 0x14
     612:	8d 89       	ldd	r24, Y+21	; 0x15
     614:	9e 89       	ldd	r25, Y+22	; 0x16
     616:	0e 94 77 05 	call	0xaee	; 0xaee <__cmpsf2>
     61a:	88 23       	and	r24, r24
     61c:	2c f4       	brge	.+10     	; 0x628 <main+0x19a>
     61e:	81 e0       	ldi	r24, 0x01	; 1
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	8f 8b       	std	Y+23, r24	; 0x17
     624:	98 8f       	std	Y+24, r25	; 0x18
     626:	3f c0       	rjmp	.+126    	; 0x6a6 <main+0x218>
     628:	20 e0       	ldi	r18, 0x00	; 0
     62a:	3f ef       	ldi	r19, 0xFF	; 255
     62c:	4f e7       	ldi	r20, 0x7F	; 127
     62e:	57 e4       	ldi	r21, 0x47	; 71
     630:	6b 89       	ldd	r22, Y+19	; 0x13
     632:	7c 89       	ldd	r23, Y+20	; 0x14
     634:	8d 89       	ldd	r24, Y+21	; 0x15
     636:	9e 89       	ldd	r25, Y+22	; 0x16
     638:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__gesf2>
     63c:	18 16       	cp	r1, r24
     63e:	4c f5       	brge	.+82     	; 0x692 <main+0x204>
     640:	20 e0       	ldi	r18, 0x00	; 0
     642:	30 e0       	ldi	r19, 0x00	; 0
     644:	40 e2       	ldi	r20, 0x20	; 32
     646:	51 e4       	ldi	r21, 0x41	; 65
     648:	69 81       	ldd	r22, Y+1	; 0x01
     64a:	7a 81       	ldd	r23, Y+2	; 0x02
     64c:	8b 81       	ldd	r24, Y+3	; 0x03
     64e:	9c 81       	ldd	r25, Y+4	; 0x04
     650:	0e 94 69 06 	call	0xcd2	; 0xcd2 <__mulsf3>
     654:	dc 01       	movw	r26, r24
     656:	cb 01       	movw	r24, r22
     658:	bc 01       	movw	r22, r24
     65a:	cd 01       	movw	r24, r26
     65c:	0e 94 83 05 	call	0xb06	; 0xb06 <__fixunssfsi>
     660:	dc 01       	movw	r26, r24
     662:	cb 01       	movw	r24, r22
     664:	8f 8b       	std	Y+23, r24	; 0x17
     666:	98 8f       	std	Y+24, r25	; 0x18
     668:	0f c0       	rjmp	.+30     	; 0x688 <main+0x1fa>
     66a:	80 e9       	ldi	r24, 0x90	; 144
     66c:	91 e0       	ldi	r25, 0x01	; 1
     66e:	89 8f       	std	Y+25, r24	; 0x19
     670:	9a 8f       	std	Y+26, r25	; 0x1a
     672:	89 8d       	ldd	r24, Y+25	; 0x19
     674:	9a 8d       	ldd	r25, Y+26	; 0x1a
     676:	01 97       	sbiw	r24, 0x01	; 1
     678:	f1 f7       	brne	.-4      	; 0x676 <main+0x1e8>
     67a:	89 8f       	std	Y+25, r24	; 0x19
     67c:	9a 8f       	std	Y+26, r25	; 0x1a
     67e:	8f 89       	ldd	r24, Y+23	; 0x17
     680:	98 8d       	ldd	r25, Y+24	; 0x18
     682:	01 97       	sbiw	r24, 0x01	; 1
     684:	8f 8b       	std	Y+23, r24	; 0x17
     686:	98 8f       	std	Y+24, r25	; 0x18
     688:	8f 89       	ldd	r24, Y+23	; 0x17
     68a:	98 8d       	ldd	r25, Y+24	; 0x18
     68c:	89 2b       	or	r24, r25
     68e:	69 f7       	brne	.-38     	; 0x66a <main+0x1dc>
     690:	14 c0       	rjmp	.+40     	; 0x6ba <main+0x22c>
     692:	6b 89       	ldd	r22, Y+19	; 0x13
     694:	7c 89       	ldd	r23, Y+20	; 0x14
     696:	8d 89       	ldd	r24, Y+21	; 0x15
     698:	9e 89       	ldd	r25, Y+22	; 0x16
     69a:	0e 94 83 05 	call	0xb06	; 0xb06 <__fixunssfsi>
     69e:	dc 01       	movw	r26, r24
     6a0:	cb 01       	movw	r24, r22
     6a2:	8f 8b       	std	Y+23, r24	; 0x17
     6a4:	98 8f       	std	Y+24, r25	; 0x18
     6a6:	8f 89       	ldd	r24, Y+23	; 0x17
     6a8:	98 8d       	ldd	r25, Y+24	; 0x18
     6aa:	8b 8f       	std	Y+27, r24	; 0x1b
     6ac:	9c 8f       	std	Y+28, r25	; 0x1c
     6ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
     6b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     6b2:	01 97       	sbiw	r24, 0x01	; 1
     6b4:	f1 f7       	brne	.-4      	; 0x6b2 <main+0x224>
     6b6:	8b 8f       	std	Y+27, r24	; 0x1b
     6b8:	9c 8f       	std	Y+28, r25	; 0x1c
     6ba:	87 cf       	rjmp	.-242    	; 0x5ca <main+0x13c>

000006bc <LightLoop>:

void LightLoop(void)
{
     6bc:	cf 93       	push	r28
     6be:	df 93       	push	r29
     6c0:	cd b7       	in	r28, 0x3d	; 61
     6c2:	de b7       	in	r29, 0x3e	; 62
	LEDSet(bitmask);
     6c4:	80 91 ae 20 	lds	r24, 0x20AE	; 0x8020ae <bitmask>
     6c8:	0e 94 1f 04 	call	0x83e	; 0x83e <LEDSet>
	if(bitmask == 0b00001000){
     6cc:	80 91 ae 20 	lds	r24, 0x20AE	; 0x8020ae <bitmask>
     6d0:	88 30       	cpi	r24, 0x08	; 8
     6d2:	41 f4       	brne	.+16     	; 0x6e4 <LightLoop+0x28>
		bitmask >>= 3; //first led
     6d4:	80 91 ae 20 	lds	r24, 0x20AE	; 0x8020ae <bitmask>
     6d8:	86 95       	lsr	r24
     6da:	86 95       	lsr	r24
     6dc:	86 95       	lsr	r24
     6de:	80 93 ae 20 	sts	0x20AE, r24	; 0x8020ae <bitmask>
	} else {
		bitmask <<= 1; //bitshift to next led
	}
}
     6e2:	05 c0       	rjmp	.+10     	; 0x6ee <LightLoop+0x32>
{
	LEDSet(bitmask);
	if(bitmask == 0b00001000){
		bitmask >>= 3; //first led
	} else {
		bitmask <<= 1; //bitshift to next led
     6e4:	80 91 ae 20 	lds	r24, 0x20AE	; 0x8020ae <bitmask>
     6e8:	88 0f       	add	r24, r24
     6ea:	80 93 ae 20 	sts	0x20AE, r24	; 0x8020ae <bitmask>
	}
}
     6ee:	00 00       	nop
     6f0:	df 91       	pop	r29
     6f2:	cf 91       	pop	r28
     6f4:	08 95       	ret

000006f6 <SwitchPrint>:

void SwitchPrint(void)
{
     6f6:	cf 93       	push	r28
     6f8:	df 93       	push	r29
     6fa:	cd b7       	in	r28, 0x3d	; 61
     6fc:	de b7       	in	r29, 0x3e	; 62
	printf("$SWITCH %d\r\n", SwitchGet());
     6fe:	0e 94 76 04 	call	0x8ec	; 0x8ec <SwitchGet>
     702:	88 2f       	mov	r24, r24
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	29 2f       	mov	r18, r25
     708:	2f 93       	push	r18
     70a:	8f 93       	push	r24
     70c:	8a e1       	ldi	r24, 0x1A	; 26
     70e:	90 e2       	ldi	r25, 0x20	; 32
     710:	89 2f       	mov	r24, r25
     712:	8f 93       	push	r24
     714:	8a e1       	ldi	r24, 0x1A	; 26
     716:	90 e2       	ldi	r25, 0x20	; 32
     718:	8f 93       	push	r24
     71a:	0e 94 d6 06 	call	0xdac	; 0xdac <printf>
     71e:	0f 90       	pop	r0
     720:	0f 90       	pop	r0
     722:	0f 90       	pop	r0
     724:	0f 90       	pop	r0
}
     726:	00 00       	nop
     728:	df 91       	pop	r29
     72a:	cf 91       	pop	r28
     72c:	08 95       	ret

0000072e <AccPrint>:

void AccPrint(void)
{
     72e:	ef 92       	push	r14
     730:	ff 92       	push	r15
     732:	0f 93       	push	r16
     734:	1f 93       	push	r17
     736:	cf 93       	push	r28
     738:	df 93       	push	r29
     73a:	cd b7       	in	r28, 0x3d	; 61
     73c:	de b7       	in	r29, 0x3e	; 62
     73e:	26 97       	sbiw	r28, 0x06	; 6
     740:	cd bf       	out	0x3d, r28	; 61
     742:	de bf       	out	0x3e, r29	; 62
	int accXRaw = AccGetXAxisRaw();
     744:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <AccGetXAxisRaw>
     748:	89 83       	std	Y+1, r24	; 0x01
     74a:	9a 83       	std	Y+2, r25	; 0x02
	int accYRaw = AccGetYAxisRaw();
     74c:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <AccGetYAxisRaw>
     750:	8b 83       	std	Y+3, r24	; 0x03
     752:	9c 83       	std	Y+4, r25	; 0x04
	int accZRaw = AccGetZAxisRaw();
     754:	0e 94 06 01 	call	0x20c	; 0x20c <AccGetZAxisRaw>
     758:	8d 83       	std	Y+5, r24	; 0x05
     75a:	9e 83       	std	Y+6, r25	; 0x06
	printf("$ACCRAW %d %d %d\r\n", accXRaw, accYRaw, accZRaw); // print uncalibrated X Y Z of ACC
     75c:	8e 81       	ldd	r24, Y+6	; 0x06
     75e:	8f 93       	push	r24
     760:	8d 81       	ldd	r24, Y+5	; 0x05
     762:	8f 93       	push	r24
     764:	8c 81       	ldd	r24, Y+4	; 0x04
     766:	8f 93       	push	r24
     768:	8b 81       	ldd	r24, Y+3	; 0x03
     76a:	8f 93       	push	r24
     76c:	8a 81       	ldd	r24, Y+2	; 0x02
     76e:	8f 93       	push	r24
     770:	89 81       	ldd	r24, Y+1	; 0x01
     772:	8f 93       	push	r24
     774:	87 e2       	ldi	r24, 0x27	; 39
     776:	90 e2       	ldi	r25, 0x20	; 32
     778:	89 2f       	mov	r24, r25
     77a:	8f 93       	push	r24
     77c:	87 e2       	ldi	r24, 0x27	; 39
     77e:	90 e2       	ldi	r25, 0x20	; 32
     780:	8f 93       	push	r24
     782:	0e 94 d6 06 	call	0xdac	; 0xdac <printf>
     786:	8d b7       	in	r24, 0x3d	; 61
     788:	9e b7       	in	r25, 0x3e	; 62
     78a:	08 96       	adiw	r24, 0x08	; 8
     78c:	cd bf       	out	0x3d, r28	; 61
     78e:	de bf       	out	0x3e, r29	; 62
	printf("$ACC %d %d %d\r\n", AccGetXAxis(accXRaw), AccGetYAxis(accYRaw), AccGetZAxis(accZRaw));
     790:	8d 81       	ldd	r24, Y+5	; 0x05
     792:	9e 81       	ldd	r25, Y+6	; 0x06
     794:	0e 94 8b 01 	call	0x316	; 0x316 <AccGetZAxis>
     798:	7c 01       	movw	r14, r24
     79a:	8b 81       	ldd	r24, Y+3	; 0x03
     79c:	9c 81       	ldd	r25, Y+4	; 0x04
     79e:	0e 94 4f 01 	call	0x29e	; 0x29e <AccGetYAxis>
     7a2:	8c 01       	movw	r16, r24
     7a4:	89 81       	ldd	r24, Y+1	; 0x01
     7a6:	9a 81       	ldd	r25, Y+2	; 0x02
     7a8:	0e 94 13 01 	call	0x226	; 0x226 <AccGetXAxis>
     7ac:	2f 2d       	mov	r18, r15
     7ae:	2f 93       	push	r18
     7b0:	2e 2d       	mov	r18, r14
     7b2:	2f 93       	push	r18
     7b4:	21 2f       	mov	r18, r17
     7b6:	2f 93       	push	r18
     7b8:	20 2f       	mov	r18, r16
     7ba:	2f 93       	push	r18
     7bc:	29 2f       	mov	r18, r25
     7be:	2f 93       	push	r18
     7c0:	8f 93       	push	r24
     7c2:	8a e3       	ldi	r24, 0x3A	; 58
     7c4:	90 e2       	ldi	r25, 0x20	; 32
     7c6:	89 2f       	mov	r24, r25
     7c8:	8f 93       	push	r24
     7ca:	8a e3       	ldi	r24, 0x3A	; 58
     7cc:	90 e2       	ldi	r25, 0x20	; 32
     7ce:	8f 93       	push	r24
     7d0:	0e 94 d6 06 	call	0xdac	; 0xdac <printf>
     7d4:	8d b7       	in	r24, 0x3d	; 61
     7d6:	9e b7       	in	r25, 0x3e	; 62
     7d8:	08 96       	adiw	r24, 0x08	; 8
     7da:	cd bf       	out	0x3d, r28	; 61
     7dc:	de bf       	out	0x3e, r29	; 62
     7de:	00 00       	nop
     7e0:	26 96       	adiw	r28, 0x06	; 6
     7e2:	cd bf       	out	0x3d, r28	; 61
     7e4:	de bf       	out	0x3e, r29	; 62
     7e6:	df 91       	pop	r29
     7e8:	cf 91       	pop	r28
     7ea:	1f 91       	pop	r17
     7ec:	0f 91       	pop	r16
     7ee:	ff 90       	pop	r15
     7f0:	ef 90       	pop	r14
     7f2:	08 95       	ret

000007f4 <LEDInit>:
#include "LED.h"
#include <avr/io.h>

void LEDInit(void)
{
     7f4:	cf 93       	push	r28
     7f6:	df 93       	push	r29
     7f8:	cd b7       	in	r28, 0x3d	; 61
     7fa:	de b7       	in	r29, 0x3e	; 62
	PORTE.DIRSET |= 0b00001111; //dir = 1 --> output
     7fc:	80 e8       	ldi	r24, 0x80	; 128
     7fe:	96 e0       	ldi	r25, 0x06	; 6
     800:	20 e8       	ldi	r18, 0x80	; 128
     802:	36 e0       	ldi	r19, 0x06	; 6
     804:	f9 01       	movw	r30, r18
     806:	21 81       	ldd	r18, Z+1	; 0x01
     808:	2f 60       	ori	r18, 0x0F	; 15
     80a:	fc 01       	movw	r30, r24
     80c:	21 83       	std	Z+1, r18	; 0x01
	PORTE.PIN0CTRL=PORT_OPC_PULLUP_gc; //enkel belangrijk on input
     80e:	80 e8       	ldi	r24, 0x80	; 128
     810:	96 e0       	ldi	r25, 0x06	; 6
     812:	28 e1       	ldi	r18, 0x18	; 24
     814:	fc 01       	movw	r30, r24
     816:	20 8b       	std	Z+16, r18	; 0x10
	PORTE.PIN1CTRL=PORT_OPC_PULLUP_gc;
     818:	80 e8       	ldi	r24, 0x80	; 128
     81a:	96 e0       	ldi	r25, 0x06	; 6
     81c:	28 e1       	ldi	r18, 0x18	; 24
     81e:	fc 01       	movw	r30, r24
     820:	21 8b       	std	Z+17, r18	; 0x11
	PORTE.PIN2CTRL=PORT_OPC_PULLUP_gc;
     822:	80 e8       	ldi	r24, 0x80	; 128
     824:	96 e0       	ldi	r25, 0x06	; 6
     826:	28 e1       	ldi	r18, 0x18	; 24
     828:	fc 01       	movw	r30, r24
     82a:	22 8b       	std	Z+18, r18	; 0x12
	PORTE.PIN3CTRL=PORT_OPC_PULLUP_gc;
     82c:	80 e8       	ldi	r24, 0x80	; 128
     82e:	96 e0       	ldi	r25, 0x06	; 6
     830:	28 e1       	ldi	r18, 0x18	; 24
     832:	fc 01       	movw	r30, r24
     834:	23 8b       	std	Z+19, r18	; 0x13
}
     836:	00 00       	nop
     838:	df 91       	pop	r29
     83a:	cf 91       	pop	r28
     83c:	08 95       	ret

0000083e <LEDSet>:

void LEDSet(char bitmask)
{
     83e:	cf 93       	push	r28
     840:	df 93       	push	r29
     842:	1f 92       	push	r1
     844:	cd b7       	in	r28, 0x3d	; 61
     846:	de b7       	in	r29, 0x3e	; 62
     848:	89 83       	std	Y+1, r24	; 0x01
	PORTE.OUT &= 0b11110000; //4 ledbits op 0, rest blijft ongewijzigd
     84a:	80 e8       	ldi	r24, 0x80	; 128
     84c:	96 e0       	ldi	r25, 0x06	; 6
     84e:	20 e8       	ldi	r18, 0x80	; 128
     850:	36 e0       	ldi	r19, 0x06	; 6
     852:	f9 01       	movw	r30, r18
     854:	24 81       	ldd	r18, Z+4	; 0x04
     856:	20 7f       	andi	r18, 0xF0	; 240
     858:	fc 01       	movw	r30, r24
     85a:	24 83       	std	Z+4, r18	; 0x04
	PORTE.OUT |= ~bitmask; //juiste ledbit wordt op 1 gezet
     85c:	80 e8       	ldi	r24, 0x80	; 128
     85e:	96 e0       	ldi	r25, 0x06	; 6
     860:	20 e8       	ldi	r18, 0x80	; 128
     862:	36 e0       	ldi	r19, 0x06	; 6
     864:	f9 01       	movw	r30, r18
     866:	24 81       	ldd	r18, Z+4	; 0x04
     868:	32 2f       	mov	r19, r18
     86a:	29 81       	ldd	r18, Y+1	; 0x01
     86c:	20 95       	com	r18
     86e:	23 2b       	or	r18, r19
     870:	fc 01       	movw	r30, r24
     872:	24 83       	std	Z+4, r18	; 0x04
     874:	00 00       	nop
     876:	0f 90       	pop	r0
     878:	df 91       	pop	r29
     87a:	cf 91       	pop	r28
     87c:	08 95       	ret

0000087e <SpeakerInit>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "speaker.h"

void SpeakerInit(void)
{
     87e:	cf 93       	push	r28
     880:	df 93       	push	r29
     882:	cd b7       	in	r28, 0x3d	; 61
     884:	de b7       	in	r29, 0x3e	; 62
		//Setup IO
		PORTC.DIRCLR= 0b00000001; //TODO explain
     886:	80 e4       	ldi	r24, 0x40	; 64
     888:	96 e0       	ldi	r25, 0x06	; 6
     88a:	21 e0       	ldi	r18, 0x01	; 1
     88c:	fc 01       	movw	r30, r24
     88e:	22 83       	std	Z+2, r18	; 0x02
		//TCC1.CTRLB=
		//TCC1.CTRLC=
		//TCC1.CTRLD=
		//TCC1.CTRLE=
		
}
     890:	00 00       	nop
     892:	df 91       	pop	r29
     894:	cf 91       	pop	r28
     896:	08 95       	ret

00000898 <SwitchInit>:
#include "switch.h"
#include <avr/io.h>

void SwitchInit(void)
{
     898:	cf 93       	push	r28
     89a:	df 93       	push	r29
     89c:	cd b7       	in	r28, 0x3d	; 61
     89e:	de b7       	in	r29, 0x3e	; 62
	
	//This register sets the data direction for the individual pins of the port. If DIRn is written to one,
	//pin n is configured as an output pin. If DIRn is written to zero, pin n is configured as an input pin
	//PORTD.DIR &= 0b00001110; 
	PORTD.DIRSET |= 0b00001110; 
     8a0:	80 e6       	ldi	r24, 0x60	; 96
     8a2:	96 e0       	ldi	r25, 0x06	; 6
     8a4:	20 e6       	ldi	r18, 0x60	; 96
     8a6:	36 e0       	ldi	r19, 0x06	; 6
     8a8:	f9 01       	movw	r30, r18
     8aa:	21 81       	ldd	r18, Z+1	; 0x01
     8ac:	2e 60       	ori	r18, 0x0E	; 14
     8ae:	fc 01       	movw	r30, r24
     8b0:	21 83       	std	Z+1, r18	; 0x01

	//11.13.15 p124
	PORTD.PIN0CTRL= 0b01011001;		//Center
     8b2:	80 e6       	ldi	r24, 0x60	; 96
     8b4:	96 e0       	ldi	r25, 0x06	; 6
     8b6:	29 e5       	ldi	r18, 0x59	; 89
     8b8:	fc 01       	movw	r30, r24
     8ba:	20 8b       	std	Z+16, r18	; 0x10
	PORTD.PIN4CTRL= 0b01011001;		//Right
     8bc:	80 e6       	ldi	r24, 0x60	; 96
     8be:	96 e0       	ldi	r25, 0x06	; 6
     8c0:	29 e5       	ldi	r18, 0x59	; 89
     8c2:	fc 01       	movw	r30, r24
     8c4:	24 8b       	std	Z+20, r18	; 0x14
	PORTD.PIN5CTRL= 0b01011001;		//Down
     8c6:	80 e6       	ldi	r24, 0x60	; 96
     8c8:	96 e0       	ldi	r25, 0x06	; 6
     8ca:	29 e5       	ldi	r18, 0x59	; 89
     8cc:	fc 01       	movw	r30, r24
     8ce:	25 8b       	std	Z+21, r18	; 0x15
	PORTD.PIN6CTRL= 0b01011001;		//Left
     8d0:	80 e6       	ldi	r24, 0x60	; 96
     8d2:	96 e0       	ldi	r25, 0x06	; 6
     8d4:	29 e5       	ldi	r18, 0x59	; 89
     8d6:	fc 01       	movw	r30, r24
     8d8:	26 8b       	std	Z+22, r18	; 0x16
	PORTD.PIN7CTRL= 0b01011001;		//Up
     8da:	80 e6       	ldi	r24, 0x60	; 96
     8dc:	96 e0       	ldi	r25, 0x06	; 6
     8de:	29 e5       	ldi	r18, 0x59	; 89
     8e0:	fc 01       	movw	r30, r24
     8e2:	27 8b       	std	Z+23, r18	; 0x17
}
     8e4:	00 00       	nop
     8e6:	df 91       	pop	r29
     8e8:	cf 91       	pop	r28
     8ea:	08 95       	ret

000008ec <SwitchGet>:


char SwitchGet(void)
{
     8ec:	cf 93       	push	r28
     8ee:	df 93       	push	r29
     8f0:	1f 92       	push	r1
     8f2:	cd b7       	in	r28, 0x3d	; 61
     8f4:	de b7       	in	r29, 0x3e	; 62
	char input = PORTD.IN; 
     8f6:	80 e6       	ldi	r24, 0x60	; 96
     8f8:	96 e0       	ldi	r25, 0x06	; 6
     8fa:	fc 01       	movw	r30, r24
     8fc:	80 85       	ldd	r24, Z+8	; 0x08
     8fe:	89 83       	std	Y+1, r24	; 0x01
	//PORTDIN looks like 11110001 'if everything would be pressed', the wanted format for ex.: xxx11111
	//To achieve this bitshift first 4 bits , 3 to the right and the bit on the right stays at the same place
	input = ((input & 0b11110000) >> 3) | (input & 0b00000001);
     900:	89 81       	ldd	r24, Y+1	; 0x01
     902:	88 2f       	mov	r24, r24
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	80 7f       	andi	r24, 0xF0	; 240
     908:	99 27       	eor	r25, r25
     90a:	95 95       	asr	r25
     90c:	87 95       	ror	r24
     90e:	95 95       	asr	r25
     910:	87 95       	ror	r24
     912:	95 95       	asr	r25
     914:	87 95       	ror	r24
     916:	98 2f       	mov	r25, r24
     918:	89 81       	ldd	r24, Y+1	; 0x01
     91a:	81 70       	andi	r24, 0x01	; 1
     91c:	89 2b       	or	r24, r25
     91e:	89 83       	std	Y+1, r24	; 0x01
	return input;
     920:	89 81       	ldd	r24, Y+1	; 0x01
}
     922:	0f 90       	pop	r0
     924:	df 91       	pop	r29
     926:	cf 91       	pop	r28
     928:	08 95       	ret

0000092a <USARTInit>:
static int stdio_putchar(char c, FILE * stream);
static int stdio_getchar(FILE *stream);
static FILE UsartStdio = FDEV_SETUP_STREAM(stdio_putchar, stdio_getchar,_FDEV_SETUP_WRITE);

void USARTInit(void)
{
     92a:	cf 93       	push	r28
     92c:	df 93       	push	r29
     92e:	cd b7       	in	r28, 0x3d	; 61
     930:	de b7       	in	r29, 0x3e	; 62
	USART_PORT.DIRSET=0b00001000;	//transmitlijn als output, receive lijn als input
     932:	80 e6       	ldi	r24, 0x60	; 96
     934:	96 e0       	ldi	r25, 0x06	; 6
     936:	28 e0       	ldi	r18, 0x08	; 8
     938:	fc 01       	movw	r30, r24
     93a:	21 83       	std	Z+1, r18	; 0x01
	USART_PORT.DIRCLR=0b00000100;
     93c:	80 e6       	ldi	r24, 0x60	; 96
     93e:	96 e0       	ldi	r25, 0x06	; 6
     940:	24 e0       	ldi	r18, 0x04	; 4
     942:	fc 01       	movw	r30, r24
     944:	22 83       	std	Z+2, r18	; 0x02
	
	USART.CTRLA=0b00000000; //polled mode = interrupts uitgeschakeld
     946:	80 ea       	ldi	r24, 0xA0	; 160
     948:	99 e0       	ldi	r25, 0x09	; 9
     94a:	fc 01       	movw	r30, r24
     94c:	13 82       	std	Z+3, r1	; 0x03
	USART.CTRLB=0b00011000; //transmitter en reveicer aan, double speed comm uit
     94e:	80 ea       	ldi	r24, 0xA0	; 160
     950:	99 e0       	ldi	r25, 0x09	; 9
     952:	28 e1       	ldi	r18, 0x18	; 24
     954:	fc 01       	movw	r30, r24
     956:	24 83       	std	Z+4, r18	; 0x04
	USART.CTRLC=0b00000011; // USART in async mode
     958:	80 ea       	ldi	r24, 0xA0	; 160
     95a:	99 e0       	ldi	r25, 0x09	; 9
     95c:	23 e0       	ldi	r18, 0x03	; 3
     95e:	fc 01       	movw	r30, r24
     960:	25 83       	std	Z+5, r18	; 0x05
	
	//USART.BAUDCTRLA=0xE5; //BSEL=3301, BSCALE=-5 9600 baud
	//USART.BAUDCTRLB=0xBC; 

	//BSEL=983=0011 1101 0111, BSCALE=-7=1001 --> 115200 baud [afwijking: 115211 baud]
	USART.BAUDCTRLA=0xD7; //1101 0111
     962:	80 ea       	ldi	r24, 0xA0	; 160
     964:	99 e0       	ldi	r25, 0x09	; 9
     966:	27 ed       	ldi	r18, 0xD7	; 215
     968:	fc 01       	movw	r30, r24
     96a:	26 83       	std	Z+6, r18	; 0x06
	USART.BAUDCTRLB=0x93; //1001 0011
     96c:	80 ea       	ldi	r24, 0xA0	; 160
     96e:	99 e0       	ldi	r25, 0x09	; 9
     970:	23 e9       	ldi	r18, 0x93	; 147
     972:	fc 01       	movw	r30, r24
     974:	27 83       	std	Z+7, r18	; 0x07
	
	stdout=&UsartStdio; // koppeling tussen drivercode en stdio lib
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	90 e2       	ldi	r25, 0x20	; 32
     97a:	80 93 b3 20 	sts	0x20B3, r24	; 0x8020b3 <__iob+0x2>
     97e:	90 93 b4 20 	sts	0x20B4, r25	; 0x8020b4 <__iob+0x3>
	stdin=&UsartStdio;
     982:	80 e0       	ldi	r24, 0x00	; 0
     984:	90 e2       	ldi	r25, 0x20	; 32
     986:	80 93 b1 20 	sts	0x20B1, r24	; 0x8020b1 <__iob>
     98a:	90 93 b2 20 	sts	0x20B2, r25	; 0x8020b2 <__iob+0x1>
}
     98e:	00 00       	nop
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	08 95       	ret

00000996 <stdio_putchar>:

//vormt onderste laag van stdio lib
static int stdio_putchar(char c, FILE * stream) //1 byte over USART
{
     996:	cf 93       	push	r28
     998:	df 93       	push	r29
     99a:	00 d0       	rcall	.+0      	; 0x99c <stdio_putchar+0x6>
     99c:	1f 92       	push	r1
     99e:	cd b7       	in	r28, 0x3d	; 61
     9a0:	de b7       	in	r29, 0x3e	; 62
     9a2:	89 83       	std	Y+1, r24	; 0x01
     9a4:	6a 83       	std	Y+2, r22	; 0x02
     9a6:	7b 83       	std	Y+3, r23	; 0x03
	USART.DATA = c;
     9a8:	80 ea       	ldi	r24, 0xA0	; 160
     9aa:	99 e0       	ldi	r25, 0x09	; 9
     9ac:	29 81       	ldd	r18, Y+1	; 0x01
     9ae:	fc 01       	movw	r30, r24
     9b0:	20 83       	st	Z, r18
	while (!(USART.STATUS & 0b01000000)); //wachten op TXCIF (Transmit Complete interrupt flag) = byte verzonden
     9b2:	00 00       	nop
     9b4:	80 ea       	ldi	r24, 0xA0	; 160
     9b6:	99 e0       	ldi	r25, 0x09	; 9
     9b8:	fc 01       	movw	r30, r24
     9ba:	81 81       	ldd	r24, Z+1	; 0x01
     9bc:	88 2f       	mov	r24, r24
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	80 74       	andi	r24, 0x40	; 64
     9c2:	99 27       	eor	r25, r25
     9c4:	89 2b       	or	r24, r25
     9c6:	b1 f3       	breq	.-20     	; 0x9b4 <stdio_putchar+0x1e>
	USART.STATUS=0b01000000; //vlag op 0 voor volgende datatransfer
     9c8:	80 ea       	ldi	r24, 0xA0	; 160
     9ca:	99 e0       	ldi	r25, 0x09	; 9
     9cc:	20 e4       	ldi	r18, 0x40	; 64
     9ce:	fc 01       	movw	r30, r24
     9d0:	21 83       	std	Z+1, r18	; 0x01
	return 0;
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	90 e0       	ldi	r25, 0x00	; 0
}
     9d6:	23 96       	adiw	r28, 0x03	; 3
     9d8:	cd bf       	out	0x3d, r28	; 61
     9da:	de bf       	out	0x3e, r29	; 62
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	08 95       	ret

000009e2 <stdio_getchar>:
	
static int stdio_getchar(FILE *stream)
{
     9e2:	cf 93       	push	r28
     9e4:	df 93       	push	r29
     9e6:	00 d0       	rcall	.+0      	; 0x9e8 <stdio_getchar+0x6>
     9e8:	cd b7       	in	r28, 0x3d	; 61
     9ea:	de b7       	in	r29, 0x3e	; 62
     9ec:	89 83       	std	Y+1, r24	; 0x01
     9ee:	9a 83       	std	Y+2, r25	; 0x02
	while (!(USART.STATUS & 0b10000000)); //wacht tot er een byte in de receive buffer zit
     9f0:	00 00       	nop
     9f2:	80 ea       	ldi	r24, 0xA0	; 160
     9f4:	99 e0       	ldi	r25, 0x09	; 9
     9f6:	fc 01       	movw	r30, r24
     9f8:	81 81       	ldd	r24, Z+1	; 0x01
     9fa:	88 23       	and	r24, r24
     9fc:	d4 f7       	brge	.-12     	; 0x9f2 <stdio_getchar+0x10>
	return USART.DATA;
     9fe:	80 ea       	ldi	r24, 0xA0	; 160
     a00:	99 e0       	ldi	r25, 0x09	; 9
     a02:	fc 01       	movw	r30, r24
     a04:	80 81       	ld	r24, Z
     a06:	88 2f       	mov	r24, r24
     a08:	90 e0       	ldi	r25, 0x00	; 0
}
     a0a:	0f 90       	pop	r0
     a0c:	0f 90       	pop	r0
     a0e:	df 91       	pop	r29
     a10:	cf 91       	pop	r28
     a12:	08 95       	ret

00000a14 <__subsf3>:
     a14:	50 58       	subi	r21, 0x80	; 128

00000a16 <__addsf3>:
     a16:	bb 27       	eor	r27, r27
     a18:	aa 27       	eor	r26, r26
     a1a:	0e 94 22 05 	call	0xa44	; 0xa44 <__addsf3x>
     a1e:	0c 94 2a 06 	jmp	0xc54	; 0xc54 <__fp_round>
     a22:	0e 94 1c 06 	call	0xc38	; 0xc38 <__fp_pscA>
     a26:	38 f0       	brcs	.+14     	; 0xa36 <__addsf3+0x20>
     a28:	0e 94 23 06 	call	0xc46	; 0xc46 <__fp_pscB>
     a2c:	20 f0       	brcs	.+8      	; 0xa36 <__addsf3+0x20>
     a2e:	39 f4       	brne	.+14     	; 0xa3e <__addsf3+0x28>
     a30:	9f 3f       	cpi	r25, 0xFF	; 255
     a32:	19 f4       	brne	.+6      	; 0xa3a <__addsf3+0x24>
     a34:	26 f4       	brtc	.+8      	; 0xa3e <__addsf3+0x28>
     a36:	0c 94 19 06 	jmp	0xc32	; 0xc32 <__fp_nan>
     a3a:	0e f4       	brtc	.+2      	; 0xa3e <__addsf3+0x28>
     a3c:	e0 95       	com	r30
     a3e:	e7 fb       	bst	r30, 7
     a40:	0c 94 13 06 	jmp	0xc26	; 0xc26 <__fp_inf>

00000a44 <__addsf3x>:
     a44:	e9 2f       	mov	r30, r25
     a46:	0e 94 3b 06 	call	0xc76	; 0xc76 <__fp_split3>
     a4a:	58 f3       	brcs	.-42     	; 0xa22 <__addsf3+0xc>
     a4c:	ba 17       	cp	r27, r26
     a4e:	62 07       	cpc	r22, r18
     a50:	73 07       	cpc	r23, r19
     a52:	84 07       	cpc	r24, r20
     a54:	95 07       	cpc	r25, r21
     a56:	20 f0       	brcs	.+8      	; 0xa60 <__addsf3x+0x1c>
     a58:	79 f4       	brne	.+30     	; 0xa78 <__addsf3x+0x34>
     a5a:	a6 f5       	brtc	.+104    	; 0xac4 <__addsf3x+0x80>
     a5c:	0c 94 5d 06 	jmp	0xcba	; 0xcba <__fp_zero>
     a60:	0e f4       	brtc	.+2      	; 0xa64 <__addsf3x+0x20>
     a62:	e0 95       	com	r30
     a64:	0b 2e       	mov	r0, r27
     a66:	ba 2f       	mov	r27, r26
     a68:	a0 2d       	mov	r26, r0
     a6a:	0b 01       	movw	r0, r22
     a6c:	b9 01       	movw	r22, r18
     a6e:	90 01       	movw	r18, r0
     a70:	0c 01       	movw	r0, r24
     a72:	ca 01       	movw	r24, r20
     a74:	a0 01       	movw	r20, r0
     a76:	11 24       	eor	r1, r1
     a78:	ff 27       	eor	r31, r31
     a7a:	59 1b       	sub	r21, r25
     a7c:	99 f0       	breq	.+38     	; 0xaa4 <__addsf3x+0x60>
     a7e:	59 3f       	cpi	r21, 0xF9	; 249
     a80:	50 f4       	brcc	.+20     	; 0xa96 <__addsf3x+0x52>
     a82:	50 3e       	cpi	r21, 0xE0	; 224
     a84:	68 f1       	brcs	.+90     	; 0xae0 <__addsf3x+0x9c>
     a86:	1a 16       	cp	r1, r26
     a88:	f0 40       	sbci	r31, 0x00	; 0
     a8a:	a2 2f       	mov	r26, r18
     a8c:	23 2f       	mov	r18, r19
     a8e:	34 2f       	mov	r19, r20
     a90:	44 27       	eor	r20, r20
     a92:	58 5f       	subi	r21, 0xF8	; 248
     a94:	f3 cf       	rjmp	.-26     	; 0xa7c <__addsf3x+0x38>
     a96:	46 95       	lsr	r20
     a98:	37 95       	ror	r19
     a9a:	27 95       	ror	r18
     a9c:	a7 95       	ror	r26
     a9e:	f0 40       	sbci	r31, 0x00	; 0
     aa0:	53 95       	inc	r21
     aa2:	c9 f7       	brne	.-14     	; 0xa96 <__addsf3x+0x52>
     aa4:	7e f4       	brtc	.+30     	; 0xac4 <__addsf3x+0x80>
     aa6:	1f 16       	cp	r1, r31
     aa8:	ba 0b       	sbc	r27, r26
     aaa:	62 0b       	sbc	r22, r18
     aac:	73 0b       	sbc	r23, r19
     aae:	84 0b       	sbc	r24, r20
     ab0:	ba f0       	brmi	.+46     	; 0xae0 <__addsf3x+0x9c>
     ab2:	91 50       	subi	r25, 0x01	; 1
     ab4:	a1 f0       	breq	.+40     	; 0xade <__addsf3x+0x9a>
     ab6:	ff 0f       	add	r31, r31
     ab8:	bb 1f       	adc	r27, r27
     aba:	66 1f       	adc	r22, r22
     abc:	77 1f       	adc	r23, r23
     abe:	88 1f       	adc	r24, r24
     ac0:	c2 f7       	brpl	.-16     	; 0xab2 <__addsf3x+0x6e>
     ac2:	0e c0       	rjmp	.+28     	; 0xae0 <__addsf3x+0x9c>
     ac4:	ba 0f       	add	r27, r26
     ac6:	62 1f       	adc	r22, r18
     ac8:	73 1f       	adc	r23, r19
     aca:	84 1f       	adc	r24, r20
     acc:	48 f4       	brcc	.+18     	; 0xae0 <__addsf3x+0x9c>
     ace:	87 95       	ror	r24
     ad0:	77 95       	ror	r23
     ad2:	67 95       	ror	r22
     ad4:	b7 95       	ror	r27
     ad6:	f7 95       	ror	r31
     ad8:	9e 3f       	cpi	r25, 0xFE	; 254
     ada:	08 f0       	brcs	.+2      	; 0xade <__addsf3x+0x9a>
     adc:	b0 cf       	rjmp	.-160    	; 0xa3e <__addsf3+0x28>
     ade:	93 95       	inc	r25
     ae0:	88 0f       	add	r24, r24
     ae2:	08 f0       	brcs	.+2      	; 0xae6 <__addsf3x+0xa2>
     ae4:	99 27       	eor	r25, r25
     ae6:	ee 0f       	add	r30, r30
     ae8:	97 95       	ror	r25
     aea:	87 95       	ror	r24
     aec:	08 95       	ret

00000aee <__cmpsf2>:
     aee:	0e 94 ef 05 	call	0xbde	; 0xbde <__fp_cmp>
     af2:	08 f4       	brcc	.+2      	; 0xaf6 <__cmpsf2+0x8>
     af4:	81 e0       	ldi	r24, 0x01	; 1
     af6:	08 95       	ret

00000af8 <__fixsfsi>:
     af8:	0e 94 83 05 	call	0xb06	; 0xb06 <__fixunssfsi>
     afc:	68 94       	set
     afe:	b1 11       	cpse	r27, r1
     b00:	0c 94 5e 06 	jmp	0xcbc	; 0xcbc <__fp_szero>
     b04:	08 95       	ret

00000b06 <__fixunssfsi>:
     b06:	0e 94 43 06 	call	0xc86	; 0xc86 <__fp_splitA>
     b0a:	88 f0       	brcs	.+34     	; 0xb2e <__fixunssfsi+0x28>
     b0c:	9f 57       	subi	r25, 0x7F	; 127
     b0e:	98 f0       	brcs	.+38     	; 0xb36 <__fixunssfsi+0x30>
     b10:	b9 2f       	mov	r27, r25
     b12:	99 27       	eor	r25, r25
     b14:	b7 51       	subi	r27, 0x17	; 23
     b16:	b0 f0       	brcs	.+44     	; 0xb44 <__fixunssfsi+0x3e>
     b18:	e1 f0       	breq	.+56     	; 0xb52 <__fixunssfsi+0x4c>
     b1a:	66 0f       	add	r22, r22
     b1c:	77 1f       	adc	r23, r23
     b1e:	88 1f       	adc	r24, r24
     b20:	99 1f       	adc	r25, r25
     b22:	1a f0       	brmi	.+6      	; 0xb2a <__fixunssfsi+0x24>
     b24:	ba 95       	dec	r27
     b26:	c9 f7       	brne	.-14     	; 0xb1a <__fixunssfsi+0x14>
     b28:	14 c0       	rjmp	.+40     	; 0xb52 <__fixunssfsi+0x4c>
     b2a:	b1 30       	cpi	r27, 0x01	; 1
     b2c:	91 f0       	breq	.+36     	; 0xb52 <__fixunssfsi+0x4c>
     b2e:	0e 94 5d 06 	call	0xcba	; 0xcba <__fp_zero>
     b32:	b1 e0       	ldi	r27, 0x01	; 1
     b34:	08 95       	ret
     b36:	0c 94 5d 06 	jmp	0xcba	; 0xcba <__fp_zero>
     b3a:	67 2f       	mov	r22, r23
     b3c:	78 2f       	mov	r23, r24
     b3e:	88 27       	eor	r24, r24
     b40:	b8 5f       	subi	r27, 0xF8	; 248
     b42:	39 f0       	breq	.+14     	; 0xb52 <__fixunssfsi+0x4c>
     b44:	b9 3f       	cpi	r27, 0xF9	; 249
     b46:	cc f3       	brlt	.-14     	; 0xb3a <__fixunssfsi+0x34>
     b48:	86 95       	lsr	r24
     b4a:	77 95       	ror	r23
     b4c:	67 95       	ror	r22
     b4e:	b3 95       	inc	r27
     b50:	d9 f7       	brne	.-10     	; 0xb48 <__fixunssfsi+0x42>
     b52:	3e f4       	brtc	.+14     	; 0xb62 <__fixunssfsi+0x5c>
     b54:	90 95       	com	r25
     b56:	80 95       	com	r24
     b58:	70 95       	com	r23
     b5a:	61 95       	neg	r22
     b5c:	7f 4f       	sbci	r23, 0xFF	; 255
     b5e:	8f 4f       	sbci	r24, 0xFF	; 255
     b60:	9f 4f       	sbci	r25, 0xFF	; 255
     b62:	08 95       	ret

00000b64 <__floatunsisf>:
     b64:	e8 94       	clt
     b66:	09 c0       	rjmp	.+18     	; 0xb7a <__floatsisf+0x12>

00000b68 <__floatsisf>:
     b68:	97 fb       	bst	r25, 7
     b6a:	3e f4       	brtc	.+14     	; 0xb7a <__floatsisf+0x12>
     b6c:	90 95       	com	r25
     b6e:	80 95       	com	r24
     b70:	70 95       	com	r23
     b72:	61 95       	neg	r22
     b74:	7f 4f       	sbci	r23, 0xFF	; 255
     b76:	8f 4f       	sbci	r24, 0xFF	; 255
     b78:	9f 4f       	sbci	r25, 0xFF	; 255
     b7a:	99 23       	and	r25, r25
     b7c:	a9 f0       	breq	.+42     	; 0xba8 <__floatsisf+0x40>
     b7e:	f9 2f       	mov	r31, r25
     b80:	96 e9       	ldi	r25, 0x96	; 150
     b82:	bb 27       	eor	r27, r27
     b84:	93 95       	inc	r25
     b86:	f6 95       	lsr	r31
     b88:	87 95       	ror	r24
     b8a:	77 95       	ror	r23
     b8c:	67 95       	ror	r22
     b8e:	b7 95       	ror	r27
     b90:	f1 11       	cpse	r31, r1
     b92:	f8 cf       	rjmp	.-16     	; 0xb84 <__floatsisf+0x1c>
     b94:	fa f4       	brpl	.+62     	; 0xbd4 <__floatsisf+0x6c>
     b96:	bb 0f       	add	r27, r27
     b98:	11 f4       	brne	.+4      	; 0xb9e <__floatsisf+0x36>
     b9a:	60 ff       	sbrs	r22, 0
     b9c:	1b c0       	rjmp	.+54     	; 0xbd4 <__floatsisf+0x6c>
     b9e:	6f 5f       	subi	r22, 0xFF	; 255
     ba0:	7f 4f       	sbci	r23, 0xFF	; 255
     ba2:	8f 4f       	sbci	r24, 0xFF	; 255
     ba4:	9f 4f       	sbci	r25, 0xFF	; 255
     ba6:	16 c0       	rjmp	.+44     	; 0xbd4 <__floatsisf+0x6c>
     ba8:	88 23       	and	r24, r24
     baa:	11 f0       	breq	.+4      	; 0xbb0 <__floatsisf+0x48>
     bac:	96 e9       	ldi	r25, 0x96	; 150
     bae:	11 c0       	rjmp	.+34     	; 0xbd2 <__floatsisf+0x6a>
     bb0:	77 23       	and	r23, r23
     bb2:	21 f0       	breq	.+8      	; 0xbbc <__floatsisf+0x54>
     bb4:	9e e8       	ldi	r25, 0x8E	; 142
     bb6:	87 2f       	mov	r24, r23
     bb8:	76 2f       	mov	r23, r22
     bba:	05 c0       	rjmp	.+10     	; 0xbc6 <__floatsisf+0x5e>
     bbc:	66 23       	and	r22, r22
     bbe:	71 f0       	breq	.+28     	; 0xbdc <__floatsisf+0x74>
     bc0:	96 e8       	ldi	r25, 0x86	; 134
     bc2:	86 2f       	mov	r24, r22
     bc4:	70 e0       	ldi	r23, 0x00	; 0
     bc6:	60 e0       	ldi	r22, 0x00	; 0
     bc8:	2a f0       	brmi	.+10     	; 0xbd4 <__floatsisf+0x6c>
     bca:	9a 95       	dec	r25
     bcc:	66 0f       	add	r22, r22
     bce:	77 1f       	adc	r23, r23
     bd0:	88 1f       	adc	r24, r24
     bd2:	da f7       	brpl	.-10     	; 0xbca <__floatsisf+0x62>
     bd4:	88 0f       	add	r24, r24
     bd6:	96 95       	lsr	r25
     bd8:	87 95       	ror	r24
     bda:	97 f9       	bld	r25, 7
     bdc:	08 95       	ret

00000bde <__fp_cmp>:
     bde:	99 0f       	add	r25, r25
     be0:	00 08       	sbc	r0, r0
     be2:	55 0f       	add	r21, r21
     be4:	aa 0b       	sbc	r26, r26
     be6:	e0 e8       	ldi	r30, 0x80	; 128
     be8:	fe ef       	ldi	r31, 0xFE	; 254
     bea:	16 16       	cp	r1, r22
     bec:	17 06       	cpc	r1, r23
     bee:	e8 07       	cpc	r30, r24
     bf0:	f9 07       	cpc	r31, r25
     bf2:	c0 f0       	brcs	.+48     	; 0xc24 <__fp_cmp+0x46>
     bf4:	12 16       	cp	r1, r18
     bf6:	13 06       	cpc	r1, r19
     bf8:	e4 07       	cpc	r30, r20
     bfa:	f5 07       	cpc	r31, r21
     bfc:	98 f0       	brcs	.+38     	; 0xc24 <__fp_cmp+0x46>
     bfe:	62 1b       	sub	r22, r18
     c00:	73 0b       	sbc	r23, r19
     c02:	84 0b       	sbc	r24, r20
     c04:	95 0b       	sbc	r25, r21
     c06:	39 f4       	brne	.+14     	; 0xc16 <__fp_cmp+0x38>
     c08:	0a 26       	eor	r0, r26
     c0a:	61 f0       	breq	.+24     	; 0xc24 <__fp_cmp+0x46>
     c0c:	23 2b       	or	r18, r19
     c0e:	24 2b       	or	r18, r20
     c10:	25 2b       	or	r18, r21
     c12:	21 f4       	brne	.+8      	; 0xc1c <__fp_cmp+0x3e>
     c14:	08 95       	ret
     c16:	0a 26       	eor	r0, r26
     c18:	09 f4       	brne	.+2      	; 0xc1c <__fp_cmp+0x3e>
     c1a:	a1 40       	sbci	r26, 0x01	; 1
     c1c:	a6 95       	lsr	r26
     c1e:	8f ef       	ldi	r24, 0xFF	; 255
     c20:	81 1d       	adc	r24, r1
     c22:	81 1d       	adc	r24, r1
     c24:	08 95       	ret

00000c26 <__fp_inf>:
     c26:	97 f9       	bld	r25, 7
     c28:	9f 67       	ori	r25, 0x7F	; 127
     c2a:	80 e8       	ldi	r24, 0x80	; 128
     c2c:	70 e0       	ldi	r23, 0x00	; 0
     c2e:	60 e0       	ldi	r22, 0x00	; 0
     c30:	08 95       	ret

00000c32 <__fp_nan>:
     c32:	9f ef       	ldi	r25, 0xFF	; 255
     c34:	80 ec       	ldi	r24, 0xC0	; 192
     c36:	08 95       	ret

00000c38 <__fp_pscA>:
     c38:	00 24       	eor	r0, r0
     c3a:	0a 94       	dec	r0
     c3c:	16 16       	cp	r1, r22
     c3e:	17 06       	cpc	r1, r23
     c40:	18 06       	cpc	r1, r24
     c42:	09 06       	cpc	r0, r25
     c44:	08 95       	ret

00000c46 <__fp_pscB>:
     c46:	00 24       	eor	r0, r0
     c48:	0a 94       	dec	r0
     c4a:	12 16       	cp	r1, r18
     c4c:	13 06       	cpc	r1, r19
     c4e:	14 06       	cpc	r1, r20
     c50:	05 06       	cpc	r0, r21
     c52:	08 95       	ret

00000c54 <__fp_round>:
     c54:	09 2e       	mov	r0, r25
     c56:	03 94       	inc	r0
     c58:	00 0c       	add	r0, r0
     c5a:	11 f4       	brne	.+4      	; 0xc60 <__fp_round+0xc>
     c5c:	88 23       	and	r24, r24
     c5e:	52 f0       	brmi	.+20     	; 0xc74 <__fp_round+0x20>
     c60:	bb 0f       	add	r27, r27
     c62:	40 f4       	brcc	.+16     	; 0xc74 <__fp_round+0x20>
     c64:	bf 2b       	or	r27, r31
     c66:	11 f4       	brne	.+4      	; 0xc6c <__fp_round+0x18>
     c68:	60 ff       	sbrs	r22, 0
     c6a:	04 c0       	rjmp	.+8      	; 0xc74 <__fp_round+0x20>
     c6c:	6f 5f       	subi	r22, 0xFF	; 255
     c6e:	7f 4f       	sbci	r23, 0xFF	; 255
     c70:	8f 4f       	sbci	r24, 0xFF	; 255
     c72:	9f 4f       	sbci	r25, 0xFF	; 255
     c74:	08 95       	ret

00000c76 <__fp_split3>:
     c76:	57 fd       	sbrc	r21, 7
     c78:	90 58       	subi	r25, 0x80	; 128
     c7a:	44 0f       	add	r20, r20
     c7c:	55 1f       	adc	r21, r21
     c7e:	59 f0       	breq	.+22     	; 0xc96 <__fp_splitA+0x10>
     c80:	5f 3f       	cpi	r21, 0xFF	; 255
     c82:	71 f0       	breq	.+28     	; 0xca0 <__fp_splitA+0x1a>
     c84:	47 95       	ror	r20

00000c86 <__fp_splitA>:
     c86:	88 0f       	add	r24, r24
     c88:	97 fb       	bst	r25, 7
     c8a:	99 1f       	adc	r25, r25
     c8c:	61 f0       	breq	.+24     	; 0xca6 <__fp_splitA+0x20>
     c8e:	9f 3f       	cpi	r25, 0xFF	; 255
     c90:	79 f0       	breq	.+30     	; 0xcb0 <__fp_splitA+0x2a>
     c92:	87 95       	ror	r24
     c94:	08 95       	ret
     c96:	12 16       	cp	r1, r18
     c98:	13 06       	cpc	r1, r19
     c9a:	14 06       	cpc	r1, r20
     c9c:	55 1f       	adc	r21, r21
     c9e:	f2 cf       	rjmp	.-28     	; 0xc84 <__fp_split3+0xe>
     ca0:	46 95       	lsr	r20
     ca2:	f1 df       	rcall	.-30     	; 0xc86 <__fp_splitA>
     ca4:	08 c0       	rjmp	.+16     	; 0xcb6 <__fp_splitA+0x30>
     ca6:	16 16       	cp	r1, r22
     ca8:	17 06       	cpc	r1, r23
     caa:	18 06       	cpc	r1, r24
     cac:	99 1f       	adc	r25, r25
     cae:	f1 cf       	rjmp	.-30     	; 0xc92 <__fp_splitA+0xc>
     cb0:	86 95       	lsr	r24
     cb2:	71 05       	cpc	r23, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	08 94       	sec
     cb8:	08 95       	ret

00000cba <__fp_zero>:
     cba:	e8 94       	clt

00000cbc <__fp_szero>:
     cbc:	bb 27       	eor	r27, r27
     cbe:	66 27       	eor	r22, r22
     cc0:	77 27       	eor	r23, r23
     cc2:	cb 01       	movw	r24, r22
     cc4:	97 f9       	bld	r25, 7
     cc6:	08 95       	ret

00000cc8 <__gesf2>:
     cc8:	0e 94 ef 05 	call	0xbde	; 0xbde <__fp_cmp>
     ccc:	08 f4       	brcc	.+2      	; 0xcd0 <__gesf2+0x8>
     cce:	8f ef       	ldi	r24, 0xFF	; 255
     cd0:	08 95       	ret

00000cd2 <__mulsf3>:
     cd2:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__mulsf3x>
     cd6:	0c 94 2a 06 	jmp	0xc54	; 0xc54 <__fp_round>
     cda:	0e 94 1c 06 	call	0xc38	; 0xc38 <__fp_pscA>
     cde:	38 f0       	brcs	.+14     	; 0xcee <__mulsf3+0x1c>
     ce0:	0e 94 23 06 	call	0xc46	; 0xc46 <__fp_pscB>
     ce4:	20 f0       	brcs	.+8      	; 0xcee <__mulsf3+0x1c>
     ce6:	95 23       	and	r25, r21
     ce8:	11 f0       	breq	.+4      	; 0xcee <__mulsf3+0x1c>
     cea:	0c 94 13 06 	jmp	0xc26	; 0xc26 <__fp_inf>
     cee:	0c 94 19 06 	jmp	0xc32	; 0xc32 <__fp_nan>
     cf2:	11 24       	eor	r1, r1
     cf4:	0c 94 5e 06 	jmp	0xcbc	; 0xcbc <__fp_szero>

00000cf8 <__mulsf3x>:
     cf8:	0e 94 3b 06 	call	0xc76	; 0xc76 <__fp_split3>
     cfc:	70 f3       	brcs	.-36     	; 0xcda <__mulsf3+0x8>

00000cfe <__mulsf3_pse>:
     cfe:	95 9f       	mul	r25, r21
     d00:	c1 f3       	breq	.-16     	; 0xcf2 <__mulsf3+0x20>
     d02:	95 0f       	add	r25, r21
     d04:	50 e0       	ldi	r21, 0x00	; 0
     d06:	55 1f       	adc	r21, r21
     d08:	62 9f       	mul	r22, r18
     d0a:	f0 01       	movw	r30, r0
     d0c:	72 9f       	mul	r23, r18
     d0e:	bb 27       	eor	r27, r27
     d10:	f0 0d       	add	r31, r0
     d12:	b1 1d       	adc	r27, r1
     d14:	63 9f       	mul	r22, r19
     d16:	aa 27       	eor	r26, r26
     d18:	f0 0d       	add	r31, r0
     d1a:	b1 1d       	adc	r27, r1
     d1c:	aa 1f       	adc	r26, r26
     d1e:	64 9f       	mul	r22, r20
     d20:	66 27       	eor	r22, r22
     d22:	b0 0d       	add	r27, r0
     d24:	a1 1d       	adc	r26, r1
     d26:	66 1f       	adc	r22, r22
     d28:	82 9f       	mul	r24, r18
     d2a:	22 27       	eor	r18, r18
     d2c:	b0 0d       	add	r27, r0
     d2e:	a1 1d       	adc	r26, r1
     d30:	62 1f       	adc	r22, r18
     d32:	73 9f       	mul	r23, r19
     d34:	b0 0d       	add	r27, r0
     d36:	a1 1d       	adc	r26, r1
     d38:	62 1f       	adc	r22, r18
     d3a:	83 9f       	mul	r24, r19
     d3c:	a0 0d       	add	r26, r0
     d3e:	61 1d       	adc	r22, r1
     d40:	22 1f       	adc	r18, r18
     d42:	74 9f       	mul	r23, r20
     d44:	33 27       	eor	r19, r19
     d46:	a0 0d       	add	r26, r0
     d48:	61 1d       	adc	r22, r1
     d4a:	23 1f       	adc	r18, r19
     d4c:	84 9f       	mul	r24, r20
     d4e:	60 0d       	add	r22, r0
     d50:	21 1d       	adc	r18, r1
     d52:	82 2f       	mov	r24, r18
     d54:	76 2f       	mov	r23, r22
     d56:	6a 2f       	mov	r22, r26
     d58:	11 24       	eor	r1, r1
     d5a:	9f 57       	subi	r25, 0x7F	; 127
     d5c:	50 40       	sbci	r21, 0x00	; 0
     d5e:	9a f0       	brmi	.+38     	; 0xd86 <__mulsf3_pse+0x88>
     d60:	f1 f0       	breq	.+60     	; 0xd9e <__mulsf3_pse+0xa0>
     d62:	88 23       	and	r24, r24
     d64:	4a f0       	brmi	.+18     	; 0xd78 <__mulsf3_pse+0x7a>
     d66:	ee 0f       	add	r30, r30
     d68:	ff 1f       	adc	r31, r31
     d6a:	bb 1f       	adc	r27, r27
     d6c:	66 1f       	adc	r22, r22
     d6e:	77 1f       	adc	r23, r23
     d70:	88 1f       	adc	r24, r24
     d72:	91 50       	subi	r25, 0x01	; 1
     d74:	50 40       	sbci	r21, 0x00	; 0
     d76:	a9 f7       	brne	.-22     	; 0xd62 <__mulsf3_pse+0x64>
     d78:	9e 3f       	cpi	r25, 0xFE	; 254
     d7a:	51 05       	cpc	r21, r1
     d7c:	80 f0       	brcs	.+32     	; 0xd9e <__mulsf3_pse+0xa0>
     d7e:	0c 94 13 06 	jmp	0xc26	; 0xc26 <__fp_inf>
     d82:	0c 94 5e 06 	jmp	0xcbc	; 0xcbc <__fp_szero>
     d86:	5f 3f       	cpi	r21, 0xFF	; 255
     d88:	e4 f3       	brlt	.-8      	; 0xd82 <__mulsf3_pse+0x84>
     d8a:	98 3e       	cpi	r25, 0xE8	; 232
     d8c:	d4 f3       	brlt	.-12     	; 0xd82 <__mulsf3_pse+0x84>
     d8e:	86 95       	lsr	r24
     d90:	77 95       	ror	r23
     d92:	67 95       	ror	r22
     d94:	b7 95       	ror	r27
     d96:	f7 95       	ror	r31
     d98:	e7 95       	ror	r30
     d9a:	9f 5f       	subi	r25, 0xFF	; 255
     d9c:	c1 f7       	brne	.-16     	; 0xd8e <__mulsf3_pse+0x90>
     d9e:	fe 2b       	or	r31, r30
     da0:	88 0f       	add	r24, r24
     da2:	91 1d       	adc	r25, r1
     da4:	96 95       	lsr	r25
     da6:	87 95       	ror	r24
     da8:	97 f9       	bld	r25, 7
     daa:	08 95       	ret

00000dac <printf>:
     dac:	a0 e0       	ldi	r26, 0x00	; 0
     dae:	b0 e0       	ldi	r27, 0x00	; 0
     db0:	ec ed       	ldi	r30, 0xDC	; 220
     db2:	f6 e0       	ldi	r31, 0x06	; 6
     db4:	0c 94 8d 09 	jmp	0x131a	; 0x131a <__prologue_saves__+0x20>
     db8:	ae 01       	movw	r20, r28
     dba:	4b 5f       	subi	r20, 0xFB	; 251
     dbc:	5f 4f       	sbci	r21, 0xFF	; 255
     dbe:	fa 01       	movw	r30, r20
     dc0:	61 91       	ld	r22, Z+
     dc2:	71 91       	ld	r23, Z+
     dc4:	af 01       	movw	r20, r30
     dc6:	80 91 b3 20 	lds	r24, 0x20B3	; 0x8020b3 <__iob+0x2>
     dca:	90 91 b4 20 	lds	r25, 0x20B4	; 0x8020b4 <__iob+0x3>
     dce:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <vfprintf>
     dd2:	e2 e0       	ldi	r30, 0x02	; 2
     dd4:	0c 94 a6 09 	jmp	0x134c	; 0x134c <__epilogue_restores__+0x20>

00000dd8 <vfprintf>:
     dd8:	ab e0       	ldi	r26, 0x0B	; 11
     dda:	b0 e0       	ldi	r27, 0x00	; 0
     ddc:	e2 ef       	ldi	r30, 0xF2	; 242
     dde:	f6 e0       	ldi	r31, 0x06	; 6
     de0:	0c 94 7d 09 	jmp	0x12fa	; 0x12fa <__prologue_saves__>
     de4:	6c 01       	movw	r12, r24
     de6:	7b 01       	movw	r14, r22
     de8:	8a 01       	movw	r16, r20
     dea:	fc 01       	movw	r30, r24
     dec:	16 82       	std	Z+6, r1	; 0x06
     dee:	17 82       	std	Z+7, r1	; 0x07
     df0:	83 81       	ldd	r24, Z+3	; 0x03
     df2:	81 ff       	sbrs	r24, 1
     df4:	cc c1       	rjmp	.+920    	; 0x118e <vfprintf+0x3b6>
     df6:	ce 01       	movw	r24, r28
     df8:	01 96       	adiw	r24, 0x01	; 1
     dfa:	3c 01       	movw	r6, r24
     dfc:	f6 01       	movw	r30, r12
     dfe:	93 81       	ldd	r25, Z+3	; 0x03
     e00:	f7 01       	movw	r30, r14
     e02:	93 fd       	sbrc	r25, 3
     e04:	85 91       	lpm	r24, Z+
     e06:	93 ff       	sbrs	r25, 3
     e08:	81 91       	ld	r24, Z+
     e0a:	7f 01       	movw	r14, r30
     e0c:	88 23       	and	r24, r24
     e0e:	09 f4       	brne	.+2      	; 0xe12 <vfprintf+0x3a>
     e10:	ba c1       	rjmp	.+884    	; 0x1186 <vfprintf+0x3ae>
     e12:	85 32       	cpi	r24, 0x25	; 37
     e14:	39 f4       	brne	.+14     	; 0xe24 <vfprintf+0x4c>
     e16:	93 fd       	sbrc	r25, 3
     e18:	85 91       	lpm	r24, Z+
     e1a:	93 ff       	sbrs	r25, 3
     e1c:	81 91       	ld	r24, Z+
     e1e:	7f 01       	movw	r14, r30
     e20:	85 32       	cpi	r24, 0x25	; 37
     e22:	29 f4       	brne	.+10     	; 0xe2e <vfprintf+0x56>
     e24:	b6 01       	movw	r22, r12
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <fputc>
     e2c:	e7 cf       	rjmp	.-50     	; 0xdfc <vfprintf+0x24>
     e2e:	91 2c       	mov	r9, r1
     e30:	21 2c       	mov	r2, r1
     e32:	31 2c       	mov	r3, r1
     e34:	ff e1       	ldi	r31, 0x1F	; 31
     e36:	f3 15       	cp	r31, r3
     e38:	d8 f0       	brcs	.+54     	; 0xe70 <vfprintf+0x98>
     e3a:	8b 32       	cpi	r24, 0x2B	; 43
     e3c:	79 f0       	breq	.+30     	; 0xe5c <vfprintf+0x84>
     e3e:	38 f4       	brcc	.+14     	; 0xe4e <vfprintf+0x76>
     e40:	80 32       	cpi	r24, 0x20	; 32
     e42:	79 f0       	breq	.+30     	; 0xe62 <vfprintf+0x8a>
     e44:	83 32       	cpi	r24, 0x23	; 35
     e46:	a1 f4       	brne	.+40     	; 0xe70 <vfprintf+0x98>
     e48:	23 2d       	mov	r18, r3
     e4a:	20 61       	ori	r18, 0x10	; 16
     e4c:	1d c0       	rjmp	.+58     	; 0xe88 <vfprintf+0xb0>
     e4e:	8d 32       	cpi	r24, 0x2D	; 45
     e50:	61 f0       	breq	.+24     	; 0xe6a <vfprintf+0x92>
     e52:	80 33       	cpi	r24, 0x30	; 48
     e54:	69 f4       	brne	.+26     	; 0xe70 <vfprintf+0x98>
     e56:	23 2d       	mov	r18, r3
     e58:	21 60       	ori	r18, 0x01	; 1
     e5a:	16 c0       	rjmp	.+44     	; 0xe88 <vfprintf+0xb0>
     e5c:	83 2d       	mov	r24, r3
     e5e:	82 60       	ori	r24, 0x02	; 2
     e60:	38 2e       	mov	r3, r24
     e62:	e3 2d       	mov	r30, r3
     e64:	e4 60       	ori	r30, 0x04	; 4
     e66:	3e 2e       	mov	r3, r30
     e68:	2a c0       	rjmp	.+84     	; 0xebe <vfprintf+0xe6>
     e6a:	f3 2d       	mov	r31, r3
     e6c:	f8 60       	ori	r31, 0x08	; 8
     e6e:	1d c0       	rjmp	.+58     	; 0xeaa <vfprintf+0xd2>
     e70:	37 fc       	sbrc	r3, 7
     e72:	2d c0       	rjmp	.+90     	; 0xece <vfprintf+0xf6>
     e74:	20 ed       	ldi	r18, 0xD0	; 208
     e76:	28 0f       	add	r18, r24
     e78:	2a 30       	cpi	r18, 0x0A	; 10
     e7a:	40 f0       	brcs	.+16     	; 0xe8c <vfprintf+0xb4>
     e7c:	8e 32       	cpi	r24, 0x2E	; 46
     e7e:	b9 f4       	brne	.+46     	; 0xeae <vfprintf+0xd6>
     e80:	36 fc       	sbrc	r3, 6
     e82:	81 c1       	rjmp	.+770    	; 0x1186 <vfprintf+0x3ae>
     e84:	23 2d       	mov	r18, r3
     e86:	20 64       	ori	r18, 0x40	; 64
     e88:	32 2e       	mov	r3, r18
     e8a:	19 c0       	rjmp	.+50     	; 0xebe <vfprintf+0xe6>
     e8c:	36 fe       	sbrs	r3, 6
     e8e:	06 c0       	rjmp	.+12     	; 0xe9c <vfprintf+0xc4>
     e90:	8a e0       	ldi	r24, 0x0A	; 10
     e92:	98 9e       	mul	r9, r24
     e94:	20 0d       	add	r18, r0
     e96:	11 24       	eor	r1, r1
     e98:	92 2e       	mov	r9, r18
     e9a:	11 c0       	rjmp	.+34     	; 0xebe <vfprintf+0xe6>
     e9c:	ea e0       	ldi	r30, 0x0A	; 10
     e9e:	2e 9e       	mul	r2, r30
     ea0:	20 0d       	add	r18, r0
     ea2:	11 24       	eor	r1, r1
     ea4:	22 2e       	mov	r2, r18
     ea6:	f3 2d       	mov	r31, r3
     ea8:	f0 62       	ori	r31, 0x20	; 32
     eaa:	3f 2e       	mov	r3, r31
     eac:	08 c0       	rjmp	.+16     	; 0xebe <vfprintf+0xe6>
     eae:	8c 36       	cpi	r24, 0x6C	; 108
     eb0:	21 f4       	brne	.+8      	; 0xeba <vfprintf+0xe2>
     eb2:	83 2d       	mov	r24, r3
     eb4:	80 68       	ori	r24, 0x80	; 128
     eb6:	38 2e       	mov	r3, r24
     eb8:	02 c0       	rjmp	.+4      	; 0xebe <vfprintf+0xe6>
     eba:	88 36       	cpi	r24, 0x68	; 104
     ebc:	41 f4       	brne	.+16     	; 0xece <vfprintf+0xf6>
     ebe:	f7 01       	movw	r30, r14
     ec0:	93 fd       	sbrc	r25, 3
     ec2:	85 91       	lpm	r24, Z+
     ec4:	93 ff       	sbrs	r25, 3
     ec6:	81 91       	ld	r24, Z+
     ec8:	7f 01       	movw	r14, r30
     eca:	81 11       	cpse	r24, r1
     ecc:	b3 cf       	rjmp	.-154    	; 0xe34 <vfprintf+0x5c>
     ece:	98 2f       	mov	r25, r24
     ed0:	9f 7d       	andi	r25, 0xDF	; 223
     ed2:	95 54       	subi	r25, 0x45	; 69
     ed4:	93 30       	cpi	r25, 0x03	; 3
     ed6:	28 f4       	brcc	.+10     	; 0xee2 <vfprintf+0x10a>
     ed8:	0c 5f       	subi	r16, 0xFC	; 252
     eda:	1f 4f       	sbci	r17, 0xFF	; 255
     edc:	9f e3       	ldi	r25, 0x3F	; 63
     ede:	99 83       	std	Y+1, r25	; 0x01
     ee0:	0d c0       	rjmp	.+26     	; 0xefc <vfprintf+0x124>
     ee2:	83 36       	cpi	r24, 0x63	; 99
     ee4:	31 f0       	breq	.+12     	; 0xef2 <vfprintf+0x11a>
     ee6:	83 37       	cpi	r24, 0x73	; 115
     ee8:	71 f0       	breq	.+28     	; 0xf06 <vfprintf+0x12e>
     eea:	83 35       	cpi	r24, 0x53	; 83
     eec:	09 f0       	breq	.+2      	; 0xef0 <vfprintf+0x118>
     eee:	59 c0       	rjmp	.+178    	; 0xfa2 <vfprintf+0x1ca>
     ef0:	21 c0       	rjmp	.+66     	; 0xf34 <vfprintf+0x15c>
     ef2:	f8 01       	movw	r30, r16
     ef4:	80 81       	ld	r24, Z
     ef6:	89 83       	std	Y+1, r24	; 0x01
     ef8:	0e 5f       	subi	r16, 0xFE	; 254
     efa:	1f 4f       	sbci	r17, 0xFF	; 255
     efc:	88 24       	eor	r8, r8
     efe:	83 94       	inc	r8
     f00:	91 2c       	mov	r9, r1
     f02:	53 01       	movw	r10, r6
     f04:	13 c0       	rjmp	.+38     	; 0xf2c <vfprintf+0x154>
     f06:	28 01       	movw	r4, r16
     f08:	f2 e0       	ldi	r31, 0x02	; 2
     f0a:	4f 0e       	add	r4, r31
     f0c:	51 1c       	adc	r5, r1
     f0e:	f8 01       	movw	r30, r16
     f10:	a0 80       	ld	r10, Z
     f12:	b1 80       	ldd	r11, Z+1	; 0x01
     f14:	36 fe       	sbrs	r3, 6
     f16:	03 c0       	rjmp	.+6      	; 0xf1e <vfprintf+0x146>
     f18:	69 2d       	mov	r22, r9
     f1a:	70 e0       	ldi	r23, 0x00	; 0
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <vfprintf+0x14a>
     f1e:	6f ef       	ldi	r22, 0xFF	; 255
     f20:	7f ef       	ldi	r23, 0xFF	; 255
     f22:	c5 01       	movw	r24, r10
     f24:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <strnlen>
     f28:	4c 01       	movw	r8, r24
     f2a:	82 01       	movw	r16, r4
     f2c:	f3 2d       	mov	r31, r3
     f2e:	ff 77       	andi	r31, 0x7F	; 127
     f30:	3f 2e       	mov	r3, r31
     f32:	16 c0       	rjmp	.+44     	; 0xf60 <vfprintf+0x188>
     f34:	28 01       	movw	r4, r16
     f36:	22 e0       	ldi	r18, 0x02	; 2
     f38:	42 0e       	add	r4, r18
     f3a:	51 1c       	adc	r5, r1
     f3c:	f8 01       	movw	r30, r16
     f3e:	a0 80       	ld	r10, Z
     f40:	b1 80       	ldd	r11, Z+1	; 0x01
     f42:	36 fe       	sbrs	r3, 6
     f44:	03 c0       	rjmp	.+6      	; 0xf4c <vfprintf+0x174>
     f46:	69 2d       	mov	r22, r9
     f48:	70 e0       	ldi	r23, 0x00	; 0
     f4a:	02 c0       	rjmp	.+4      	; 0xf50 <vfprintf+0x178>
     f4c:	6f ef       	ldi	r22, 0xFF	; 255
     f4e:	7f ef       	ldi	r23, 0xFF	; 255
     f50:	c5 01       	movw	r24, r10
     f52:	0e 94 cd 08 	call	0x119a	; 0x119a <strnlen_P>
     f56:	4c 01       	movw	r8, r24
     f58:	f3 2d       	mov	r31, r3
     f5a:	f0 68       	ori	r31, 0x80	; 128
     f5c:	3f 2e       	mov	r3, r31
     f5e:	82 01       	movw	r16, r4
     f60:	33 fc       	sbrc	r3, 3
     f62:	1b c0       	rjmp	.+54     	; 0xf9a <vfprintf+0x1c2>
     f64:	82 2d       	mov	r24, r2
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	88 16       	cp	r8, r24
     f6a:	99 06       	cpc	r9, r25
     f6c:	b0 f4       	brcc	.+44     	; 0xf9a <vfprintf+0x1c2>
     f6e:	b6 01       	movw	r22, r12
     f70:	80 e2       	ldi	r24, 0x20	; 32
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <fputc>
     f78:	2a 94       	dec	r2
     f7a:	f4 cf       	rjmp	.-24     	; 0xf64 <vfprintf+0x18c>
     f7c:	f5 01       	movw	r30, r10
     f7e:	37 fc       	sbrc	r3, 7
     f80:	85 91       	lpm	r24, Z+
     f82:	37 fe       	sbrs	r3, 7
     f84:	81 91       	ld	r24, Z+
     f86:	5f 01       	movw	r10, r30
     f88:	b6 01       	movw	r22, r12
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <fputc>
     f90:	21 10       	cpse	r2, r1
     f92:	2a 94       	dec	r2
     f94:	21 e0       	ldi	r18, 0x01	; 1
     f96:	82 1a       	sub	r8, r18
     f98:	91 08       	sbc	r9, r1
     f9a:	81 14       	cp	r8, r1
     f9c:	91 04       	cpc	r9, r1
     f9e:	71 f7       	brne	.-36     	; 0xf7c <vfprintf+0x1a4>
     fa0:	e8 c0       	rjmp	.+464    	; 0x1172 <vfprintf+0x39a>
     fa2:	84 36       	cpi	r24, 0x64	; 100
     fa4:	11 f0       	breq	.+4      	; 0xfaa <vfprintf+0x1d2>
     fa6:	89 36       	cpi	r24, 0x69	; 105
     fa8:	41 f5       	brne	.+80     	; 0xffa <vfprintf+0x222>
     faa:	f8 01       	movw	r30, r16
     fac:	37 fe       	sbrs	r3, 7
     fae:	07 c0       	rjmp	.+14     	; 0xfbe <vfprintf+0x1e6>
     fb0:	60 81       	ld	r22, Z
     fb2:	71 81       	ldd	r23, Z+1	; 0x01
     fb4:	82 81       	ldd	r24, Z+2	; 0x02
     fb6:	93 81       	ldd	r25, Z+3	; 0x03
     fb8:	0c 5f       	subi	r16, 0xFC	; 252
     fba:	1f 4f       	sbci	r17, 0xFF	; 255
     fbc:	08 c0       	rjmp	.+16     	; 0xfce <vfprintf+0x1f6>
     fbe:	60 81       	ld	r22, Z
     fc0:	71 81       	ldd	r23, Z+1	; 0x01
     fc2:	07 2e       	mov	r0, r23
     fc4:	00 0c       	add	r0, r0
     fc6:	88 0b       	sbc	r24, r24
     fc8:	99 0b       	sbc	r25, r25
     fca:	0e 5f       	subi	r16, 0xFE	; 254
     fcc:	1f 4f       	sbci	r17, 0xFF	; 255
     fce:	f3 2d       	mov	r31, r3
     fd0:	ff 76       	andi	r31, 0x6F	; 111
     fd2:	3f 2e       	mov	r3, r31
     fd4:	97 ff       	sbrs	r25, 7
     fd6:	09 c0       	rjmp	.+18     	; 0xfea <vfprintf+0x212>
     fd8:	90 95       	com	r25
     fda:	80 95       	com	r24
     fdc:	70 95       	com	r23
     fde:	61 95       	neg	r22
     fe0:	7f 4f       	sbci	r23, 0xFF	; 255
     fe2:	8f 4f       	sbci	r24, 0xFF	; 255
     fe4:	9f 4f       	sbci	r25, 0xFF	; 255
     fe6:	f0 68       	ori	r31, 0x80	; 128
     fe8:	3f 2e       	mov	r3, r31
     fea:	2a e0       	ldi	r18, 0x0A	; 10
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	a3 01       	movw	r20, r6
     ff0:	0e 94 1f 09 	call	0x123e	; 0x123e <__ultoa_invert>
     ff4:	88 2e       	mov	r8, r24
     ff6:	86 18       	sub	r8, r6
     ff8:	45 c0       	rjmp	.+138    	; 0x1084 <vfprintf+0x2ac>
     ffa:	85 37       	cpi	r24, 0x75	; 117
     ffc:	31 f4       	brne	.+12     	; 0x100a <vfprintf+0x232>
     ffe:	23 2d       	mov	r18, r3
    1000:	2f 7e       	andi	r18, 0xEF	; 239
    1002:	b2 2e       	mov	r11, r18
    1004:	2a e0       	ldi	r18, 0x0A	; 10
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	25 c0       	rjmp	.+74     	; 0x1054 <vfprintf+0x27c>
    100a:	93 2d       	mov	r25, r3
    100c:	99 7f       	andi	r25, 0xF9	; 249
    100e:	b9 2e       	mov	r11, r25
    1010:	8f 36       	cpi	r24, 0x6F	; 111
    1012:	c1 f0       	breq	.+48     	; 0x1044 <vfprintf+0x26c>
    1014:	18 f4       	brcc	.+6      	; 0x101c <vfprintf+0x244>
    1016:	88 35       	cpi	r24, 0x58	; 88
    1018:	79 f0       	breq	.+30     	; 0x1038 <vfprintf+0x260>
    101a:	b5 c0       	rjmp	.+362    	; 0x1186 <vfprintf+0x3ae>
    101c:	80 37       	cpi	r24, 0x70	; 112
    101e:	19 f0       	breq	.+6      	; 0x1026 <vfprintf+0x24e>
    1020:	88 37       	cpi	r24, 0x78	; 120
    1022:	21 f0       	breq	.+8      	; 0x102c <vfprintf+0x254>
    1024:	b0 c0       	rjmp	.+352    	; 0x1186 <vfprintf+0x3ae>
    1026:	e9 2f       	mov	r30, r25
    1028:	e0 61       	ori	r30, 0x10	; 16
    102a:	be 2e       	mov	r11, r30
    102c:	b4 fe       	sbrs	r11, 4
    102e:	0d c0       	rjmp	.+26     	; 0x104a <vfprintf+0x272>
    1030:	fb 2d       	mov	r31, r11
    1032:	f4 60       	ori	r31, 0x04	; 4
    1034:	bf 2e       	mov	r11, r31
    1036:	09 c0       	rjmp	.+18     	; 0x104a <vfprintf+0x272>
    1038:	34 fe       	sbrs	r3, 4
    103a:	0a c0       	rjmp	.+20     	; 0x1050 <vfprintf+0x278>
    103c:	29 2f       	mov	r18, r25
    103e:	26 60       	ori	r18, 0x06	; 6
    1040:	b2 2e       	mov	r11, r18
    1042:	06 c0       	rjmp	.+12     	; 0x1050 <vfprintf+0x278>
    1044:	28 e0       	ldi	r18, 0x08	; 8
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	05 c0       	rjmp	.+10     	; 0x1054 <vfprintf+0x27c>
    104a:	20 e1       	ldi	r18, 0x10	; 16
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	02 c0       	rjmp	.+4      	; 0x1054 <vfprintf+0x27c>
    1050:	20 e1       	ldi	r18, 0x10	; 16
    1052:	32 e0       	ldi	r19, 0x02	; 2
    1054:	f8 01       	movw	r30, r16
    1056:	b7 fe       	sbrs	r11, 7
    1058:	07 c0       	rjmp	.+14     	; 0x1068 <vfprintf+0x290>
    105a:	60 81       	ld	r22, Z
    105c:	71 81       	ldd	r23, Z+1	; 0x01
    105e:	82 81       	ldd	r24, Z+2	; 0x02
    1060:	93 81       	ldd	r25, Z+3	; 0x03
    1062:	0c 5f       	subi	r16, 0xFC	; 252
    1064:	1f 4f       	sbci	r17, 0xFF	; 255
    1066:	06 c0       	rjmp	.+12     	; 0x1074 <vfprintf+0x29c>
    1068:	60 81       	ld	r22, Z
    106a:	71 81       	ldd	r23, Z+1	; 0x01
    106c:	80 e0       	ldi	r24, 0x00	; 0
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	0e 5f       	subi	r16, 0xFE	; 254
    1072:	1f 4f       	sbci	r17, 0xFF	; 255
    1074:	a3 01       	movw	r20, r6
    1076:	0e 94 1f 09 	call	0x123e	; 0x123e <__ultoa_invert>
    107a:	88 2e       	mov	r8, r24
    107c:	86 18       	sub	r8, r6
    107e:	fb 2d       	mov	r31, r11
    1080:	ff 77       	andi	r31, 0x7F	; 127
    1082:	3f 2e       	mov	r3, r31
    1084:	36 fe       	sbrs	r3, 6
    1086:	0d c0       	rjmp	.+26     	; 0x10a2 <vfprintf+0x2ca>
    1088:	23 2d       	mov	r18, r3
    108a:	2e 7f       	andi	r18, 0xFE	; 254
    108c:	a2 2e       	mov	r10, r18
    108e:	89 14       	cp	r8, r9
    1090:	58 f4       	brcc	.+22     	; 0x10a8 <vfprintf+0x2d0>
    1092:	34 fe       	sbrs	r3, 4
    1094:	0b c0       	rjmp	.+22     	; 0x10ac <vfprintf+0x2d4>
    1096:	32 fc       	sbrc	r3, 2
    1098:	09 c0       	rjmp	.+18     	; 0x10ac <vfprintf+0x2d4>
    109a:	83 2d       	mov	r24, r3
    109c:	8e 7e       	andi	r24, 0xEE	; 238
    109e:	a8 2e       	mov	r10, r24
    10a0:	05 c0       	rjmp	.+10     	; 0x10ac <vfprintf+0x2d4>
    10a2:	b8 2c       	mov	r11, r8
    10a4:	a3 2c       	mov	r10, r3
    10a6:	03 c0       	rjmp	.+6      	; 0x10ae <vfprintf+0x2d6>
    10a8:	b8 2c       	mov	r11, r8
    10aa:	01 c0       	rjmp	.+2      	; 0x10ae <vfprintf+0x2d6>
    10ac:	b9 2c       	mov	r11, r9
    10ae:	a4 fe       	sbrs	r10, 4
    10b0:	0f c0       	rjmp	.+30     	; 0x10d0 <vfprintf+0x2f8>
    10b2:	fe 01       	movw	r30, r28
    10b4:	e8 0d       	add	r30, r8
    10b6:	f1 1d       	adc	r31, r1
    10b8:	80 81       	ld	r24, Z
    10ba:	80 33       	cpi	r24, 0x30	; 48
    10bc:	21 f4       	brne	.+8      	; 0x10c6 <vfprintf+0x2ee>
    10be:	9a 2d       	mov	r25, r10
    10c0:	99 7e       	andi	r25, 0xE9	; 233
    10c2:	a9 2e       	mov	r10, r25
    10c4:	09 c0       	rjmp	.+18     	; 0x10d8 <vfprintf+0x300>
    10c6:	a2 fe       	sbrs	r10, 2
    10c8:	06 c0       	rjmp	.+12     	; 0x10d6 <vfprintf+0x2fe>
    10ca:	b3 94       	inc	r11
    10cc:	b3 94       	inc	r11
    10ce:	04 c0       	rjmp	.+8      	; 0x10d8 <vfprintf+0x300>
    10d0:	8a 2d       	mov	r24, r10
    10d2:	86 78       	andi	r24, 0x86	; 134
    10d4:	09 f0       	breq	.+2      	; 0x10d8 <vfprintf+0x300>
    10d6:	b3 94       	inc	r11
    10d8:	a3 fc       	sbrc	r10, 3
    10da:	11 c0       	rjmp	.+34     	; 0x10fe <vfprintf+0x326>
    10dc:	a0 fe       	sbrs	r10, 0
    10de:	06 c0       	rjmp	.+12     	; 0x10ec <vfprintf+0x314>
    10e0:	b2 14       	cp	r11, r2
    10e2:	88 f4       	brcc	.+34     	; 0x1106 <vfprintf+0x32e>
    10e4:	28 0c       	add	r2, r8
    10e6:	92 2c       	mov	r9, r2
    10e8:	9b 18       	sub	r9, r11
    10ea:	0e c0       	rjmp	.+28     	; 0x1108 <vfprintf+0x330>
    10ec:	b2 14       	cp	r11, r2
    10ee:	60 f4       	brcc	.+24     	; 0x1108 <vfprintf+0x330>
    10f0:	b6 01       	movw	r22, r12
    10f2:	80 e2       	ldi	r24, 0x20	; 32
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <fputc>
    10fa:	b3 94       	inc	r11
    10fc:	f7 cf       	rjmp	.-18     	; 0x10ec <vfprintf+0x314>
    10fe:	b2 14       	cp	r11, r2
    1100:	18 f4       	brcc	.+6      	; 0x1108 <vfprintf+0x330>
    1102:	2b 18       	sub	r2, r11
    1104:	02 c0       	rjmp	.+4      	; 0x110a <vfprintf+0x332>
    1106:	98 2c       	mov	r9, r8
    1108:	21 2c       	mov	r2, r1
    110a:	a4 fe       	sbrs	r10, 4
    110c:	10 c0       	rjmp	.+32     	; 0x112e <vfprintf+0x356>
    110e:	b6 01       	movw	r22, r12
    1110:	80 e3       	ldi	r24, 0x30	; 48
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <fputc>
    1118:	a2 fe       	sbrs	r10, 2
    111a:	17 c0       	rjmp	.+46     	; 0x114a <vfprintf+0x372>
    111c:	a1 fc       	sbrc	r10, 1
    111e:	03 c0       	rjmp	.+6      	; 0x1126 <vfprintf+0x34e>
    1120:	88 e7       	ldi	r24, 0x78	; 120
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	02 c0       	rjmp	.+4      	; 0x112a <vfprintf+0x352>
    1126:	88 e5       	ldi	r24, 0x58	; 88
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	b6 01       	movw	r22, r12
    112c:	0c c0       	rjmp	.+24     	; 0x1146 <vfprintf+0x36e>
    112e:	8a 2d       	mov	r24, r10
    1130:	86 78       	andi	r24, 0x86	; 134
    1132:	59 f0       	breq	.+22     	; 0x114a <vfprintf+0x372>
    1134:	a1 fe       	sbrs	r10, 1
    1136:	02 c0       	rjmp	.+4      	; 0x113c <vfprintf+0x364>
    1138:	8b e2       	ldi	r24, 0x2B	; 43
    113a:	01 c0       	rjmp	.+2      	; 0x113e <vfprintf+0x366>
    113c:	80 e2       	ldi	r24, 0x20	; 32
    113e:	a7 fc       	sbrc	r10, 7
    1140:	8d e2       	ldi	r24, 0x2D	; 45
    1142:	b6 01       	movw	r22, r12
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <fputc>
    114a:	89 14       	cp	r8, r9
    114c:	38 f4       	brcc	.+14     	; 0x115c <vfprintf+0x384>
    114e:	b6 01       	movw	r22, r12
    1150:	80 e3       	ldi	r24, 0x30	; 48
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <fputc>
    1158:	9a 94       	dec	r9
    115a:	f7 cf       	rjmp	.-18     	; 0x114a <vfprintf+0x372>
    115c:	8a 94       	dec	r8
    115e:	f3 01       	movw	r30, r6
    1160:	e8 0d       	add	r30, r8
    1162:	f1 1d       	adc	r31, r1
    1164:	80 81       	ld	r24, Z
    1166:	b6 01       	movw	r22, r12
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <fputc>
    116e:	81 10       	cpse	r8, r1
    1170:	f5 cf       	rjmp	.-22     	; 0x115c <vfprintf+0x384>
    1172:	22 20       	and	r2, r2
    1174:	09 f4       	brne	.+2      	; 0x1178 <vfprintf+0x3a0>
    1176:	42 ce       	rjmp	.-892    	; 0xdfc <vfprintf+0x24>
    1178:	b6 01       	movw	r22, r12
    117a:	80 e2       	ldi	r24, 0x20	; 32
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <fputc>
    1182:	2a 94       	dec	r2
    1184:	f6 cf       	rjmp	.-20     	; 0x1172 <vfprintf+0x39a>
    1186:	f6 01       	movw	r30, r12
    1188:	86 81       	ldd	r24, Z+6	; 0x06
    118a:	97 81       	ldd	r25, Z+7	; 0x07
    118c:	02 c0       	rjmp	.+4      	; 0x1192 <vfprintf+0x3ba>
    118e:	8f ef       	ldi	r24, 0xFF	; 255
    1190:	9f ef       	ldi	r25, 0xFF	; 255
    1192:	2b 96       	adiw	r28, 0x0b	; 11
    1194:	e2 e1       	ldi	r30, 0x12	; 18
    1196:	0c 94 96 09 	jmp	0x132c	; 0x132c <__epilogue_restores__>

0000119a <strnlen_P>:
    119a:	fc 01       	movw	r30, r24
    119c:	05 90       	lpm	r0, Z+
    119e:	61 50       	subi	r22, 0x01	; 1
    11a0:	70 40       	sbci	r23, 0x00	; 0
    11a2:	01 10       	cpse	r0, r1
    11a4:	d8 f7       	brcc	.-10     	; 0x119c <strnlen_P+0x2>
    11a6:	80 95       	com	r24
    11a8:	90 95       	com	r25
    11aa:	8e 0f       	add	r24, r30
    11ac:	9f 1f       	adc	r25, r31
    11ae:	08 95       	ret

000011b0 <strnlen>:
    11b0:	fc 01       	movw	r30, r24
    11b2:	61 50       	subi	r22, 0x01	; 1
    11b4:	70 40       	sbci	r23, 0x00	; 0
    11b6:	01 90       	ld	r0, Z+
    11b8:	01 10       	cpse	r0, r1
    11ba:	d8 f7       	brcc	.-10     	; 0x11b2 <strnlen+0x2>
    11bc:	80 95       	com	r24
    11be:	90 95       	com	r25
    11c0:	8e 0f       	add	r24, r30
    11c2:	9f 1f       	adc	r25, r31
    11c4:	08 95       	ret

000011c6 <fputc>:
    11c6:	0f 93       	push	r16
    11c8:	1f 93       	push	r17
    11ca:	cf 93       	push	r28
    11cc:	df 93       	push	r29
    11ce:	fb 01       	movw	r30, r22
    11d0:	23 81       	ldd	r18, Z+3	; 0x03
    11d2:	21 fd       	sbrc	r18, 1
    11d4:	03 c0       	rjmp	.+6      	; 0x11dc <fputc+0x16>
    11d6:	8f ef       	ldi	r24, 0xFF	; 255
    11d8:	9f ef       	ldi	r25, 0xFF	; 255
    11da:	2c c0       	rjmp	.+88     	; 0x1234 <fputc+0x6e>
    11dc:	22 ff       	sbrs	r18, 2
    11de:	16 c0       	rjmp	.+44     	; 0x120c <fputc+0x46>
    11e0:	46 81       	ldd	r20, Z+6	; 0x06
    11e2:	57 81       	ldd	r21, Z+7	; 0x07
    11e4:	24 81       	ldd	r18, Z+4	; 0x04
    11e6:	35 81       	ldd	r19, Z+5	; 0x05
    11e8:	42 17       	cp	r20, r18
    11ea:	53 07       	cpc	r21, r19
    11ec:	44 f4       	brge	.+16     	; 0x11fe <fputc+0x38>
    11ee:	a0 81       	ld	r26, Z
    11f0:	b1 81       	ldd	r27, Z+1	; 0x01
    11f2:	9d 01       	movw	r18, r26
    11f4:	2f 5f       	subi	r18, 0xFF	; 255
    11f6:	3f 4f       	sbci	r19, 0xFF	; 255
    11f8:	20 83       	st	Z, r18
    11fa:	31 83       	std	Z+1, r19	; 0x01
    11fc:	8c 93       	st	X, r24
    11fe:	26 81       	ldd	r18, Z+6	; 0x06
    1200:	37 81       	ldd	r19, Z+7	; 0x07
    1202:	2f 5f       	subi	r18, 0xFF	; 255
    1204:	3f 4f       	sbci	r19, 0xFF	; 255
    1206:	26 83       	std	Z+6, r18	; 0x06
    1208:	37 83       	std	Z+7, r19	; 0x07
    120a:	14 c0       	rjmp	.+40     	; 0x1234 <fputc+0x6e>
    120c:	8b 01       	movw	r16, r22
    120e:	ec 01       	movw	r28, r24
    1210:	fb 01       	movw	r30, r22
    1212:	00 84       	ldd	r0, Z+8	; 0x08
    1214:	f1 85       	ldd	r31, Z+9	; 0x09
    1216:	e0 2d       	mov	r30, r0
    1218:	09 95       	icall
    121a:	89 2b       	or	r24, r25
    121c:	e1 f6       	brne	.-72     	; 0x11d6 <fputc+0x10>
    121e:	d8 01       	movw	r26, r16
    1220:	16 96       	adiw	r26, 0x06	; 6
    1222:	8d 91       	ld	r24, X+
    1224:	9c 91       	ld	r25, X
    1226:	17 97       	sbiw	r26, 0x07	; 7
    1228:	01 96       	adiw	r24, 0x01	; 1
    122a:	16 96       	adiw	r26, 0x06	; 6
    122c:	8d 93       	st	X+, r24
    122e:	9c 93       	st	X, r25
    1230:	17 97       	sbiw	r26, 0x07	; 7
    1232:	ce 01       	movw	r24, r28
    1234:	df 91       	pop	r29
    1236:	cf 91       	pop	r28
    1238:	1f 91       	pop	r17
    123a:	0f 91       	pop	r16
    123c:	08 95       	ret

0000123e <__ultoa_invert>:
    123e:	fa 01       	movw	r30, r20
    1240:	aa 27       	eor	r26, r26
    1242:	28 30       	cpi	r18, 0x08	; 8
    1244:	51 f1       	breq	.+84     	; 0x129a <__ultoa_invert+0x5c>
    1246:	20 31       	cpi	r18, 0x10	; 16
    1248:	81 f1       	breq	.+96     	; 0x12aa <__ultoa_invert+0x6c>
    124a:	e8 94       	clt
    124c:	6f 93       	push	r22
    124e:	6e 7f       	andi	r22, 0xFE	; 254
    1250:	6e 5f       	subi	r22, 0xFE	; 254
    1252:	7f 4f       	sbci	r23, 0xFF	; 255
    1254:	8f 4f       	sbci	r24, 0xFF	; 255
    1256:	9f 4f       	sbci	r25, 0xFF	; 255
    1258:	af 4f       	sbci	r26, 0xFF	; 255
    125a:	b1 e0       	ldi	r27, 0x01	; 1
    125c:	3e d0       	rcall	.+124    	; 0x12da <__ultoa_invert+0x9c>
    125e:	b4 e0       	ldi	r27, 0x04	; 4
    1260:	3c d0       	rcall	.+120    	; 0x12da <__ultoa_invert+0x9c>
    1262:	67 0f       	add	r22, r23
    1264:	78 1f       	adc	r23, r24
    1266:	89 1f       	adc	r24, r25
    1268:	9a 1f       	adc	r25, r26
    126a:	a1 1d       	adc	r26, r1
    126c:	68 0f       	add	r22, r24
    126e:	79 1f       	adc	r23, r25
    1270:	8a 1f       	adc	r24, r26
    1272:	91 1d       	adc	r25, r1
    1274:	a1 1d       	adc	r26, r1
    1276:	6a 0f       	add	r22, r26
    1278:	71 1d       	adc	r23, r1
    127a:	81 1d       	adc	r24, r1
    127c:	91 1d       	adc	r25, r1
    127e:	a1 1d       	adc	r26, r1
    1280:	20 d0       	rcall	.+64     	; 0x12c2 <__ultoa_invert+0x84>
    1282:	09 f4       	brne	.+2      	; 0x1286 <__ultoa_invert+0x48>
    1284:	68 94       	set
    1286:	3f 91       	pop	r19
    1288:	2a e0       	ldi	r18, 0x0A	; 10
    128a:	26 9f       	mul	r18, r22
    128c:	11 24       	eor	r1, r1
    128e:	30 19       	sub	r19, r0
    1290:	30 5d       	subi	r19, 0xD0	; 208
    1292:	31 93       	st	Z+, r19
    1294:	de f6       	brtc	.-74     	; 0x124c <__ultoa_invert+0xe>
    1296:	cf 01       	movw	r24, r30
    1298:	08 95       	ret
    129a:	46 2f       	mov	r20, r22
    129c:	47 70       	andi	r20, 0x07	; 7
    129e:	40 5d       	subi	r20, 0xD0	; 208
    12a0:	41 93       	st	Z+, r20
    12a2:	b3 e0       	ldi	r27, 0x03	; 3
    12a4:	0f d0       	rcall	.+30     	; 0x12c4 <__ultoa_invert+0x86>
    12a6:	c9 f7       	brne	.-14     	; 0x129a <__ultoa_invert+0x5c>
    12a8:	f6 cf       	rjmp	.-20     	; 0x1296 <__ultoa_invert+0x58>
    12aa:	46 2f       	mov	r20, r22
    12ac:	4f 70       	andi	r20, 0x0F	; 15
    12ae:	40 5d       	subi	r20, 0xD0	; 208
    12b0:	4a 33       	cpi	r20, 0x3A	; 58
    12b2:	18 f0       	brcs	.+6      	; 0x12ba <__ultoa_invert+0x7c>
    12b4:	49 5d       	subi	r20, 0xD9	; 217
    12b6:	31 fd       	sbrc	r19, 1
    12b8:	40 52       	subi	r20, 0x20	; 32
    12ba:	41 93       	st	Z+, r20
    12bc:	02 d0       	rcall	.+4      	; 0x12c2 <__ultoa_invert+0x84>
    12be:	a9 f7       	brne	.-22     	; 0x12aa <__ultoa_invert+0x6c>
    12c0:	ea cf       	rjmp	.-44     	; 0x1296 <__ultoa_invert+0x58>
    12c2:	b4 e0       	ldi	r27, 0x04	; 4
    12c4:	a6 95       	lsr	r26
    12c6:	97 95       	ror	r25
    12c8:	87 95       	ror	r24
    12ca:	77 95       	ror	r23
    12cc:	67 95       	ror	r22
    12ce:	ba 95       	dec	r27
    12d0:	c9 f7       	brne	.-14     	; 0x12c4 <__ultoa_invert+0x86>
    12d2:	00 97       	sbiw	r24, 0x00	; 0
    12d4:	61 05       	cpc	r22, r1
    12d6:	71 05       	cpc	r23, r1
    12d8:	08 95       	ret
    12da:	9b 01       	movw	r18, r22
    12dc:	ac 01       	movw	r20, r24
    12de:	0a 2e       	mov	r0, r26
    12e0:	06 94       	lsr	r0
    12e2:	57 95       	ror	r21
    12e4:	47 95       	ror	r20
    12e6:	37 95       	ror	r19
    12e8:	27 95       	ror	r18
    12ea:	ba 95       	dec	r27
    12ec:	c9 f7       	brne	.-14     	; 0x12e0 <__ultoa_invert+0xa2>
    12ee:	62 0f       	add	r22, r18
    12f0:	73 1f       	adc	r23, r19
    12f2:	84 1f       	adc	r24, r20
    12f4:	95 1f       	adc	r25, r21
    12f6:	a0 1d       	adc	r26, r0
    12f8:	08 95       	ret

000012fa <__prologue_saves__>:
    12fa:	2f 92       	push	r2
    12fc:	3f 92       	push	r3
    12fe:	4f 92       	push	r4
    1300:	5f 92       	push	r5
    1302:	6f 92       	push	r6
    1304:	7f 92       	push	r7
    1306:	8f 92       	push	r8
    1308:	9f 92       	push	r9
    130a:	af 92       	push	r10
    130c:	bf 92       	push	r11
    130e:	cf 92       	push	r12
    1310:	df 92       	push	r13
    1312:	ef 92       	push	r14
    1314:	ff 92       	push	r15
    1316:	0f 93       	push	r16
    1318:	1f 93       	push	r17
    131a:	cf 93       	push	r28
    131c:	df 93       	push	r29
    131e:	cd b7       	in	r28, 0x3d	; 61
    1320:	de b7       	in	r29, 0x3e	; 62
    1322:	ca 1b       	sub	r28, r26
    1324:	db 0b       	sbc	r29, r27
    1326:	cd bf       	out	0x3d, r28	; 61
    1328:	de bf       	out	0x3e, r29	; 62
    132a:	09 94       	ijmp

0000132c <__epilogue_restores__>:
    132c:	2a 88       	ldd	r2, Y+18	; 0x12
    132e:	39 88       	ldd	r3, Y+17	; 0x11
    1330:	48 88       	ldd	r4, Y+16	; 0x10
    1332:	5f 84       	ldd	r5, Y+15	; 0x0f
    1334:	6e 84       	ldd	r6, Y+14	; 0x0e
    1336:	7d 84       	ldd	r7, Y+13	; 0x0d
    1338:	8c 84       	ldd	r8, Y+12	; 0x0c
    133a:	9b 84       	ldd	r9, Y+11	; 0x0b
    133c:	aa 84       	ldd	r10, Y+10	; 0x0a
    133e:	b9 84       	ldd	r11, Y+9	; 0x09
    1340:	c8 84       	ldd	r12, Y+8	; 0x08
    1342:	df 80       	ldd	r13, Y+7	; 0x07
    1344:	ee 80       	ldd	r14, Y+6	; 0x06
    1346:	fd 80       	ldd	r15, Y+5	; 0x05
    1348:	0c 81       	ldd	r16, Y+4	; 0x04
    134a:	1b 81       	ldd	r17, Y+3	; 0x03
    134c:	aa 81       	ldd	r26, Y+2	; 0x02
    134e:	b9 81       	ldd	r27, Y+1	; 0x01
    1350:	ce 0f       	add	r28, r30
    1352:	d1 1d       	adc	r29, r1
    1354:	cd bf       	out	0x3d, r28	; 61
    1356:	de bf       	out	0x3e, r29	; 62
    1358:	ed 01       	movw	r28, r26
    135a:	08 95       	ret

0000135c <_exit>:
    135c:	f8 94       	cli

0000135e <__stop_program>:
    135e:	ff cf       	rjmp	.-2      	; 0x135e <__stop_program>
